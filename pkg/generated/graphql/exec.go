// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"bytes"
	context "context"
	strconv "strconv"

	graphql "github.com/99designs/gqlgen/graphql"
	introspection "github.com/99designs/gqlgen/graphql/introspection"
	invoicing "github.com/joincivil/civil-api-server/pkg/invoicing"
	users "github.com/joincivil/civil-api-server/pkg/users"
	utils "github.com/joincivil/civil-api-server/pkg/utils"
	postgres "github.com/joincivil/civil-events-crawler/pkg/persistence/postgres"
	model "github.com/joincivil/civil-events-processor/pkg/model"
	gqlparser "github.com/vektah/gqlparser"
	ast "github.com/vektah/gqlparser/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
}

type ResolverRoot interface {
	Appeal() AppealResolver
	Challenge() ChallengeResolver
	Charter() CharterResolver
	ContentRevision() ContentRevisionResolver
	GovernanceEvent() GovernanceEventResolver
	Listing() ListingResolver
	Mutation() MutationResolver
	Poll() PollResolver
	Query() QueryResolver
	User() UserResolver
}

type DirectiveRoot struct {
}
type AppealResolver interface {
	Requester(ctx context.Context, obj *model.Appeal) (string, error)
	AppealFeePaid(ctx context.Context, obj *model.Appeal) (int, error)
	AppealPhaseExpiry(ctx context.Context, obj *model.Appeal) (int, error)

	AppealOpenToChallengeExpiry(ctx context.Context, obj *model.Appeal) (int, error)

	AppealChallengeID(ctx context.Context, obj *model.Appeal) (int, error)
	AppealChallenge(ctx context.Context, obj *model.Appeal) (*model.Challenge, error)
}
type ChallengeResolver interface {
	ChallengeID(ctx context.Context, obj *model.Challenge) (int, error)
	ListingAddress(ctx context.Context, obj *model.Challenge) (string, error)

	RewardPool(ctx context.Context, obj *model.Challenge) (string, error)
	Challenger(ctx context.Context, obj *model.Challenge) (string, error)

	Stake(ctx context.Context, obj *model.Challenge) (string, error)
	TotalTokens(ctx context.Context, obj *model.Challenge) (string, error)
	Poll(ctx context.Context, obj *model.Challenge) (*model.Poll, error)
	RequestAppealExpiry(ctx context.Context, obj *model.Challenge) (int, error)
	Appeal(ctx context.Context, obj *model.Challenge) (*model.Appeal, error)
	LastUpdatedDateTs(ctx context.Context, obj *model.Challenge) (int, error)
}
type CharterResolver interface {
	ContentID(ctx context.Context, obj *model.Charter) (int, error)
	RevisionID(ctx context.Context, obj *model.Charter) (int, error)
	Signature(ctx context.Context, obj *model.Charter) (string, error)
	Author(ctx context.Context, obj *model.Charter) (string, error)
	ContentHash(ctx context.Context, obj *model.Charter) (string, error)
	Timestamp(ctx context.Context, obj *model.Charter) (int, error)
}
type ContentRevisionResolver interface {
	ListingAddress(ctx context.Context, obj *model.ContentRevision) (string, error)
	Payload(ctx context.Context, obj *model.ContentRevision) ([]ArticlePayload, error)

	EditorAddress(ctx context.Context, obj *model.ContentRevision) (string, error)
	ContractContentID(ctx context.Context, obj *model.ContentRevision) (int, error)
	ContractRevisionID(ctx context.Context, obj *model.ContentRevision) (int, error)

	RevisionDate(ctx context.Context, obj *model.ContentRevision) (int, error)
}
type GovernanceEventResolver interface {
	ListingAddress(ctx context.Context, obj *model.GovernanceEvent) (string, error)
	SenderAddress(ctx context.Context, obj *model.GovernanceEvent) (string, error)
	Metadata(ctx context.Context, obj *model.GovernanceEvent) ([]Metadata, error)

	CreationDate(ctx context.Context, obj *model.GovernanceEvent) (int, error)
	LastUpdatedDate(ctx context.Context, obj *model.GovernanceEvent) (int, error)

	BlockData(ctx context.Context, obj *model.GovernanceEvent) (BlockData, error)
	Listing(ctx context.Context, obj *model.GovernanceEvent) (model.Listing, error)
}
type ListingResolver interface {
	ContractAddress(ctx context.Context, obj *model.Listing) (string, error)

	LastGovState(ctx context.Context, obj *model.Listing) (string, error)

	OwnerAddresses(ctx context.Context, obj *model.Listing) ([]string, error)
	Owner(ctx context.Context, obj *model.Listing) (string, error)
	ContributorAddresses(ctx context.Context, obj *model.Listing) ([]string, error)
	CreatedDate(ctx context.Context, obj *model.Listing) (int, error)
	ApplicationDate(ctx context.Context, obj *model.Listing) (*int, error)
	ApprovalDate(ctx context.Context, obj *model.Listing) (*int, error)
	LastUpdatedDate(ctx context.Context, obj *model.Listing) (int, error)
	AppExpiry(ctx context.Context, obj *model.Listing) (int, error)
	UnstakedDeposit(ctx context.Context, obj *model.Listing) (string, error)
	ChallengeID(ctx context.Context, obj *model.Listing) (int, error)
	Challenge(ctx context.Context, obj *model.Listing) (*model.Challenge, error)
	PrevChallenge(ctx context.Context, obj *model.Listing) (*model.Challenge, error)
}
type MutationResolver interface {
	KycCreateApplicant(ctx context.Context, applicant KycCreateApplicantInput) (*string, error)
	KycCreateCheck(ctx context.Context, applicantID string, facialVariant *string) (*string, error)
	KycGenerateSdkToken(ctx context.Context, applicantID string) (*string, error)
	UserSetEthAddress(ctx context.Context, input users.SetEthAddressInput) (*string, error)
	UserUpdate(ctx context.Context, uid *string, input *users.UserUpdateInput) (*users.User, error)
}
type PollResolver interface {
	CommitEndDate(ctx context.Context, obj *model.Poll) (int, error)
	RevealEndDate(ctx context.Context, obj *model.Poll) (int, error)
	VoteQuorum(ctx context.Context, obj *model.Poll) (int, error)
	VotesFor(ctx context.Context, obj *model.Poll) (int, error)
	VotesAgainst(ctx context.Context, obj *model.Poll) (int, error)
}
type QueryResolver interface {
	Articles(ctx context.Context, addr *string, first *int, after *string) ([]model.ContentRevision, error)
	Challenge(ctx context.Context, id int) (*model.Challenge, error)
	GovernanceEvents(ctx context.Context, addr *string, after *string, creationDate *DateRange, first *int) ([]model.GovernanceEvent, error)
	GovernanceEventsTxHash(ctx context.Context, txHash string) ([]model.GovernanceEvent, error)
	Listing(ctx context.Context, addr string) (*model.Listing, error)
	Listings(ctx context.Context, first *int, after *string, whitelistedOnly *bool, rejectedOnly *bool, activeChallenge *bool, currentApplication *bool) ([]model.Listing, error)
	TcrChallenge(ctx context.Context, id int) (*model.Challenge, error)
	TcrGovernanceEvents(ctx context.Context, addr *string, after *string, creationDate *DateRange, first *int) ([]model.GovernanceEvent, error)
	TcrGovernanceEventsTxHash(ctx context.Context, txHash string) ([]model.GovernanceEvent, error)
	TcrListing(ctx context.Context, addr string) (*model.Listing, error)
	TcrListings(ctx context.Context, first *int, after *string, whitelistedOnly *bool, rejectedOnly *bool, activeChallenge *bool, currentApplication *bool) ([]model.Listing, error)
	NewsroomArticles(ctx context.Context, addr *string, first *int, after *string) ([]model.ContentRevision, error)
	CurrentUser(ctx context.Context) (*users.User, error)
}
type UserResolver interface {
	Invoices(ctx context.Context, obj *users.User) ([]*invoicing.PostgresInvoice, error)
	IsTokenFoundryRegistered(ctx context.Context, obj *users.User) (*bool, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Query(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Query(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:   buf,
		Errors: ec.Errors,
	}
}

func (e *executableSchema) Mutation(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Mutation(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:   buf,
		Errors: ec.Errors,
	}
}

func (e *executableSchema) Subscription(ctx context.Context, op *ast.OperationDefinition) func() *graphql.Response {
	return graphql.OneShot(graphql.ErrorResponse(ctx, "subscriptions are not supported"))
}

type executionContext struct {
	*graphql.RequestContext
	*executableSchema
}

var appealImplementors = []string{"Appeal"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Appeal(ctx context.Context, sel ast.SelectionSet, obj *model.Appeal) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, appealImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Appeal")
		case "requester":
			out.Values[i] = ec._Appeal_requester(ctx, field, obj)
		case "appealFeePaid":
			out.Values[i] = ec._Appeal_appealFeePaid(ctx, field, obj)
		case "appealPhaseExpiry":
			out.Values[i] = ec._Appeal_appealPhaseExpiry(ctx, field, obj)
		case "appealGranted":
			out.Values[i] = ec._Appeal_appealGranted(ctx, field, obj)
		case "appealOpenToChallengeExpiry":
			out.Values[i] = ec._Appeal_appealOpenToChallengeExpiry(ctx, field, obj)
		case "statement":
			out.Values[i] = ec._Appeal_statement(ctx, field, obj)
		case "appealChallengeID":
			out.Values[i] = ec._Appeal_appealChallengeID(ctx, field, obj)
		case "appealChallenge":
			out.Values[i] = ec._Appeal_appealChallenge(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Appeal_requester(ctx context.Context, field graphql.CollectedField, obj *model.Appeal) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Appeal",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Appeal().Requester(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return graphql.MarshalString(res)
	})
}

func (ec *executionContext) _Appeal_appealFeePaid(ctx context.Context, field graphql.CollectedField, obj *model.Appeal) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Appeal",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Appeal().AppealFeePaid(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _Appeal_appealPhaseExpiry(ctx context.Context, field graphql.CollectedField, obj *model.Appeal) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Appeal",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Appeal().AppealPhaseExpiry(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _Appeal_appealGranted(ctx context.Context, field graphql.CollectedField, obj *model.Appeal) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Appeal"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.AppealGranted(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _Appeal_appealOpenToChallengeExpiry(ctx context.Context, field graphql.CollectedField, obj *model.Appeal) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Appeal",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Appeal().AppealOpenToChallengeExpiry(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _Appeal_statement(ctx context.Context, field graphql.CollectedField, obj *model.Appeal) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Appeal"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Statement(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Appeal_appealChallengeID(ctx context.Context, field graphql.CollectedField, obj *model.Appeal) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Appeal",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Appeal().AppealChallengeID(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _Appeal_appealChallenge(ctx context.Context, field graphql.CollectedField, obj *model.Appeal) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Appeal",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Appeal().AppealChallenge(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*model.Challenge)
		if res == nil {
			return graphql.Null
		}
		return ec._Challenge(ctx, field.Selections, res)
	})
}

var articlePayloadImplementors = []string{"ArticlePayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ArticlePayload(ctx context.Context, sel ast.SelectionSet, obj *ArticlePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, articlePayloadImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ArticlePayload")
		case "key":
			out.Values[i] = ec._ArticlePayload_key(ctx, field, obj)
		case "value":
			out.Values[i] = ec._ArticlePayload_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ArticlePayload_key(ctx context.Context, field graphql.CollectedField, obj *ArticlePayload) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ArticlePayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Key, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ArticlePayload_value(ctx context.Context, field graphql.CollectedField, obj *ArticlePayload) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ArticlePayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Value, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(model.ArticlePayloadValue)
	return res
}

var blockDataImplementors = []string{"BlockData"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BlockData(ctx context.Context, sel ast.SelectionSet, obj *BlockData) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, blockDataImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BlockData")
		case "blockNumber":
			out.Values[i] = ec._BlockData_blockNumber(ctx, field, obj)
		case "txHash":
			out.Values[i] = ec._BlockData_txHash(ctx, field, obj)
		case "txIndex":
			out.Values[i] = ec._BlockData_txIndex(ctx, field, obj)
		case "blockHash":
			out.Values[i] = ec._BlockData_blockHash(ctx, field, obj)
		case "index":
			out.Values[i] = ec._BlockData_index(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BlockData_blockNumber(ctx context.Context, field graphql.CollectedField, obj *BlockData) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BlockData"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.BlockNumber, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _BlockData_txHash(ctx context.Context, field graphql.CollectedField, obj *BlockData) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BlockData"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.TxHash, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _BlockData_txIndex(ctx context.Context, field graphql.CollectedField, obj *BlockData) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BlockData"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.TxIndex, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _BlockData_blockHash(ctx context.Context, field graphql.CollectedField, obj *BlockData) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BlockData"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.BlockHash, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _BlockData_index(ctx context.Context, field graphql.CollectedField, obj *BlockData) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BlockData"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Index, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

var challengeImplementors = []string{"Challenge"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Challenge(ctx context.Context, sel ast.SelectionSet, obj *model.Challenge) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, challengeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Challenge")
		case "challengeID":
			out.Values[i] = ec._Challenge_challengeID(ctx, field, obj)
		case "listingAddress":
			out.Values[i] = ec._Challenge_listingAddress(ctx, field, obj)
		case "statement":
			out.Values[i] = ec._Challenge_statement(ctx, field, obj)
		case "rewardPool":
			out.Values[i] = ec._Challenge_rewardPool(ctx, field, obj)
		case "challenger":
			out.Values[i] = ec._Challenge_challenger(ctx, field, obj)
		case "resolved":
			out.Values[i] = ec._Challenge_resolved(ctx, field, obj)
		case "stake":
			out.Values[i] = ec._Challenge_stake(ctx, field, obj)
		case "totalTokens":
			out.Values[i] = ec._Challenge_totalTokens(ctx, field, obj)
		case "poll":
			out.Values[i] = ec._Challenge_poll(ctx, field, obj)
		case "requestAppealExpiry":
			out.Values[i] = ec._Challenge_requestAppealExpiry(ctx, field, obj)
		case "appeal":
			out.Values[i] = ec._Challenge_appeal(ctx, field, obj)
		case "lastUpdatedDateTs":
			out.Values[i] = ec._Challenge_lastUpdatedDateTs(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Challenge_challengeID(ctx context.Context, field graphql.CollectedField, obj *model.Challenge) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Challenge",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Challenge().ChallengeID(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _Challenge_listingAddress(ctx context.Context, field graphql.CollectedField, obj *model.Challenge) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Challenge",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Challenge().ListingAddress(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return graphql.MarshalString(res)
	})
}

func (ec *executionContext) _Challenge_statement(ctx context.Context, field graphql.CollectedField, obj *model.Challenge) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Challenge"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Statement(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Challenge_rewardPool(ctx context.Context, field graphql.CollectedField, obj *model.Challenge) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Challenge",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Challenge().RewardPool(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return graphql.MarshalString(res)
	})
}

func (ec *executionContext) _Challenge_challenger(ctx context.Context, field graphql.CollectedField, obj *model.Challenge) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Challenge",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Challenge().Challenger(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return graphql.MarshalString(res)
	})
}

func (ec *executionContext) _Challenge_resolved(ctx context.Context, field graphql.CollectedField, obj *model.Challenge) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Challenge"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Resolved(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _Challenge_stake(ctx context.Context, field graphql.CollectedField, obj *model.Challenge) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Challenge",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Challenge().Stake(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return graphql.MarshalString(res)
	})
}

func (ec *executionContext) _Challenge_totalTokens(ctx context.Context, field graphql.CollectedField, obj *model.Challenge) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Challenge",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Challenge().TotalTokens(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return graphql.MarshalString(res)
	})
}

func (ec *executionContext) _Challenge_poll(ctx context.Context, field graphql.CollectedField, obj *model.Challenge) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Challenge",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Challenge().Poll(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*model.Poll)
		if res == nil {
			return graphql.Null
		}
		return ec._Poll(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _Challenge_requestAppealExpiry(ctx context.Context, field graphql.CollectedField, obj *model.Challenge) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Challenge",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Challenge().RequestAppealExpiry(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _Challenge_appeal(ctx context.Context, field graphql.CollectedField, obj *model.Challenge) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Challenge",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Challenge().Appeal(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*model.Appeal)
		if res == nil {
			return graphql.Null
		}
		return ec._Appeal(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _Challenge_lastUpdatedDateTs(ctx context.Context, field graphql.CollectedField, obj *model.Challenge) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Challenge",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Challenge().LastUpdatedDateTs(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

var charterImplementors = []string{"Charter"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Charter(ctx context.Context, sel ast.SelectionSet, obj *model.Charter) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, charterImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Charter")
		case "uri":
			out.Values[i] = ec._Charter_uri(ctx, field, obj)
		case "contentID":
			out.Values[i] = ec._Charter_contentID(ctx, field, obj)
		case "revisionID":
			out.Values[i] = ec._Charter_revisionID(ctx, field, obj)
		case "signature":
			out.Values[i] = ec._Charter_signature(ctx, field, obj)
		case "author":
			out.Values[i] = ec._Charter_author(ctx, field, obj)
		case "contentHash":
			out.Values[i] = ec._Charter_contentHash(ctx, field, obj)
		case "timestamp":
			out.Values[i] = ec._Charter_timestamp(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Charter_uri(ctx context.Context, field graphql.CollectedField, obj *model.Charter) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Charter"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.URI(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Charter_contentID(ctx context.Context, field graphql.CollectedField, obj *model.Charter) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Charter",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Charter().ContentID(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _Charter_revisionID(ctx context.Context, field graphql.CollectedField, obj *model.Charter) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Charter",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Charter().RevisionID(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _Charter_signature(ctx context.Context, field graphql.CollectedField, obj *model.Charter) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Charter",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Charter().Signature(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return graphql.MarshalString(res)
	})
}

func (ec *executionContext) _Charter_author(ctx context.Context, field graphql.CollectedField, obj *model.Charter) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Charter",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Charter().Author(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return graphql.MarshalString(res)
	})
}

func (ec *executionContext) _Charter_contentHash(ctx context.Context, field graphql.CollectedField, obj *model.Charter) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Charter",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Charter().ContentHash(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return graphql.MarshalString(res)
	})
}

func (ec *executionContext) _Charter_timestamp(ctx context.Context, field graphql.CollectedField, obj *model.Charter) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Charter",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Charter().Timestamp(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

var contentRevisionImplementors = []string{"ContentRevision"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ContentRevision(ctx context.Context, sel ast.SelectionSet, obj *model.ContentRevision) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, contentRevisionImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContentRevision")
		case "listingAddress":
			out.Values[i] = ec._ContentRevision_listingAddress(ctx, field, obj)
		case "payload":
			out.Values[i] = ec._ContentRevision_payload(ctx, field, obj)
		case "payloadHash":
			out.Values[i] = ec._ContentRevision_payloadHash(ctx, field, obj)
		case "editorAddress":
			out.Values[i] = ec._ContentRevision_editorAddress(ctx, field, obj)
		case "contractContentId":
			out.Values[i] = ec._ContentRevision_contractContentId(ctx, field, obj)
		case "contractRevisionId":
			out.Values[i] = ec._ContentRevision_contractRevisionId(ctx, field, obj)
		case "revisionUri":
			out.Values[i] = ec._ContentRevision_revisionUri(ctx, field, obj)
		case "revisionDate":
			out.Values[i] = ec._ContentRevision_revisionDate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ContentRevision_listingAddress(ctx context.Context, field graphql.CollectedField, obj *model.ContentRevision) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "ContentRevision",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.ContentRevision().ListingAddress(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return graphql.MarshalString(res)
	})
}

func (ec *executionContext) _ContentRevision_payload(ctx context.Context, field graphql.CollectedField, obj *model.ContentRevision) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "ContentRevision",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.ContentRevision().Payload(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]ArticlePayload)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._ArticlePayload(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _ContentRevision_payloadHash(ctx context.Context, field graphql.CollectedField, obj *model.ContentRevision) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ContentRevision"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PayloadHash(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ContentRevision_editorAddress(ctx context.Context, field graphql.CollectedField, obj *model.ContentRevision) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "ContentRevision",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.ContentRevision().EditorAddress(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return graphql.MarshalString(res)
	})
}

func (ec *executionContext) _ContentRevision_contractContentId(ctx context.Context, field graphql.CollectedField, obj *model.ContentRevision) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "ContentRevision",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.ContentRevision().ContractContentID(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _ContentRevision_contractRevisionId(ctx context.Context, field graphql.CollectedField, obj *model.ContentRevision) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "ContentRevision",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.ContentRevision().ContractRevisionID(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _ContentRevision_revisionUri(ctx context.Context, field graphql.CollectedField, obj *model.ContentRevision) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ContentRevision"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.RevisionURI(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ContentRevision_revisionDate(ctx context.Context, field graphql.CollectedField, obj *model.ContentRevision) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "ContentRevision",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.ContentRevision().RevisionDate(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

var governanceEventImplementors = []string{"GovernanceEvent"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GovernanceEvent(ctx context.Context, sel ast.SelectionSet, obj *model.GovernanceEvent) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, governanceEventImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GovernanceEvent")
		case "listingAddress":
			out.Values[i] = ec._GovernanceEvent_listingAddress(ctx, field, obj)
		case "senderAddress":
			out.Values[i] = ec._GovernanceEvent_senderAddress(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._GovernanceEvent_metadata(ctx, field, obj)
		case "governanceEventType":
			out.Values[i] = ec._GovernanceEvent_governanceEventType(ctx, field, obj)
		case "creationDate":
			out.Values[i] = ec._GovernanceEvent_creationDate(ctx, field, obj)
		case "lastUpdatedDate":
			out.Values[i] = ec._GovernanceEvent_lastUpdatedDate(ctx, field, obj)
		case "eventHash":
			out.Values[i] = ec._GovernanceEvent_eventHash(ctx, field, obj)
		case "blockData":
			out.Values[i] = ec._GovernanceEvent_blockData(ctx, field, obj)
		case "listing":
			out.Values[i] = ec._GovernanceEvent_listing(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GovernanceEvent_listingAddress(ctx context.Context, field graphql.CollectedField, obj *model.GovernanceEvent) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "GovernanceEvent",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.GovernanceEvent().ListingAddress(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return graphql.MarshalString(res)
	})
}

func (ec *executionContext) _GovernanceEvent_senderAddress(ctx context.Context, field graphql.CollectedField, obj *model.GovernanceEvent) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "GovernanceEvent",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.GovernanceEvent().SenderAddress(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return graphql.MarshalString(res)
	})
}

func (ec *executionContext) _GovernanceEvent_metadata(ctx context.Context, field graphql.CollectedField, obj *model.GovernanceEvent) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "GovernanceEvent",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.GovernanceEvent().Metadata(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]Metadata)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Metadata(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _GovernanceEvent_governanceEventType(ctx context.Context, field graphql.CollectedField, obj *model.GovernanceEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GovernanceEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.GovernanceEventType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _GovernanceEvent_creationDate(ctx context.Context, field graphql.CollectedField, obj *model.GovernanceEvent) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "GovernanceEvent",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.GovernanceEvent().CreationDate(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _GovernanceEvent_lastUpdatedDate(ctx context.Context, field graphql.CollectedField, obj *model.GovernanceEvent) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "GovernanceEvent",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.GovernanceEvent().LastUpdatedDate(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _GovernanceEvent_eventHash(ctx context.Context, field graphql.CollectedField, obj *model.GovernanceEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GovernanceEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.EventHash(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _GovernanceEvent_blockData(ctx context.Context, field graphql.CollectedField, obj *model.GovernanceEvent) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "GovernanceEvent",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.GovernanceEvent().BlockData(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(BlockData)
		return ec._BlockData(ctx, field.Selections, &res)
	})
}

func (ec *executionContext) _GovernanceEvent_listing(ctx context.Context, field graphql.CollectedField, obj *model.GovernanceEvent) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "GovernanceEvent",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.GovernanceEvent().Listing(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(model.Listing)
		return ec._Listing(ctx, field.Selections, &res)
	})
}

var invoiceImplementors = []string{"Invoice"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Invoice(ctx context.Context, sel ast.SelectionSet, obj *invoicing.PostgresInvoice) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, invoiceImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Invoice")
		case "hash":
			out.Values[i] = ec._Invoice_hash(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Invoice_email(ctx, field, obj)
		case "phone":
			out.Values[i] = ec._Invoice_phone(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Invoice_name(ctx, field, obj)
		case "amount":
			out.Values[i] = ec._Invoice_amount(ctx, field, obj)
		case "invoiceID":
			out.Values[i] = ec._Invoice_invoiceID(ctx, field, obj)
		case "invoiceNum":
			out.Values[i] = ec._Invoice_invoiceNum(ctx, field, obj)
		case "invoiceStatus":
			out.Values[i] = ec._Invoice_invoiceStatus(ctx, field, obj)
		case "checkID":
			out.Values[i] = ec._Invoice_checkID(ctx, field, obj)
		case "checkStatus":
			out.Values[i] = ec._Invoice_checkStatus(ctx, field, obj)
		case "stopPoll":
			out.Values[i] = ec._Invoice_stopPoll(ctx, field, obj)
		case "isCheckbook":
			out.Values[i] = ec._Invoice_isCheckbook(ctx, field, obj)
		case "isThirdParty":
			out.Values[i] = ec._Invoice_isThirdParty(ctx, field, obj)
		case "referralCode":
			out.Values[i] = ec._Invoice_referralCode(ctx, field, obj)
		case "referredBy":
			out.Values[i] = ec._Invoice_referredBy(ctx, field, obj)
		case "emailState":
			out.Values[i] = ec._Invoice_emailState(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Invoice_hash(ctx context.Context, field graphql.CollectedField, obj *invoicing.PostgresInvoice) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Invoice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Hash, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Invoice_email(ctx context.Context, field graphql.CollectedField, obj *invoicing.PostgresInvoice) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Invoice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Email, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Invoice_phone(ctx context.Context, field graphql.CollectedField, obj *invoicing.PostgresInvoice) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Invoice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Phone, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Invoice_name(ctx context.Context, field graphql.CollectedField, obj *invoicing.PostgresInvoice) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Invoice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Invoice_amount(ctx context.Context, field graphql.CollectedField, obj *invoicing.PostgresInvoice) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Invoice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Amount, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Invoice_invoiceID(ctx context.Context, field graphql.CollectedField, obj *invoicing.PostgresInvoice) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Invoice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.InvoiceID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Invoice_invoiceNum(ctx context.Context, field graphql.CollectedField, obj *invoicing.PostgresInvoice) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Invoice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.InvoiceNum, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Invoice_invoiceStatus(ctx context.Context, field graphql.CollectedField, obj *invoicing.PostgresInvoice) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Invoice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.InvoiceStatus, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Invoice_checkID(ctx context.Context, field graphql.CollectedField, obj *invoicing.PostgresInvoice) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Invoice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CheckID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Invoice_checkStatus(ctx context.Context, field graphql.CollectedField, obj *invoicing.PostgresInvoice) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Invoice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CheckStatus, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Invoice_stopPoll(ctx context.Context, field graphql.CollectedField, obj *invoicing.PostgresInvoice) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Invoice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.StopPoll, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _Invoice_isCheckbook(ctx context.Context, field graphql.CollectedField, obj *invoicing.PostgresInvoice) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Invoice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.IsCheckbook, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _Invoice_isThirdParty(ctx context.Context, field graphql.CollectedField, obj *invoicing.PostgresInvoice) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Invoice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.IsThirdParty, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _Invoice_referralCode(ctx context.Context, field graphql.CollectedField, obj *invoicing.PostgresInvoice) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Invoice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ReferralCode, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Invoice_referredBy(ctx context.Context, field graphql.CollectedField, obj *invoicing.PostgresInvoice) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Invoice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ReferredBy, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Invoice_emailState(ctx context.Context, field graphql.CollectedField, obj *invoicing.PostgresInvoice) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Invoice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.EmailState, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

var listingImplementors = []string{"Listing"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Listing(ctx context.Context, sel ast.SelectionSet, obj *model.Listing) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, listingImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Listing")
		case "name":
			out.Values[i] = ec._Listing_name(ctx, field, obj)
		case "contractAddress":
			out.Values[i] = ec._Listing_contractAddress(ctx, field, obj)
		case "whitelisted":
			out.Values[i] = ec._Listing_whitelisted(ctx, field, obj)
		case "lastGovState":
			out.Values[i] = ec._Listing_lastGovState(ctx, field, obj)
		case "url":
			out.Values[i] = ec._Listing_url(ctx, field, obj)
		case "charter":
			out.Values[i] = ec._Listing_charter(ctx, field, obj)
		case "ownerAddresses":
			out.Values[i] = ec._Listing_ownerAddresses(ctx, field, obj)
		case "owner":
			out.Values[i] = ec._Listing_owner(ctx, field, obj)
		case "contributorAddresses":
			out.Values[i] = ec._Listing_contributorAddresses(ctx, field, obj)
		case "createdDate":
			out.Values[i] = ec._Listing_createdDate(ctx, field, obj)
		case "applicationDate":
			out.Values[i] = ec._Listing_applicationDate(ctx, field, obj)
		case "approvalDate":
			out.Values[i] = ec._Listing_approvalDate(ctx, field, obj)
		case "lastUpdatedDate":
			out.Values[i] = ec._Listing_lastUpdatedDate(ctx, field, obj)
		case "appExpiry":
			out.Values[i] = ec._Listing_appExpiry(ctx, field, obj)
		case "unstakedDeposit":
			out.Values[i] = ec._Listing_unstakedDeposit(ctx, field, obj)
		case "challengeID":
			out.Values[i] = ec._Listing_challengeID(ctx, field, obj)
		case "challenge":
			out.Values[i] = ec._Listing_challenge(ctx, field, obj)
		case "prevChallenge":
			out.Values[i] = ec._Listing_prevChallenge(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Listing_name(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Listing"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Listing_contractAddress(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Listing().ContractAddress(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return graphql.MarshalString(res)
	})
}

func (ec *executionContext) _Listing_whitelisted(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Listing"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Whitelisted(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _Listing_lastGovState(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Listing().LastGovState(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return graphql.MarshalString(res)
	})
}

func (ec *executionContext) _Listing_url(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Listing"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.URL(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Listing_charter(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Listing"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Charter(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Charter)
	if res == nil {
		return graphql.Null
	}
	return ec._Charter(ctx, field.Selections, res)
}

func (ec *executionContext) _Listing_ownerAddresses(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Listing().OwnerAddresses(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]string)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return graphql.MarshalString(res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Listing_owner(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Listing().Owner(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return graphql.MarshalString(res)
	})
}

func (ec *executionContext) _Listing_contributorAddresses(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Listing().ContributorAddresses(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]string)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return graphql.MarshalString(res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Listing_createdDate(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Listing().CreatedDate(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _Listing_applicationDate(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Listing().ApplicationDate(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*int)
		if res == nil {
			return graphql.Null
		}
		return graphql.MarshalInt(*res)
	})
}

func (ec *executionContext) _Listing_approvalDate(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Listing().ApprovalDate(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*int)
		if res == nil {
			return graphql.Null
		}
		return graphql.MarshalInt(*res)
	})
}

func (ec *executionContext) _Listing_lastUpdatedDate(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Listing().LastUpdatedDate(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _Listing_appExpiry(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Listing().AppExpiry(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _Listing_unstakedDeposit(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Listing().UnstakedDeposit(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return graphql.MarshalString(res)
	})
}

func (ec *executionContext) _Listing_challengeID(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Listing().ChallengeID(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _Listing_challenge(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Listing().Challenge(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*model.Challenge)
		if res == nil {
			return graphql.Null
		}
		return ec._Challenge(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _Listing_prevChallenge(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Listing().PrevChallenge(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*model.Challenge)
		if res == nil {
			return graphql.Null
		}
		return ec._Challenge(ctx, field.Selections, res)
	})
}

var metadataImplementors = []string{"Metadata"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Metadata(ctx context.Context, sel ast.SelectionSet, obj *Metadata) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, metadataImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Metadata")
		case "key":
			out.Values[i] = ec._Metadata_key(ctx, field, obj)
		case "value":
			out.Values[i] = ec._Metadata_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Metadata_key(ctx context.Context, field graphql.CollectedField, obj *Metadata) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Metadata"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Key, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Metadata_value(ctx context.Context, field graphql.CollectedField, obj *Metadata) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Metadata"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Value, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var mutationImplementors = []string{"Mutation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, mutationImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Mutation",
	})

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "kycCreateApplicant":
			out.Values[i] = ec._Mutation_kycCreateApplicant(ctx, field)
		case "kycCreateCheck":
			out.Values[i] = ec._Mutation_kycCreateCheck(ctx, field)
		case "kycGenerateSdkToken":
			out.Values[i] = ec._Mutation_kycGenerateSdkToken(ctx, field)
		case "userSetEthAddress":
			out.Values[i] = ec._Mutation_userSetEthAddress(ctx, field)
		case "userUpdate":
			out.Values[i] = ec._Mutation_userUpdate(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Mutation_kycCreateApplicant(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 KycCreateApplicantInput
	if tmp, ok := rawArgs["applicant"]; ok {
		var err error
		arg0, err = UnmarshalKycCreateApplicantInput(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["applicant"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().KycCreateApplicant(ctx, args["applicant"].(KycCreateApplicantInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _Mutation_kycCreateCheck(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["applicantID"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["applicantID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["facialVariant"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["facialVariant"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().KycCreateCheck(ctx, args["applicantID"].(string), args["facialVariant"].(*string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _Mutation_kycGenerateSdkToken(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["applicantID"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["applicantID"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().KycGenerateSdkToken(ctx, args["applicantID"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _Mutation_userSetEthAddress(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 users.SetEthAddressInput
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		arg0, err = UnmarshalUserSetEthAddressInput(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["input"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().UserSetEthAddress(ctx, args["input"].(users.SetEthAddressInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _Mutation_userUpdate(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["uid"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["uid"] = arg0
	var arg1 *users.UserUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		var ptr1 users.UserUpdateInput
		if tmp != nil {
			ptr1, err = UnmarshalUserUpdateInput(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["input"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().UserUpdate(ctx, args["uid"].(*string), args["input"].(*users.UserUpdateInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*users.User)
	if res == nil {
		return graphql.Null
	}
	return ec._User(ctx, field.Selections, res)
}

var pollImplementors = []string{"Poll"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Poll(ctx context.Context, sel ast.SelectionSet, obj *model.Poll) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, pollImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Poll")
		case "commitEndDate":
			out.Values[i] = ec._Poll_commitEndDate(ctx, field, obj)
		case "revealEndDate":
			out.Values[i] = ec._Poll_revealEndDate(ctx, field, obj)
		case "voteQuorum":
			out.Values[i] = ec._Poll_voteQuorum(ctx, field, obj)
		case "votesFor":
			out.Values[i] = ec._Poll_votesFor(ctx, field, obj)
		case "votesAgainst":
			out.Values[i] = ec._Poll_votesAgainst(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Poll_commitEndDate(ctx context.Context, field graphql.CollectedField, obj *model.Poll) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Poll",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Poll().CommitEndDate(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _Poll_revealEndDate(ctx context.Context, field graphql.CollectedField, obj *model.Poll) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Poll",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Poll().RevealEndDate(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _Poll_voteQuorum(ctx context.Context, field graphql.CollectedField, obj *model.Poll) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Poll",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Poll().VoteQuorum(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _Poll_votesFor(ctx context.Context, field graphql.CollectedField, obj *model.Poll) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Poll",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Poll().VotesFor(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _Poll_votesAgainst(ctx context.Context, field graphql.CollectedField, obj *model.Poll) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Poll",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Poll().VotesAgainst(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

var queryImplementors = []string{"Query"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, queryImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
	})

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "articles":
			out.Values[i] = ec._Query_articles(ctx, field)
		case "challenge":
			out.Values[i] = ec._Query_challenge(ctx, field)
		case "governanceEvents":
			out.Values[i] = ec._Query_governanceEvents(ctx, field)
		case "governanceEventsTxHash":
			out.Values[i] = ec._Query_governanceEventsTxHash(ctx, field)
		case "listing":
			out.Values[i] = ec._Query_listing(ctx, field)
		case "listings":
			out.Values[i] = ec._Query_listings(ctx, field)
		case "tcrChallenge":
			out.Values[i] = ec._Query_tcrChallenge(ctx, field)
		case "tcrGovernanceEvents":
			out.Values[i] = ec._Query_tcrGovernanceEvents(ctx, field)
		case "tcrGovernanceEventsTxHash":
			out.Values[i] = ec._Query_tcrGovernanceEventsTxHash(ctx, field)
		case "tcrListing":
			out.Values[i] = ec._Query_tcrListing(ctx, field)
		case "tcrListings":
			out.Values[i] = ec._Query_tcrListings(ctx, field)
		case "newsroomArticles":
			out.Values[i] = ec._Query_newsroomArticles(ctx, field)
		case "currentUser":
			out.Values[i] = ec._Query_currentUser(ctx, field)
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Query_articles(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["addr"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["addr"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["first"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["after"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["after"] = arg2
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().Articles(ctx, args["addr"].(*string), args["first"].(*int), args["after"].(*string))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]model.ContentRevision)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._ContentRevision(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_challenge(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().Challenge(ctx, args["id"].(int))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*model.Challenge)
		if res == nil {
			return graphql.Null
		}
		return ec._Challenge(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _Query_governanceEvents(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["addr"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["addr"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["after"] = arg1
	var arg2 *DateRange
	if tmp, ok := rawArgs["creationDate"]; ok {
		var err error
		var ptr1 DateRange
		if tmp != nil {
			ptr1, err = UnmarshalDateRange(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["creationDate"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["first"] = arg3
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().GovernanceEvents(ctx, args["addr"].(*string), args["after"].(*string), args["creationDate"].(*DateRange), args["first"].(*int))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]model.GovernanceEvent)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._GovernanceEvent(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_governanceEventsTxHash(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["txHash"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["txHash"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().GovernanceEventsTxHash(ctx, args["txHash"].(string))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]model.GovernanceEvent)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._GovernanceEvent(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_listing(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["addr"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["addr"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().Listing(ctx, args["addr"].(string))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*model.Listing)
		if res == nil {
			return graphql.Null
		}
		return ec._Listing(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _Query_listings(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["after"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["whitelistedOnly"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["whitelistedOnly"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["rejectedOnly"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["rejectedOnly"] = arg3
	var arg4 *bool
	if tmp, ok := rawArgs["activeChallenge"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg4 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["activeChallenge"] = arg4
	var arg5 *bool
	if tmp, ok := rawArgs["currentApplication"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["currentApplication"] = arg5
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().Listings(ctx, args["first"].(*int), args["after"].(*string), args["whitelistedOnly"].(*bool), args["rejectedOnly"].(*bool), args["activeChallenge"].(*bool), args["currentApplication"].(*bool))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]model.Listing)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Listing(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_tcrChallenge(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().TcrChallenge(ctx, args["id"].(int))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*model.Challenge)
		if res == nil {
			return graphql.Null
		}
		return ec._Challenge(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _Query_tcrGovernanceEvents(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["addr"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["addr"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["after"] = arg1
	var arg2 *DateRange
	if tmp, ok := rawArgs["creationDate"]; ok {
		var err error
		var ptr1 DateRange
		if tmp != nil {
			ptr1, err = UnmarshalDateRange(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["creationDate"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["first"] = arg3
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().TcrGovernanceEvents(ctx, args["addr"].(*string), args["after"].(*string), args["creationDate"].(*DateRange), args["first"].(*int))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]model.GovernanceEvent)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._GovernanceEvent(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_tcrGovernanceEventsTxHash(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["txHash"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["txHash"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().TcrGovernanceEventsTxHash(ctx, args["txHash"].(string))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]model.GovernanceEvent)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._GovernanceEvent(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_tcrListing(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["addr"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["addr"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().TcrListing(ctx, args["addr"].(string))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*model.Listing)
		if res == nil {
			return graphql.Null
		}
		return ec._Listing(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _Query_tcrListings(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["after"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["whitelistedOnly"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["whitelistedOnly"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["rejectedOnly"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["rejectedOnly"] = arg3
	var arg4 *bool
	if tmp, ok := rawArgs["activeChallenge"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg4 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["activeChallenge"] = arg4
	var arg5 *bool
	if tmp, ok := rawArgs["currentApplication"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["currentApplication"] = arg5
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().TcrListings(ctx, args["first"].(*int), args["after"].(*string), args["whitelistedOnly"].(*bool), args["rejectedOnly"].(*bool), args["activeChallenge"].(*bool), args["currentApplication"].(*bool))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]model.Listing)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Listing(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_newsroomArticles(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["addr"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["addr"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["first"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["after"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["after"] = arg2
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().NewsroomArticles(ctx, args["addr"].(*string), args["first"].(*int), args["after"].(*string))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]model.ContentRevision)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._ContentRevision(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_currentUser(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().CurrentUser(ctx)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*users.User)
		if res == nil {
			return graphql.Null
		}
		return ec._User(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Query"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.introspectType(args["name"].(string)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Query"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.introspectSchema(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	if res == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, field.Selections, res)
}

var userImplementors = []string{"User"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *users.User) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, userImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "uid":
			out.Values[i] = ec._User_uid(ctx, field, obj)
		case "email":
			out.Values[i] = ec._User_email(ctx, field, obj)
		case "ethAddress":
			out.Values[i] = ec._User_ethAddress(ctx, field, obj)
		case "onfidoApplicantId":
			out.Values[i] = ec._User_onfidoApplicantId(ctx, field, obj)
		case "onfidoCheckID":
			out.Values[i] = ec._User_onfidoCheckID(ctx, field, obj)
		case "kycStatus":
			out.Values[i] = ec._User_kycStatus(ctx, field, obj)
		case "quizPayload":
			out.Values[i] = ec._User_quizPayload(ctx, field, obj)
		case "quizStatus":
			out.Values[i] = ec._User_quizStatus(ctx, field, obj)
		case "invoices":
			out.Values[i] = ec._User_invoices(ctx, field, obj)
		case "isTokenFoundryRegistered":
			out.Values[i] = ec._User_isTokenFoundryRegistered(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _User_uid(ctx context.Context, field graphql.CollectedField, obj *users.User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *users.User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Email, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _User_ethAddress(ctx context.Context, field graphql.CollectedField, obj *users.User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.EthAddress, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _User_onfidoApplicantId(ctx context.Context, field graphql.CollectedField, obj *users.User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.OnfidoApplicantID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _User_onfidoCheckID(ctx context.Context, field graphql.CollectedField, obj *users.User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.OnfidoCheckID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _User_kycStatus(ctx context.Context, field graphql.CollectedField, obj *users.User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.KycStatus, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _User_quizPayload(ctx context.Context, field graphql.CollectedField, obj *users.User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.QuizPayload, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(postgres.JsonbPayload)
	return utils.MarshalJsonbPayloadScalar(res)
}

func (ec *executionContext) _User_quizStatus(ctx context.Context, field graphql.CollectedField, obj *users.User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.QuizStatus, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _User_invoices(ctx context.Context, field graphql.CollectedField, obj *users.User) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.User().Invoices(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*invoicing.PostgresInvoice)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				if res[idx1] == nil {
					return graphql.Null
				}
				return ec._Invoice(ctx, field.Selections, res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _User_isTokenFoundryRegistered(ctx context.Context, field graphql.CollectedField, obj *users.User) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.User().IsTokenFoundryRegistered(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*bool)
		if res == nil {
			return graphql.Null
		}
		return graphql.MarshalBoolean(*res)
	})
}

var __DirectiveImplementors = []string{"__Directive"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __DirectiveImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Locations, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Args, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___InputValue(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

var __EnumValueImplementors = []string{"__EnumValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __EnumValueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.IsDeprecated, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeprecationReason, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var __FieldImplementors = []string{"__Field"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __FieldImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Args, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___InputValue(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.IsDeprecated, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeprecationReason, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var __InputValueImplementors = []string{"__InputValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __InputValueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DefaultValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __SchemaImplementors = []string{"__Schema"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __SchemaImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Types(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Type(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.QueryType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.MutationType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SubscriptionType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Directives(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Directive(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

var __TypeImplementors = []string{"__Type"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __TypeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Kind(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Description(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["includeDeprecated"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Field(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Interfaces(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Type(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PossibleTypes(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Type(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["includeDeprecated"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___EnumValue(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.InputFields(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___InputValue(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.OfType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func UnmarshalDateRange(v interface{}) (DateRange, error) {
	var it DateRange
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "gt":
			var err error
			var ptr1 int
			if v != nil {
				ptr1, err = graphql.UnmarshalInt(v)
				it.Gt = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "lt":
			var err error
			var ptr1 int
			if v != nil {
				ptr1, err = graphql.UnmarshalInt(v)
				it.Lt = &ptr1
			}

			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalKycCreateApplicantInput(v interface{}) (KycCreateApplicantInput, error) {
	var it KycCreateApplicantInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "firstName":
			var err error
			it.FirstName, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error
			it.LastName, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.Email = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "middleName":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.MiddleName = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "profession":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.Profession = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "nationality":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.Nationality = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "countryOfResidence":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.CountryOfResidence = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "dateOfBirth":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.DateOfBirth = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "buildingNumber":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.BuildingNumber = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "street":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.Street = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "aptNumber":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.AptNumber = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "city":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.City = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "state":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.State = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "zipcode":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.Zipcode = &ptr1
			}

			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalUserSetEthAddressInput(v interface{}) (users.SetEthAddressInput, error) {
	var it users.SetEthAddressInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "message":
			var err error
			it.Message, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "messageHash":
			var err error
			it.MessageHash, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "signature":
			var err error
			it.Signature, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "signer":
			var err error
			it.Signer, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "r":
			var err error
			it.R, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "s":
			var err error
			it.S, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "v":
			var err error
			it.V, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalUserUpdateInput(v interface{}) (users.UserUpdateInput, error) {
	var it users.UserUpdateInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "onfidoApplicantID":
			var err error
			it.OnfidoApplicantID, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "kycStatus":
			var err error
			it.KycStatus, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "quizPayload":
			var err error
			it.QuizPayload, err = utils.UnmarshalJsonbPayloadScalar(v)
			if err != nil {
				return it, err
			}
		case "quizStatus":
			var err error
			it.QuizStatus, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) FieldMiddleware(ctx context.Context, next graphql.Resolver) interface{} {
	res, err := ec.ResolverMiddleware(ctx, next)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return res
}

func (ec *executionContext) introspectSchema() *introspection.Schema {
	return introspection.WrapSchema(parsedSchema)
}

func (ec *executionContext) introspectType(name string) *introspection.Type {
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name])
}

var parsedSchema = gqlparser.MustLoadSchema(
	&ast.Source{Name: "schema.graphql", Input: `schema {
  query: Query
}

# NOTE(PN): All date fields are ints in seconds from epoch

# The query type, represents all of the entry points into our object graph
type Query {

  # TCR / Crawler Queries (Legacy naming)
  # TODO(PN): Temporary keep these until migrated over to new naming
  # Just calls the properly named versions
  articles(addr: String, first: Int, after: String): [ContentRevision!]!
  challenge(id: Int!): Challenge
  governanceEvents(
    addr: String
    after: String
    creationDate: DateRange
    first: Int
  ): [GovernanceEvent!]!
  governanceEventsTxHash(txHash: String!): [GovernanceEvent!]!
  listing(addr: String!): Listing
  listings(
    first: Int,
    after: String,
    whitelistedOnly: Boolean,
    rejectedOnly: Boolean,
    activeChallenge: Boolean,
    currentApplication: Boolean,
  ): [Listing!]!

  # TCR Queries
  tcrChallenge(id: Int!): Challenge
  tcrGovernanceEvents(
    addr: String
    after: String
    creationDate: DateRange
    first: Int
  ): [GovernanceEvent!]!
  tcrGovernanceEventsTxHash(txHash: String!): [GovernanceEvent!]!
  tcrListing(addr: String!): Listing
  tcrListings(
    first: Int,
    after: String,
    whitelistedOnly: Boolean,
    rejectedOnly: Boolean,
    activeChallenge: Boolean,
    currentApplication: Boolean,
  ): [Listing!]!

  # Newsroom Queries
  newsroomArticles(addr: String, first: Int, after: String): [ContentRevision!]!

  # User Queries
  currentUser: User

}

type Mutation {
  # KYC Mutations
  kycCreateApplicant(applicant: KycCreateApplicantInput!): String
  kycCreateCheck(applicantID: String!, facialVariant: String): String
  kycGenerateSdkToken(applicantID: String!): String

  # User Mutations
  userSetEthAddress(input: UserSetEthAddressInput!): String
  userUpdate(uid: String, input: UserUpdateInput): User
}


## TCR object schemas

# A type that reflects values in model.Listing
type Listing {
  name: String!
  contractAddress: String!
  whitelisted: Boolean!
  lastGovState: String!
  url: String!
  charter: Charter!
  ownerAddresses: [String!]!
  owner: String!
  contributorAddresses: [String!]!
  createdDate: Int!
  applicationDate: Int
  approvalDate: Int
  lastUpdatedDate: Int!
  appExpiry: Int!
  unstakedDeposit: String!
  challengeID: Int!
  challenge: Challenge
  prevChallenge: Challenge
}

type Charter {
  uri: String!
  contentID: Int!
  revisionID: Int!
  signature: String!
  author: String!
  contentHash: String!
  timestamp: Int!
}

# A type that reflects values in model.Challenge
type Challenge {
  challengeID: Int!
  listingAddress: String!
  statement: String!
  rewardPool: String!
  challenger: String!
  resolved: Boolean!
  stake: String!
  totalTokens: String!
  poll: Poll
  requestAppealExpiry: Int!
  appeal: Appeal
  lastUpdatedDateTs: Int!
}

# A type that reflects values in model.Appeal
type Appeal {
  requester: String!
  appealFeePaid: Int!
  appealPhaseExpiry: Int!
  appealGranted: Boolean!
  appealOpenToChallengeExpiry: Int!
  statement: String!
  appealChallengeID: Int!
  appealChallenge: Challenge
}

# A type that reflects values in model.Poll
type Poll {
  commitEndDate: Int!
  revealEndDate: Int!
  voteQuorum: Int!
  votesFor: Int!
  votesAgainst: Int!
}

# A type that reflects values in model.Metadata
type Metadata {
  key: String!
  value: String!
}

# A type that reflects block data in model.BlockData
type BlockData {
  blockNumber: Int!
  txHash: String!
  txIndex: Int!
  blockHash: String!
  index: Int!
}

# A type that reflects values in model.GovernanceEvent
type GovernanceEvent {
  listingAddress: String!
  senderAddress: String!
  metadata: [Metadata!]!
  governanceEventType: String!
  creationDate: Int!
  lastUpdatedDate: Int!
  eventHash: String!
  blockData: BlockData!
  listing: Listing!
}


## Newsroom object schemas

# A type that reflects values in model.ArticlePayload
type ArticlePayload {
  key: String!
  value: ArticlePayloadValue!
}

# A type that reflects values in model.ContentRevision
type ContentRevision {
  listingAddress: String!
  payload: [ArticlePayload!]!
  payloadHash: String!
  editorAddress: String!
  contractContentId: Int!
  contractRevisionId: Int!
  revisionUri: String!
  revisionDate: Int!
}


## KYC object schemas

# A type that reflects values in onfido.CreateApplicantRequest
input KycCreateApplicantInput {
  firstName: String!
  lastName: String!
  email: String
  middleName: String
  profession: String
  nationality: String
  countryOfResidence: String
  dateOfBirth: String
  buildingNumber: String
  street: String
  aptNumber: String
  city: String
  state: String
  zipcode: String
}


## User object schemas

# A type that reflects values in invoicing.PostgresInvoice
type Invoice {
  hash: String
  email: String
  phone: String
  name: String
  amount: Float
  invoiceID: String
  invoiceNum: String
  invoiceStatus: String
  checkID: String
  checkStatus: String
  stopPoll: Boolean
  isCheckbook: Boolean
  isThirdParty: Boolean
  referralCode: String
  referredBy: String
  emailState: Int
}

# A type that reflects values in users.User
type User {
  uid: String
  email: String
  ethAddress: String
  onfidoApplicantId: String
  onfidoCheckID: String
  kycStatus: String
  quizPayload: RawObject
  quizStatus: String
  # dateCreated: Int
  # dateUpdated: Int
  invoices: [Invoice]
  isTokenFoundryRegistered: Boolean
}

input UserSetEthAddressInput {
  message: String!
  messageHash: String!
  signature: String!
  signer: String!
  r: String!
  s: String!
  v: String!
}

input UserUpdateInput {
  onfidoApplicantID: String
  kycStatus: String
  quizPayload: RawObject
  quizStatus: String
}

## Common object schemas

input DateRange {
  gt: Int
  lt: Int
}


## Scalars

scalar ArticlePayloadValue
scalar RawObject
`},
)
