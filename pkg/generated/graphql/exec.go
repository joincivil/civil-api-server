// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/joincivil/civil-api-server/pkg/auth"
	"github.com/joincivil/civil-api-server/pkg/jsonstore"
	"github.com/joincivil/civil-api-server/pkg/nrsignup"
	"github.com/joincivil/civil-api-server/pkg/users"
	"github.com/joincivil/civil-api-server/pkg/utils"
	"github.com/joincivil/civil-events-processor/pkg/model"
	"github.com/joincivil/go-common/pkg/persistence/postgres"
	"github.com/vektah/gqlparser"
	"github.com/vektah/gqlparser/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Appeal() AppealResolver
	Challenge() ChallengeResolver
	Charter() CharterResolver
	ContentRevision() ContentRevisionResolver
	GovernanceEvent() GovernanceEventResolver
	Listing() ListingResolver
	Mutation() MutationResolver
	Poll() PollResolver
	Query() QueryResolver
	User() UserResolver
	UserChallengeVoteData() UserChallengeVoteDataResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Appeal struct {
		Requester                   func(childComplexity int) int
		AppealFeePaid               func(childComplexity int) int
		AppealPhaseExpiry           func(childComplexity int) int
		AppealGranted               func(childComplexity int) int
		AppealOpenToChallengeExpiry func(childComplexity int) int
		Statement                   func(childComplexity int) int
		AppealChallengeId           func(childComplexity int) int
		AppealChallenge             func(childComplexity int) int
		AppealGrantedStatementUri   func(childComplexity int) int
	}

	ArticlePayload struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	AuthLoginResponse struct {
		Token        func(childComplexity int) int
		RefreshToken func(childComplexity int) int
		Uid          func(childComplexity int) int
	}

	BlockData struct {
		BlockNumber func(childComplexity int) int
		TxHash      func(childComplexity int) int
		TxIndex     func(childComplexity int) int
		BlockHash   func(childComplexity int) int
		Index       func(childComplexity int) int
	}

	Challenge struct {
		ChallengeId         func(childComplexity int) int
		ListingAddress      func(childComplexity int) int
		Statement           func(childComplexity int) int
		RewardPool          func(childComplexity int) int
		Challenger          func(childComplexity int) int
		Resolved            func(childComplexity int) int
		Stake               func(childComplexity int) int
		TotalTokens         func(childComplexity int) int
		Poll                func(childComplexity int) int
		RequestAppealExpiry func(childComplexity int) int
		Appeal              func(childComplexity int) int
		LastUpdatedDateTs   func(childComplexity int) int
	}

	Charter struct {
		Uri         func(childComplexity int) int
		ContentId   func(childComplexity int) int
		RevisionId  func(childComplexity int) int
		Signature   func(childComplexity int) int
		Author      func(childComplexity int) int
		ContentHash func(childComplexity int) int
		Timestamp   func(childComplexity int) int
	}

	CharterContent struct {
		Name        func(childComplexity int) int
		LogoUrl     func(childComplexity int) int
		NewsroomUrl func(childComplexity int) int
		Tagline     func(childComplexity int) int
		Roster      func(childComplexity int) int
		Signatures  func(childComplexity int) int
		Mission     func(childComplexity int) int
		SocialUrls  func(childComplexity int) int
	}

	CharterMission struct {
		Purpose       func(childComplexity int) int
		Structure     func(childComplexity int) int
		Revenue       func(childComplexity int) int
		Encumbrances  func(childComplexity int) int
		Miscellaneous func(childComplexity int) int
	}

	CharterSocialUrls struct {
		Twitter   func(childComplexity int) int
		Facebook  func(childComplexity int) int
		Instagram func(childComplexity int) int
		LinkedIn  func(childComplexity int) int
		YouTube   func(childComplexity int) int
		Email     func(childComplexity int) int
	}

	ConstitutionSignature struct {
		Signer    func(childComplexity int) int
		Signature func(childComplexity int) int
		Message   func(childComplexity int) int
	}

	ContentRevision struct {
		ListingAddress     func(childComplexity int) int
		Payload            func(childComplexity int) int
		PayloadHash        func(childComplexity int) int
		EditorAddress      func(childComplexity int) int
		ContractContentId  func(childComplexity int) int
		ContractRevisionId func(childComplexity int) int
		RevisionUri        func(childComplexity int) int
		RevisionDate       func(childComplexity int) int
	}

	GovernanceEvent struct {
		ListingAddress      func(childComplexity int) int
		Metadata            func(childComplexity int) int
		GovernanceEventType func(childComplexity int) int
		CreationDate        func(childComplexity int) int
		LastUpdatedDate     func(childComplexity int) int
		EventHash           func(childComplexity int) int
		BlockData           func(childComplexity int) int
		Listing             func(childComplexity int) int
	}

	GovernanceEventEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	GovernanceEventResultCursor struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	JsonField struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	Jsonb struct {
		Id              func(childComplexity int) int
		Hash            func(childComplexity int) int
		CreatedDate     func(childComplexity int) int
		LastUpdatedDate func(childComplexity int) int
		RawJson         func(childComplexity int) int
		Json            func(childComplexity int) int
	}

	Listing struct {
		Name                 func(childComplexity int) int
		ContractAddress      func(childComplexity int) int
		Whitelisted          func(childComplexity int) int
		LastGovState         func(childComplexity int) int
		Url                  func(childComplexity int) int
		Charter              func(childComplexity int) int
		OwnerAddresses       func(childComplexity int) int
		Owner                func(childComplexity int) int
		ContributorAddresses func(childComplexity int) int
		CreatedDate          func(childComplexity int) int
		ApplicationDate      func(childComplexity int) int
		ApprovalDate         func(childComplexity int) int
		LastUpdatedDate      func(childComplexity int) int
		AppExpiry            func(childComplexity int) int
		UnstakedDeposit      func(childComplexity int) int
		ChallengeId          func(childComplexity int) int
		Challenge            func(childComplexity int) int
		PrevChallenge        func(childComplexity int) int
	}

	ListingEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ListingResultCursor struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	Metadata struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	Mutation struct {
		AuthSignupEth                     func(childComplexity int, input users.SignatureInput) int
		AuthSignupEmailSend               func(childComplexity int, emailAddress string, addToMailing *bool) int
		AuthSignupEmailSendForApplication func(childComplexity int, emailAddress string, application auth.ApplicationEnum, addToMailing *bool) int
		AuthSignupEmailConfirm            func(childComplexity int, signupJWT string) int
		AuthLoginEth                      func(childComplexity int, input users.SignatureInput) int
		AuthLoginEmailSend                func(childComplexity int, emailAddress string, addToMailing *bool) int
		AuthLoginEmailSendForApplication  func(childComplexity int, emailAddress string, application auth.ApplicationEnum, addToMailing *bool) int
		AuthLoginEmailConfirm             func(childComplexity int, loginJWT string) int
		AuthRefresh                       func(childComplexity int, token string) int
		JsonbSave                         func(childComplexity int, input JsonbInput) int
		NrsignupSendWelcomeEmail          func(childComplexity int) int
		NrsignupSaveCharter               func(childComplexity int, charterData nrsignup.Charter) int
		NrsignupRequestGrant              func(childComplexity int, requested bool) int
		NrsignupApproveGrant              func(childComplexity int, approved bool, newsroomOwnerUID string) int
		NrsignupSaveTxHash                func(childComplexity int, txHash string) int
		NrsignupSaveAddress               func(childComplexity int, address string) int
		NrsignupSaveNewsroomApplyTxHash   func(childComplexity int, txHash string) int
		NrsignupPollNewsroomDeploy        func(childComplexity int, txHash string) int
		NrsignupPollTcrApplication        func(childComplexity int, txHash string) int
		NrsignupUpdateSteps               func(childComplexity int, input NrsignupStepsInput) int
		StorefrontAirswapTxHash           func(childComplexity int, txHash string) int
		StorefrontAirswapCancelled        func(childComplexity int) int
		UserSetEthAddress                 func(childComplexity int, input users.SignatureInput) int
		UserUpdate                        func(childComplexity int, uid *string, input *users.UserUpdateInput) int
	}

	NrsignupNewsroom struct {
		OnboardedTs        func(childComplexity int) int
		Charter            func(childComplexity int) int
		CharterLastUpdated func(childComplexity int) int
		GrantRequested     func(childComplexity int) int
		GrantApproved      func(childComplexity int) int
		NewsroomDeployTx   func(childComplexity int) int
		NewsroomAddress    func(childComplexity int) int
		NewsroomName       func(childComplexity int) int
		TcrApplyTx         func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor   func(childComplexity int) int
		HasNextPage func(childComplexity int) int
	}

	Poll struct {
		CommitEndDate func(childComplexity int) int
		RevealEndDate func(childComplexity int) int
		VoteQuorum    func(childComplexity int) int
		VotesFor      func(childComplexity int) int
		VotesAgainst  func(childComplexity int) int
	}

	Query struct {
		Articles                  func(childComplexity int, addr *string, first *int, after *string, contentID *int, revisionID *int, lowercaseAddr *bool) int
		Challenge                 func(childComplexity int, id int, lowercaseAddr *bool) int
		GovernanceEvents          func(childComplexity int, addr *string, after *string, creationDate *DateRange, first *int, lowercaseAddr *bool) int
		GovernanceEventsTxHash    func(childComplexity int, txHash string, lowercaseAddr *bool) int
		Listing                   func(childComplexity int, addr string, lowercaseAddr *bool) int
		Listings                  func(childComplexity int, first *int, after *string, whitelistedOnly *bool, rejectedOnly *bool, activeChallenge *bool, currentApplication *bool, lowercaseAddr *bool, sortBy *model.SortByType, sortDesc *bool) int
		TcrChallenge              func(childComplexity int, id int, lowercaseAddr *bool) int
		TcrGovernanceEvents       func(childComplexity int, addr *string, after *string, creationDate *DateRange, first *int, lowercaseAddr *bool) int
		TcrGovernanceEventsTxHash func(childComplexity int, txHash string, lowercaseAddr *bool) int
		TcrListing                func(childComplexity int, addr string, lowercaseAddr *bool) int
		TcrListings               func(childComplexity int, first *int, after *string, whitelistedOnly *bool, rejectedOnly *bool, activeChallenge *bool, currentApplication *bool, lowercaseAddr *bool, sortBy *model.SortByType, sortDesc *bool) int
		NewsroomArticles          func(childComplexity int, addr *string, first *int, after *string, contentID *int, revisionID *int, lowercaseAddr *bool) int
		NrsignupNewsroom          func(childComplexity int) int
		UserChallengeData         func(childComplexity int, userAddr *string, pollID *int, canUserCollect *bool, canUserRescue *bool, canUserReveal *bool) int
		CurrentUser               func(childComplexity int) int
		StorefrontEthPrice        func(childComplexity int) int
		StorefrontCvlPrice        func(childComplexity int) int
		StorefrontCvlQuoteUsd     func(childComplexity int, usdToSpend float64) int
		StorefrontCvlQuoteTokens  func(childComplexity int, tokensToBuy float64) int
		Jsonb                     func(childComplexity int, id *string) int
	}

	RosterMember struct {
		Name       func(childComplexity int) int
		Role       func(childComplexity int) int
		Bio        func(childComplexity int) int
		EthAddress func(childComplexity int) int
		SocialUrls func(childComplexity int) int
		AvatarUrl  func(childComplexity int) int
		Signature  func(childComplexity int) int
	}

	User struct {
		Uid                   func(childComplexity int) int
		Email                 func(childComplexity int) int
		EthAddress            func(childComplexity int) int
		QuizPayload           func(childComplexity int) int
		QuizStatus            func(childComplexity int) int
		CivilianWhitelistTxId func(childComplexity int) int
		NrStep                func(childComplexity int) int
		NrFurthestStep        func(childComplexity int) int
		NrLastSeen            func(childComplexity int) int
	}

	UserChallengeVoteData struct {
		PollId            func(childComplexity int) int
		PollRevealDate    func(childComplexity int) int
		PollType          func(childComplexity int) int
		UserAddress       func(childComplexity int) int
		UserDidCommit     func(childComplexity int) int
		UserDidReveal     func(childComplexity int) int
		DidUserCollect    func(childComplexity int) int
		DidUserRescue     func(childComplexity int) int
		DidCollectAmount  func(childComplexity int) int
		IsVoterWinner     func(childComplexity int) int
		PollIsPassed      func(childComplexity int) int
		Salt              func(childComplexity int) int
		Choice            func(childComplexity int) int
		NumTokens         func(childComplexity int) int
		VoterReward       func(childComplexity int) int
		ParentChallengeId func(childComplexity int) int
	}
}

type AppealResolver interface {
	Requester(ctx context.Context, obj *model.Appeal) (string, error)
	AppealFeePaid(ctx context.Context, obj *model.Appeal) (string, error)
	AppealPhaseExpiry(ctx context.Context, obj *model.Appeal) (int, error)

	AppealOpenToChallengeExpiry(ctx context.Context, obj *model.Appeal) (int, error)

	AppealChallengeID(ctx context.Context, obj *model.Appeal) (int, error)
	AppealChallenge(ctx context.Context, obj *model.Appeal) (*model.Challenge, error)
}
type ChallengeResolver interface {
	ChallengeID(ctx context.Context, obj *model.Challenge) (int, error)
	ListingAddress(ctx context.Context, obj *model.Challenge) (string, error)

	RewardPool(ctx context.Context, obj *model.Challenge) (string, error)
	Challenger(ctx context.Context, obj *model.Challenge) (string, error)

	Stake(ctx context.Context, obj *model.Challenge) (string, error)
	TotalTokens(ctx context.Context, obj *model.Challenge) (string, error)
	Poll(ctx context.Context, obj *model.Challenge) (*model.Poll, error)
	RequestAppealExpiry(ctx context.Context, obj *model.Challenge) (int, error)
	Appeal(ctx context.Context, obj *model.Challenge) (*model.Appeal, error)
	LastUpdatedDateTs(ctx context.Context, obj *model.Challenge) (int, error)
}
type CharterResolver interface {
	ContentID(ctx context.Context, obj *model.Charter) (int, error)
	RevisionID(ctx context.Context, obj *model.Charter) (int, error)
	Signature(ctx context.Context, obj *model.Charter) (string, error)
	Author(ctx context.Context, obj *model.Charter) (string, error)
	ContentHash(ctx context.Context, obj *model.Charter) (string, error)
	Timestamp(ctx context.Context, obj *model.Charter) (int, error)
}
type ContentRevisionResolver interface {
	ListingAddress(ctx context.Context, obj *model.ContentRevision) (string, error)
	Payload(ctx context.Context, obj *model.ContentRevision) ([]ArticlePayload, error)

	EditorAddress(ctx context.Context, obj *model.ContentRevision) (string, error)
	ContractContentID(ctx context.Context, obj *model.ContentRevision) (int, error)
	ContractRevisionID(ctx context.Context, obj *model.ContentRevision) (int, error)

	RevisionDate(ctx context.Context, obj *model.ContentRevision) (int, error)
}
type GovernanceEventResolver interface {
	ListingAddress(ctx context.Context, obj *model.GovernanceEvent) (string, error)
	Metadata(ctx context.Context, obj *model.GovernanceEvent) ([]Metadata, error)

	CreationDate(ctx context.Context, obj *model.GovernanceEvent) (int, error)
	LastUpdatedDate(ctx context.Context, obj *model.GovernanceEvent) (int, error)

	BlockData(ctx context.Context, obj *model.GovernanceEvent) (BlockData, error)
	Listing(ctx context.Context, obj *model.GovernanceEvent) (model.Listing, error)
}
type ListingResolver interface {
	ContractAddress(ctx context.Context, obj *model.Listing) (string, error)

	LastGovState(ctx context.Context, obj *model.Listing) (string, error)

	OwnerAddresses(ctx context.Context, obj *model.Listing) ([]string, error)
	Owner(ctx context.Context, obj *model.Listing) (string, error)
	ContributorAddresses(ctx context.Context, obj *model.Listing) ([]string, error)
	CreatedDate(ctx context.Context, obj *model.Listing) (int, error)
	ApplicationDate(ctx context.Context, obj *model.Listing) (*int, error)
	ApprovalDate(ctx context.Context, obj *model.Listing) (*int, error)
	LastUpdatedDate(ctx context.Context, obj *model.Listing) (int, error)
	AppExpiry(ctx context.Context, obj *model.Listing) (int, error)
	UnstakedDeposit(ctx context.Context, obj *model.Listing) (string, error)
	ChallengeID(ctx context.Context, obj *model.Listing) (int, error)
	Challenge(ctx context.Context, obj *model.Listing) (*model.Challenge, error)
	PrevChallenge(ctx context.Context, obj *model.Listing) (*model.Challenge, error)
}
type MutationResolver interface {
	AuthSignupEth(ctx context.Context, input users.SignatureInput) (*auth.LoginResponse, error)
	AuthSignupEmailSend(ctx context.Context, emailAddress string, addToMailing *bool) (*string, error)
	AuthSignupEmailSendForApplication(ctx context.Context, emailAddress string, application auth.ApplicationEnum, addToMailing *bool) (*string, error)
	AuthSignupEmailConfirm(ctx context.Context, signupJWT string) (*auth.LoginResponse, error)
	AuthLoginEth(ctx context.Context, input users.SignatureInput) (*auth.LoginResponse, error)
	AuthLoginEmailSend(ctx context.Context, emailAddress string, addToMailing *bool) (*string, error)
	AuthLoginEmailSendForApplication(ctx context.Context, emailAddress string, application auth.ApplicationEnum, addToMailing *bool) (*string, error)
	AuthLoginEmailConfirm(ctx context.Context, loginJWT string) (*auth.LoginResponse, error)
	AuthRefresh(ctx context.Context, token string) (*auth.LoginResponse, error)
	JsonbSave(ctx context.Context, input JsonbInput) (jsonstore.JSONb, error)
	NrsignupSendWelcomeEmail(ctx context.Context) (string, error)
	NrsignupSaveCharter(ctx context.Context, charterData nrsignup.Charter) (string, error)
	NrsignupRequestGrant(ctx context.Context, requested bool) (string, error)
	NrsignupApproveGrant(ctx context.Context, approved bool, newsroomOwnerUID string) (string, error)
	NrsignupSaveTxHash(ctx context.Context, txHash string) (string, error)
	NrsignupSaveAddress(ctx context.Context, address string) (string, error)
	NrsignupSaveNewsroomApplyTxHash(ctx context.Context, txHash string) (string, error)
	NrsignupPollNewsroomDeploy(ctx context.Context, txHash string) (string, error)
	NrsignupPollTcrApplication(ctx context.Context, txHash string) (string, error)
	NrsignupUpdateSteps(ctx context.Context, input NrsignupStepsInput) (string, error)
	StorefrontAirswapTxHash(ctx context.Context, txHash string) (string, error)
	StorefrontAirswapCancelled(ctx context.Context) (string, error)
	UserSetEthAddress(ctx context.Context, input users.SignatureInput) (*string, error)
	UserUpdate(ctx context.Context, uid *string, input *users.UserUpdateInput) (*users.User, error)
}
type PollResolver interface {
	CommitEndDate(ctx context.Context, obj *model.Poll) (int, error)
	RevealEndDate(ctx context.Context, obj *model.Poll) (int, error)
	VoteQuorum(ctx context.Context, obj *model.Poll) (int, error)
	VotesFor(ctx context.Context, obj *model.Poll) (string, error)
	VotesAgainst(ctx context.Context, obj *model.Poll) (string, error)
}
type QueryResolver interface {
	Articles(ctx context.Context, addr *string, first *int, after *string, contentID *int, revisionID *int, lowercaseAddr *bool) ([]model.ContentRevision, error)
	Challenge(ctx context.Context, id int, lowercaseAddr *bool) (*model.Challenge, error)
	GovernanceEvents(ctx context.Context, addr *string, after *string, creationDate *DateRange, first *int, lowercaseAddr *bool) ([]model.GovernanceEvent, error)
	GovernanceEventsTxHash(ctx context.Context, txHash string, lowercaseAddr *bool) ([]model.GovernanceEvent, error)
	Listing(ctx context.Context, addr string, lowercaseAddr *bool) (*model.Listing, error)
	Listings(ctx context.Context, first *int, after *string, whitelistedOnly *bool, rejectedOnly *bool, activeChallenge *bool, currentApplication *bool, lowercaseAddr *bool, sortBy *model.SortByType, sortDesc *bool) ([]model.Listing, error)
	TcrChallenge(ctx context.Context, id int, lowercaseAddr *bool) (*model.Challenge, error)
	TcrGovernanceEvents(ctx context.Context, addr *string, after *string, creationDate *DateRange, first *int, lowercaseAddr *bool) (*GovernanceEventResultCursor, error)
	TcrGovernanceEventsTxHash(ctx context.Context, txHash string, lowercaseAddr *bool) ([]model.GovernanceEvent, error)
	TcrListing(ctx context.Context, addr string, lowercaseAddr *bool) (*model.Listing, error)
	TcrListings(ctx context.Context, first *int, after *string, whitelistedOnly *bool, rejectedOnly *bool, activeChallenge *bool, currentApplication *bool, lowercaseAddr *bool, sortBy *model.SortByType, sortDesc *bool) (*ListingResultCursor, error)
	NewsroomArticles(ctx context.Context, addr *string, first *int, after *string, contentID *int, revisionID *int, lowercaseAddr *bool) ([]model.ContentRevision, error)
	NrsignupNewsroom(ctx context.Context) (*nrsignup.SignupUserJSONData, error)
	UserChallengeData(ctx context.Context, userAddr *string, pollID *int, canUserCollect *bool, canUserRescue *bool, canUserReveal *bool) ([]model.UserChallengeData, error)
	CurrentUser(ctx context.Context) (*users.User, error)
	StorefrontEthPrice(ctx context.Context) (*float64, error)
	StorefrontCvlPrice(ctx context.Context) (*float64, error)
	StorefrontCvlQuoteUsd(ctx context.Context, usdToSpend float64) (*float64, error)
	StorefrontCvlQuoteTokens(ctx context.Context, tokensToBuy float64) (*float64, error)
	Jsonb(ctx context.Context, id *string) (*jsonstore.JSONb, error)
}
type UserResolver interface {
	NrStep(ctx context.Context, obj *users.User) (*int, error)
	NrFurthestStep(ctx context.Context, obj *users.User) (*int, error)
	NrLastSeen(ctx context.Context, obj *users.User) (*int, error)
}
type UserChallengeVoteDataResolver interface {
	PollID(ctx context.Context, obj *model.UserChallengeData) (int, error)
	PollRevealDate(ctx context.Context, obj *model.UserChallengeData) (int, error)

	UserAddress(ctx context.Context, obj *model.UserChallengeData) (string, error)

	DidCollectAmount(ctx context.Context, obj *model.UserChallengeData) (int, error)

	Salt(ctx context.Context, obj *model.UserChallengeData) (int, error)
	Choice(ctx context.Context, obj *model.UserChallengeData) (int, error)
	NumTokens(ctx context.Context, obj *model.UserChallengeData) (string, error)
	VoterReward(ctx context.Context, obj *model.UserChallengeData) (string, error)
	ParentChallengeID(ctx context.Context, obj *model.UserChallengeData) (int, error)
}

func field_Mutation_authSignupEth_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 users.SignatureInput
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		arg0, err = UnmarshalUserSignatureInput(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil

}

func field_Mutation_authSignupEmailSend_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["emailAddress"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["emailAddress"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["addToMailing"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["addToMailing"] = arg1
	return args, nil

}

func field_Mutation_authSignupEmailSendForApplication_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["emailAddress"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["emailAddress"] = arg0
	var arg1 auth.ApplicationEnum
	if tmp, ok := rawArgs["application"]; ok {
		var err error
		err = (&arg1).UnmarshalGQL(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["application"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["addToMailing"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["addToMailing"] = arg2
	return args, nil

}

func field_Mutation_authSignupEmailConfirm_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["signupJWT"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["signupJWT"] = arg0
	return args, nil

}

func field_Mutation_authLoginEth_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 users.SignatureInput
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		arg0, err = UnmarshalUserSignatureInput(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil

}

func field_Mutation_authLoginEmailSend_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["emailAddress"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["emailAddress"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["addToMailing"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["addToMailing"] = arg1
	return args, nil

}

func field_Mutation_authLoginEmailSendForApplication_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["emailAddress"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["emailAddress"] = arg0
	var arg1 auth.ApplicationEnum
	if tmp, ok := rawArgs["application"]; ok {
		var err error
		err = (&arg1).UnmarshalGQL(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["application"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["addToMailing"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["addToMailing"] = arg2
	return args, nil

}

func field_Mutation_authLoginEmailConfirm_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["loginJWT"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["loginJWT"] = arg0
	return args, nil

}

func field_Mutation_authRefresh_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	return args, nil

}

func field_Mutation_jsonbSave_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 JsonbInput
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		arg0, err = UnmarshalJsonbInput(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil

}

func field_Mutation_nrsignupSaveCharter_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 nrsignup.Charter
	if tmp, ok := rawArgs["charterData"]; ok {
		var err error
		arg0, err = UnmarshalCharterInput(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["charterData"] = arg0
	return args, nil

}

func field_Mutation_nrsignupRequestGrant_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["requested"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["requested"] = arg0
	return args, nil

}

func field_Mutation_nrsignupApproveGrant_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["approved"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["approved"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["newsroomOwnerUID"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["newsroomOwnerUID"] = arg1
	return args, nil

}

func field_Mutation_nrsignupSaveTxHash_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["txHash"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["txHash"] = arg0
	return args, nil

}

func field_Mutation_nrsignupSaveAddress_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["address"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["address"] = arg0
	return args, nil

}

func field_Mutation_nrsignupSaveNewsroomApplyTxHash_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["txHash"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["txHash"] = arg0
	return args, nil

}

func field_Mutation_nrsignupPollNewsroomDeploy_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["txHash"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["txHash"] = arg0
	return args, nil

}

func field_Mutation_nrsignupPollTcrApplication_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["txHash"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["txHash"] = arg0
	return args, nil

}

func field_Mutation_nrsignupUpdateSteps_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 NrsignupStepsInput
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		arg0, err = UnmarshalNrsignupStepsInput(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil

}

func field_Mutation_storefrontAirswapTxHash_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["txHash"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["txHash"] = arg0
	return args, nil

}

func field_Mutation_userSetEthAddress_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 users.SignatureInput
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		arg0, err = UnmarshalUserSignatureInput(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil

}

func field_Mutation_userUpdate_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["uid"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["uid"] = arg0
	var arg1 *users.UserUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		var ptr1 users.UserUpdateInput
		if tmp != nil {
			ptr1, err = UnmarshalUserUpdateInput(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil

}

func field_Query_articles_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["addr"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["addr"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["after"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["contentID"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["contentID"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["revisionID"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg4 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["revisionID"] = arg4
	var arg5 *bool
	if tmp, ok := rawArgs["lowercaseAddr"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["lowercaseAddr"] = arg5
	return args, nil

}

func field_Query_challenge_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["lowercaseAddr"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["lowercaseAddr"] = arg1
	return args, nil

}

func field_Query_governanceEvents_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["addr"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["addr"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *DateRange
	if tmp, ok := rawArgs["creationDate"]; ok {
		var err error
		var ptr1 DateRange
		if tmp != nil {
			ptr1, err = UnmarshalDateRange(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["creationDate"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *bool
	if tmp, ok := rawArgs["lowercaseAddr"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg4 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["lowercaseAddr"] = arg4
	return args, nil

}

func field_Query_governanceEventsTxHash_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["txHash"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["txHash"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["lowercaseAddr"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["lowercaseAddr"] = arg1
	return args, nil

}

func field_Query_listing_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["addr"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["addr"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["lowercaseAddr"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["lowercaseAddr"] = arg1
	return args, nil

}

func field_Query_listings_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["whitelistedOnly"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["whitelistedOnly"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["rejectedOnly"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["rejectedOnly"] = arg3
	var arg4 *bool
	if tmp, ok := rawArgs["activeChallenge"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg4 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["activeChallenge"] = arg4
	var arg5 *bool
	if tmp, ok := rawArgs["currentApplication"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["currentApplication"] = arg5
	var arg6 *bool
	if tmp, ok := rawArgs["lowercaseAddr"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg6 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["lowercaseAddr"] = arg6
	var arg7 *model.SortByType
	if tmp, ok := rawArgs["sortBy"]; ok {
		var err error
		var ptr1 model.SortByType
		if tmp != nil {
			err = (&ptr1).UnmarshalGQL(tmp)
			arg7 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["sortBy"] = arg7
	var arg8 *bool
	if tmp, ok := rawArgs["sortDesc"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg8 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["sortDesc"] = arg8
	return args, nil

}

func field_Query_tcrChallenge_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["lowercaseAddr"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["lowercaseAddr"] = arg1
	return args, nil

}

func field_Query_tcrGovernanceEvents_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["addr"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["addr"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *DateRange
	if tmp, ok := rawArgs["creationDate"]; ok {
		var err error
		var ptr1 DateRange
		if tmp != nil {
			ptr1, err = UnmarshalDateRange(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["creationDate"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *bool
	if tmp, ok := rawArgs["lowercaseAddr"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg4 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["lowercaseAddr"] = arg4
	return args, nil

}

func field_Query_tcrGovernanceEventsTxHash_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["txHash"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["txHash"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["lowercaseAddr"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["lowercaseAddr"] = arg1
	return args, nil

}

func field_Query_tcrListing_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["addr"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["addr"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["lowercaseAddr"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["lowercaseAddr"] = arg1
	return args, nil

}

func field_Query_tcrListings_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["whitelistedOnly"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["whitelistedOnly"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["rejectedOnly"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["rejectedOnly"] = arg3
	var arg4 *bool
	if tmp, ok := rawArgs["activeChallenge"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg4 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["activeChallenge"] = arg4
	var arg5 *bool
	if tmp, ok := rawArgs["currentApplication"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["currentApplication"] = arg5
	var arg6 *bool
	if tmp, ok := rawArgs["lowercaseAddr"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg6 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["lowercaseAddr"] = arg6
	var arg7 *model.SortByType
	if tmp, ok := rawArgs["sortBy"]; ok {
		var err error
		var ptr1 model.SortByType
		if tmp != nil {
			err = (&ptr1).UnmarshalGQL(tmp)
			arg7 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["sortBy"] = arg7
	var arg8 *bool
	if tmp, ok := rawArgs["sortDesc"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg8 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["sortDesc"] = arg8
	return args, nil

}

func field_Query_newsroomArticles_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["addr"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["addr"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["after"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["contentID"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["contentID"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["revisionID"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg4 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["revisionID"] = arg4
	var arg5 *bool
	if tmp, ok := rawArgs["lowercaseAddr"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["lowercaseAddr"] = arg5
	return args, nil

}

func field_Query_userChallengeData_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["userAddr"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["userAddr"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["pollID"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["pollID"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["canUserCollect"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["canUserCollect"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["canUserRescue"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["canUserRescue"] = arg3
	var arg4 *bool
	if tmp, ok := rawArgs["canUserReveal"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg4 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["canUserReveal"] = arg4
	return args, nil

}

func field_Query_storefrontCvlQuoteUsd_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 float64
	if tmp, ok := rawArgs["usdToSpend"]; ok {
		var err error
		arg0, err = graphql.UnmarshalFloat(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["usdToSpend"] = arg0
	return args, nil

}

func field_Query_storefrontCvlQuoteTokens_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 float64
	if tmp, ok := rawArgs["tokensToBuy"]; ok {
		var err error
		arg0, err = graphql.UnmarshalFloat(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tokensToBuy"] = arg0
	return args, nil

}

func field_Query_jsonb_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil

}

func field_Query___type_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil

}

func field___Type_fields_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil

}

func field___Type_enumValues_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil

}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	switch typeName + "." + field {

	case "Appeal.requester":
		if e.complexity.Appeal.Requester == nil {
			break
		}

		return e.complexity.Appeal.Requester(childComplexity), true

	case "Appeal.appealFeePaid":
		if e.complexity.Appeal.AppealFeePaid == nil {
			break
		}

		return e.complexity.Appeal.AppealFeePaid(childComplexity), true

	case "Appeal.appealPhaseExpiry":
		if e.complexity.Appeal.AppealPhaseExpiry == nil {
			break
		}

		return e.complexity.Appeal.AppealPhaseExpiry(childComplexity), true

	case "Appeal.appealGranted":
		if e.complexity.Appeal.AppealGranted == nil {
			break
		}

		return e.complexity.Appeal.AppealGranted(childComplexity), true

	case "Appeal.appealOpenToChallengeExpiry":
		if e.complexity.Appeal.AppealOpenToChallengeExpiry == nil {
			break
		}

		return e.complexity.Appeal.AppealOpenToChallengeExpiry(childComplexity), true

	case "Appeal.statement":
		if e.complexity.Appeal.Statement == nil {
			break
		}

		return e.complexity.Appeal.Statement(childComplexity), true

	case "Appeal.appealChallengeID":
		if e.complexity.Appeal.AppealChallengeId == nil {
			break
		}

		return e.complexity.Appeal.AppealChallengeId(childComplexity), true

	case "Appeal.appealChallenge":
		if e.complexity.Appeal.AppealChallenge == nil {
			break
		}

		return e.complexity.Appeal.AppealChallenge(childComplexity), true

	case "Appeal.appealGrantedStatementURI":
		if e.complexity.Appeal.AppealGrantedStatementUri == nil {
			break
		}

		return e.complexity.Appeal.AppealGrantedStatementUri(childComplexity), true

	case "ArticlePayload.key":
		if e.complexity.ArticlePayload.Key == nil {
			break
		}

		return e.complexity.ArticlePayload.Key(childComplexity), true

	case "ArticlePayload.value":
		if e.complexity.ArticlePayload.Value == nil {
			break
		}

		return e.complexity.ArticlePayload.Value(childComplexity), true

	case "AuthLoginResponse.token":
		if e.complexity.AuthLoginResponse.Token == nil {
			break
		}

		return e.complexity.AuthLoginResponse.Token(childComplexity), true

	case "AuthLoginResponse.refreshToken":
		if e.complexity.AuthLoginResponse.RefreshToken == nil {
			break
		}

		return e.complexity.AuthLoginResponse.RefreshToken(childComplexity), true

	case "AuthLoginResponse.uid":
		if e.complexity.AuthLoginResponse.Uid == nil {
			break
		}

		return e.complexity.AuthLoginResponse.Uid(childComplexity), true

	case "BlockData.blockNumber":
		if e.complexity.BlockData.BlockNumber == nil {
			break
		}

		return e.complexity.BlockData.BlockNumber(childComplexity), true

	case "BlockData.txHash":
		if e.complexity.BlockData.TxHash == nil {
			break
		}

		return e.complexity.BlockData.TxHash(childComplexity), true

	case "BlockData.txIndex":
		if e.complexity.BlockData.TxIndex == nil {
			break
		}

		return e.complexity.BlockData.TxIndex(childComplexity), true

	case "BlockData.blockHash":
		if e.complexity.BlockData.BlockHash == nil {
			break
		}

		return e.complexity.BlockData.BlockHash(childComplexity), true

	case "BlockData.index":
		if e.complexity.BlockData.Index == nil {
			break
		}

		return e.complexity.BlockData.Index(childComplexity), true

	case "Challenge.challengeID":
		if e.complexity.Challenge.ChallengeId == nil {
			break
		}

		return e.complexity.Challenge.ChallengeId(childComplexity), true

	case "Challenge.listingAddress":
		if e.complexity.Challenge.ListingAddress == nil {
			break
		}

		return e.complexity.Challenge.ListingAddress(childComplexity), true

	case "Challenge.statement":
		if e.complexity.Challenge.Statement == nil {
			break
		}

		return e.complexity.Challenge.Statement(childComplexity), true

	case "Challenge.rewardPool":
		if e.complexity.Challenge.RewardPool == nil {
			break
		}

		return e.complexity.Challenge.RewardPool(childComplexity), true

	case "Challenge.challenger":
		if e.complexity.Challenge.Challenger == nil {
			break
		}

		return e.complexity.Challenge.Challenger(childComplexity), true

	case "Challenge.resolved":
		if e.complexity.Challenge.Resolved == nil {
			break
		}

		return e.complexity.Challenge.Resolved(childComplexity), true

	case "Challenge.stake":
		if e.complexity.Challenge.Stake == nil {
			break
		}

		return e.complexity.Challenge.Stake(childComplexity), true

	case "Challenge.totalTokens":
		if e.complexity.Challenge.TotalTokens == nil {
			break
		}

		return e.complexity.Challenge.TotalTokens(childComplexity), true

	case "Challenge.poll":
		if e.complexity.Challenge.Poll == nil {
			break
		}

		return e.complexity.Challenge.Poll(childComplexity), true

	case "Challenge.requestAppealExpiry":
		if e.complexity.Challenge.RequestAppealExpiry == nil {
			break
		}

		return e.complexity.Challenge.RequestAppealExpiry(childComplexity), true

	case "Challenge.appeal":
		if e.complexity.Challenge.Appeal == nil {
			break
		}

		return e.complexity.Challenge.Appeal(childComplexity), true

	case "Challenge.lastUpdatedDateTs":
		if e.complexity.Challenge.LastUpdatedDateTs == nil {
			break
		}

		return e.complexity.Challenge.LastUpdatedDateTs(childComplexity), true

	case "Charter.uri":
		if e.complexity.Charter.Uri == nil {
			break
		}

		return e.complexity.Charter.Uri(childComplexity), true

	case "Charter.contentID":
		if e.complexity.Charter.ContentId == nil {
			break
		}

		return e.complexity.Charter.ContentId(childComplexity), true

	case "Charter.revisionID":
		if e.complexity.Charter.RevisionId == nil {
			break
		}

		return e.complexity.Charter.RevisionId(childComplexity), true

	case "Charter.signature":
		if e.complexity.Charter.Signature == nil {
			break
		}

		return e.complexity.Charter.Signature(childComplexity), true

	case "Charter.author":
		if e.complexity.Charter.Author == nil {
			break
		}

		return e.complexity.Charter.Author(childComplexity), true

	case "Charter.contentHash":
		if e.complexity.Charter.ContentHash == nil {
			break
		}

		return e.complexity.Charter.ContentHash(childComplexity), true

	case "Charter.timestamp":
		if e.complexity.Charter.Timestamp == nil {
			break
		}

		return e.complexity.Charter.Timestamp(childComplexity), true

	case "CharterContent.name":
		if e.complexity.CharterContent.Name == nil {
			break
		}

		return e.complexity.CharterContent.Name(childComplexity), true

	case "CharterContent.logoUrl":
		if e.complexity.CharterContent.LogoUrl == nil {
			break
		}

		return e.complexity.CharterContent.LogoUrl(childComplexity), true

	case "CharterContent.newsroomUrl":
		if e.complexity.CharterContent.NewsroomUrl == nil {
			break
		}

		return e.complexity.CharterContent.NewsroomUrl(childComplexity), true

	case "CharterContent.tagline":
		if e.complexity.CharterContent.Tagline == nil {
			break
		}

		return e.complexity.CharterContent.Tagline(childComplexity), true

	case "CharterContent.roster":
		if e.complexity.CharterContent.Roster == nil {
			break
		}

		return e.complexity.CharterContent.Roster(childComplexity), true

	case "CharterContent.signatures":
		if e.complexity.CharterContent.Signatures == nil {
			break
		}

		return e.complexity.CharterContent.Signatures(childComplexity), true

	case "CharterContent.mission":
		if e.complexity.CharterContent.Mission == nil {
			break
		}

		return e.complexity.CharterContent.Mission(childComplexity), true

	case "CharterContent.socialUrls":
		if e.complexity.CharterContent.SocialUrls == nil {
			break
		}

		return e.complexity.CharterContent.SocialUrls(childComplexity), true

	case "CharterMission.purpose":
		if e.complexity.CharterMission.Purpose == nil {
			break
		}

		return e.complexity.CharterMission.Purpose(childComplexity), true

	case "CharterMission.structure":
		if e.complexity.CharterMission.Structure == nil {
			break
		}

		return e.complexity.CharterMission.Structure(childComplexity), true

	case "CharterMission.revenue":
		if e.complexity.CharterMission.Revenue == nil {
			break
		}

		return e.complexity.CharterMission.Revenue(childComplexity), true

	case "CharterMission.encumbrances":
		if e.complexity.CharterMission.Encumbrances == nil {
			break
		}

		return e.complexity.CharterMission.Encumbrances(childComplexity), true

	case "CharterMission.miscellaneous":
		if e.complexity.CharterMission.Miscellaneous == nil {
			break
		}

		return e.complexity.CharterMission.Miscellaneous(childComplexity), true

	case "CharterSocialUrls.twitter":
		if e.complexity.CharterSocialUrls.Twitter == nil {
			break
		}

		return e.complexity.CharterSocialUrls.Twitter(childComplexity), true

	case "CharterSocialUrls.facebook":
		if e.complexity.CharterSocialUrls.Facebook == nil {
			break
		}

		return e.complexity.CharterSocialUrls.Facebook(childComplexity), true

	case "CharterSocialUrls.instagram":
		if e.complexity.CharterSocialUrls.Instagram == nil {
			break
		}

		return e.complexity.CharterSocialUrls.Instagram(childComplexity), true

	case "CharterSocialUrls.linkedIn":
		if e.complexity.CharterSocialUrls.LinkedIn == nil {
			break
		}

		return e.complexity.CharterSocialUrls.LinkedIn(childComplexity), true

	case "CharterSocialUrls.youTube":
		if e.complexity.CharterSocialUrls.YouTube == nil {
			break
		}

		return e.complexity.CharterSocialUrls.YouTube(childComplexity), true

	case "CharterSocialUrls.email":
		if e.complexity.CharterSocialUrls.Email == nil {
			break
		}

		return e.complexity.CharterSocialUrls.Email(childComplexity), true

	case "ConstitutionSignature.signer":
		if e.complexity.ConstitutionSignature.Signer == nil {
			break
		}

		return e.complexity.ConstitutionSignature.Signer(childComplexity), true

	case "ConstitutionSignature.signature":
		if e.complexity.ConstitutionSignature.Signature == nil {
			break
		}

		return e.complexity.ConstitutionSignature.Signature(childComplexity), true

	case "ConstitutionSignature.message":
		if e.complexity.ConstitutionSignature.Message == nil {
			break
		}

		return e.complexity.ConstitutionSignature.Message(childComplexity), true

	case "ContentRevision.listingAddress":
		if e.complexity.ContentRevision.ListingAddress == nil {
			break
		}

		return e.complexity.ContentRevision.ListingAddress(childComplexity), true

	case "ContentRevision.payload":
		if e.complexity.ContentRevision.Payload == nil {
			break
		}

		return e.complexity.ContentRevision.Payload(childComplexity), true

	case "ContentRevision.payloadHash":
		if e.complexity.ContentRevision.PayloadHash == nil {
			break
		}

		return e.complexity.ContentRevision.PayloadHash(childComplexity), true

	case "ContentRevision.editorAddress":
		if e.complexity.ContentRevision.EditorAddress == nil {
			break
		}

		return e.complexity.ContentRevision.EditorAddress(childComplexity), true

	case "ContentRevision.contractContentId":
		if e.complexity.ContentRevision.ContractContentId == nil {
			break
		}

		return e.complexity.ContentRevision.ContractContentId(childComplexity), true

	case "ContentRevision.contractRevisionId":
		if e.complexity.ContentRevision.ContractRevisionId == nil {
			break
		}

		return e.complexity.ContentRevision.ContractRevisionId(childComplexity), true

	case "ContentRevision.revisionUri":
		if e.complexity.ContentRevision.RevisionUri == nil {
			break
		}

		return e.complexity.ContentRevision.RevisionUri(childComplexity), true

	case "ContentRevision.revisionDate":
		if e.complexity.ContentRevision.RevisionDate == nil {
			break
		}

		return e.complexity.ContentRevision.RevisionDate(childComplexity), true

	case "GovernanceEvent.listingAddress":
		if e.complexity.GovernanceEvent.ListingAddress == nil {
			break
		}

		return e.complexity.GovernanceEvent.ListingAddress(childComplexity), true

	case "GovernanceEvent.metadata":
		if e.complexity.GovernanceEvent.Metadata == nil {
			break
		}

		return e.complexity.GovernanceEvent.Metadata(childComplexity), true

	case "GovernanceEvent.governanceEventType":
		if e.complexity.GovernanceEvent.GovernanceEventType == nil {
			break
		}

		return e.complexity.GovernanceEvent.GovernanceEventType(childComplexity), true

	case "GovernanceEvent.creationDate":
		if e.complexity.GovernanceEvent.CreationDate == nil {
			break
		}

		return e.complexity.GovernanceEvent.CreationDate(childComplexity), true

	case "GovernanceEvent.lastUpdatedDate":
		if e.complexity.GovernanceEvent.LastUpdatedDate == nil {
			break
		}

		return e.complexity.GovernanceEvent.LastUpdatedDate(childComplexity), true

	case "GovernanceEvent.eventHash":
		if e.complexity.GovernanceEvent.EventHash == nil {
			break
		}

		return e.complexity.GovernanceEvent.EventHash(childComplexity), true

	case "GovernanceEvent.blockData":
		if e.complexity.GovernanceEvent.BlockData == nil {
			break
		}

		return e.complexity.GovernanceEvent.BlockData(childComplexity), true

	case "GovernanceEvent.listing":
		if e.complexity.GovernanceEvent.Listing == nil {
			break
		}

		return e.complexity.GovernanceEvent.Listing(childComplexity), true

	case "GovernanceEventEdge.cursor":
		if e.complexity.GovernanceEventEdge.Cursor == nil {
			break
		}

		return e.complexity.GovernanceEventEdge.Cursor(childComplexity), true

	case "GovernanceEventEdge.node":
		if e.complexity.GovernanceEventEdge.Node == nil {
			break
		}

		return e.complexity.GovernanceEventEdge.Node(childComplexity), true

	case "GovernanceEventResultCursor.edges":
		if e.complexity.GovernanceEventResultCursor.Edges == nil {
			break
		}

		return e.complexity.GovernanceEventResultCursor.Edges(childComplexity), true

	case "GovernanceEventResultCursor.pageInfo":
		if e.complexity.GovernanceEventResultCursor.PageInfo == nil {
			break
		}

		return e.complexity.GovernanceEventResultCursor.PageInfo(childComplexity), true

	case "JsonField.key":
		if e.complexity.JsonField.Key == nil {
			break
		}

		return e.complexity.JsonField.Key(childComplexity), true

	case "JsonField.value":
		if e.complexity.JsonField.Value == nil {
			break
		}

		return e.complexity.JsonField.Value(childComplexity), true

	case "Jsonb.id":
		if e.complexity.Jsonb.Id == nil {
			break
		}

		return e.complexity.Jsonb.Id(childComplexity), true

	case "Jsonb.hash":
		if e.complexity.Jsonb.Hash == nil {
			break
		}

		return e.complexity.Jsonb.Hash(childComplexity), true

	case "Jsonb.createdDate":
		if e.complexity.Jsonb.CreatedDate == nil {
			break
		}

		return e.complexity.Jsonb.CreatedDate(childComplexity), true

	case "Jsonb.lastUpdatedDate":
		if e.complexity.Jsonb.LastUpdatedDate == nil {
			break
		}

		return e.complexity.Jsonb.LastUpdatedDate(childComplexity), true

	case "Jsonb.rawJson":
		if e.complexity.Jsonb.RawJson == nil {
			break
		}

		return e.complexity.Jsonb.RawJson(childComplexity), true

	case "Jsonb.json":
		if e.complexity.Jsonb.Json == nil {
			break
		}

		return e.complexity.Jsonb.Json(childComplexity), true

	case "Listing.name":
		if e.complexity.Listing.Name == nil {
			break
		}

		return e.complexity.Listing.Name(childComplexity), true

	case "Listing.contractAddress":
		if e.complexity.Listing.ContractAddress == nil {
			break
		}

		return e.complexity.Listing.ContractAddress(childComplexity), true

	case "Listing.whitelisted":
		if e.complexity.Listing.Whitelisted == nil {
			break
		}

		return e.complexity.Listing.Whitelisted(childComplexity), true

	case "Listing.lastGovState":
		if e.complexity.Listing.LastGovState == nil {
			break
		}

		return e.complexity.Listing.LastGovState(childComplexity), true

	case "Listing.url":
		if e.complexity.Listing.Url == nil {
			break
		}

		return e.complexity.Listing.Url(childComplexity), true

	case "Listing.charter":
		if e.complexity.Listing.Charter == nil {
			break
		}

		return e.complexity.Listing.Charter(childComplexity), true

	case "Listing.ownerAddresses":
		if e.complexity.Listing.OwnerAddresses == nil {
			break
		}

		return e.complexity.Listing.OwnerAddresses(childComplexity), true

	case "Listing.owner":
		if e.complexity.Listing.Owner == nil {
			break
		}

		return e.complexity.Listing.Owner(childComplexity), true

	case "Listing.contributorAddresses":
		if e.complexity.Listing.ContributorAddresses == nil {
			break
		}

		return e.complexity.Listing.ContributorAddresses(childComplexity), true

	case "Listing.createdDate":
		if e.complexity.Listing.CreatedDate == nil {
			break
		}

		return e.complexity.Listing.CreatedDate(childComplexity), true

	case "Listing.applicationDate":
		if e.complexity.Listing.ApplicationDate == nil {
			break
		}

		return e.complexity.Listing.ApplicationDate(childComplexity), true

	case "Listing.approvalDate":
		if e.complexity.Listing.ApprovalDate == nil {
			break
		}

		return e.complexity.Listing.ApprovalDate(childComplexity), true

	case "Listing.lastUpdatedDate":
		if e.complexity.Listing.LastUpdatedDate == nil {
			break
		}

		return e.complexity.Listing.LastUpdatedDate(childComplexity), true

	case "Listing.appExpiry":
		if e.complexity.Listing.AppExpiry == nil {
			break
		}

		return e.complexity.Listing.AppExpiry(childComplexity), true

	case "Listing.unstakedDeposit":
		if e.complexity.Listing.UnstakedDeposit == nil {
			break
		}

		return e.complexity.Listing.UnstakedDeposit(childComplexity), true

	case "Listing.challengeID":
		if e.complexity.Listing.ChallengeId == nil {
			break
		}

		return e.complexity.Listing.ChallengeId(childComplexity), true

	case "Listing.challenge":
		if e.complexity.Listing.Challenge == nil {
			break
		}

		return e.complexity.Listing.Challenge(childComplexity), true

	case "Listing.prevChallenge":
		if e.complexity.Listing.PrevChallenge == nil {
			break
		}

		return e.complexity.Listing.PrevChallenge(childComplexity), true

	case "ListingEdge.cursor":
		if e.complexity.ListingEdge.Cursor == nil {
			break
		}

		return e.complexity.ListingEdge.Cursor(childComplexity), true

	case "ListingEdge.node":
		if e.complexity.ListingEdge.Node == nil {
			break
		}

		return e.complexity.ListingEdge.Node(childComplexity), true

	case "ListingResultCursor.edges":
		if e.complexity.ListingResultCursor.Edges == nil {
			break
		}

		return e.complexity.ListingResultCursor.Edges(childComplexity), true

	case "ListingResultCursor.pageInfo":
		if e.complexity.ListingResultCursor.PageInfo == nil {
			break
		}

		return e.complexity.ListingResultCursor.PageInfo(childComplexity), true

	case "Metadata.key":
		if e.complexity.Metadata.Key == nil {
			break
		}

		return e.complexity.Metadata.Key(childComplexity), true

	case "Metadata.value":
		if e.complexity.Metadata.Value == nil {
			break
		}

		return e.complexity.Metadata.Value(childComplexity), true

	case "Mutation.authSignupEth":
		if e.complexity.Mutation.AuthSignupEth == nil {
			break
		}

		args, err := field_Mutation_authSignupEth_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AuthSignupEth(childComplexity, args["input"].(users.SignatureInput)), true

	case "Mutation.authSignupEmailSend":
		if e.complexity.Mutation.AuthSignupEmailSend == nil {
			break
		}

		args, err := field_Mutation_authSignupEmailSend_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AuthSignupEmailSend(childComplexity, args["emailAddress"].(string), args["addToMailing"].(*bool)), true

	case "Mutation.authSignupEmailSendForApplication":
		if e.complexity.Mutation.AuthSignupEmailSendForApplication == nil {
			break
		}

		args, err := field_Mutation_authSignupEmailSendForApplication_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AuthSignupEmailSendForApplication(childComplexity, args["emailAddress"].(string), args["application"].(auth.ApplicationEnum), args["addToMailing"].(*bool)), true

	case "Mutation.authSignupEmailConfirm":
		if e.complexity.Mutation.AuthSignupEmailConfirm == nil {
			break
		}

		args, err := field_Mutation_authSignupEmailConfirm_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AuthSignupEmailConfirm(childComplexity, args["signupJWT"].(string)), true

	case "Mutation.authLoginEth":
		if e.complexity.Mutation.AuthLoginEth == nil {
			break
		}

		args, err := field_Mutation_authLoginEth_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AuthLoginEth(childComplexity, args["input"].(users.SignatureInput)), true

	case "Mutation.authLoginEmailSend":
		if e.complexity.Mutation.AuthLoginEmailSend == nil {
			break
		}

		args, err := field_Mutation_authLoginEmailSend_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AuthLoginEmailSend(childComplexity, args["emailAddress"].(string), args["addToMailing"].(*bool)), true

	case "Mutation.authLoginEmailSendForApplication":
		if e.complexity.Mutation.AuthLoginEmailSendForApplication == nil {
			break
		}

		args, err := field_Mutation_authLoginEmailSendForApplication_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AuthLoginEmailSendForApplication(childComplexity, args["emailAddress"].(string), args["application"].(auth.ApplicationEnum), args["addToMailing"].(*bool)), true

	case "Mutation.authLoginEmailConfirm":
		if e.complexity.Mutation.AuthLoginEmailConfirm == nil {
			break
		}

		args, err := field_Mutation_authLoginEmailConfirm_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AuthLoginEmailConfirm(childComplexity, args["loginJWT"].(string)), true

	case "Mutation.authRefresh":
		if e.complexity.Mutation.AuthRefresh == nil {
			break
		}

		args, err := field_Mutation_authRefresh_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AuthRefresh(childComplexity, args["token"].(string)), true

	case "Mutation.jsonbSave":
		if e.complexity.Mutation.JsonbSave == nil {
			break
		}

		args, err := field_Mutation_jsonbSave_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.JsonbSave(childComplexity, args["input"].(JsonbInput)), true

	case "Mutation.nrsignupSendWelcomeEmail":
		if e.complexity.Mutation.NrsignupSendWelcomeEmail == nil {
			break
		}

		return e.complexity.Mutation.NrsignupSendWelcomeEmail(childComplexity), true

	case "Mutation.nrsignupSaveCharter":
		if e.complexity.Mutation.NrsignupSaveCharter == nil {
			break
		}

		args, err := field_Mutation_nrsignupSaveCharter_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NrsignupSaveCharter(childComplexity, args["charterData"].(nrsignup.Charter)), true

	case "Mutation.nrsignupRequestGrant":
		if e.complexity.Mutation.NrsignupRequestGrant == nil {
			break
		}

		args, err := field_Mutation_nrsignupRequestGrant_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NrsignupRequestGrant(childComplexity, args["requested"].(bool)), true

	case "Mutation.nrsignupApproveGrant":
		if e.complexity.Mutation.NrsignupApproveGrant == nil {
			break
		}

		args, err := field_Mutation_nrsignupApproveGrant_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NrsignupApproveGrant(childComplexity, args["approved"].(bool), args["newsroomOwnerUID"].(string)), true

	case "Mutation.nrsignupSaveTxHash":
		if e.complexity.Mutation.NrsignupSaveTxHash == nil {
			break
		}

		args, err := field_Mutation_nrsignupSaveTxHash_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NrsignupSaveTxHash(childComplexity, args["txHash"].(string)), true

	case "Mutation.nrsignupSaveAddress":
		if e.complexity.Mutation.NrsignupSaveAddress == nil {
			break
		}

		args, err := field_Mutation_nrsignupSaveAddress_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NrsignupSaveAddress(childComplexity, args["address"].(string)), true

	case "Mutation.nrsignupSaveNewsroomApplyTxHash":
		if e.complexity.Mutation.NrsignupSaveNewsroomApplyTxHash == nil {
			break
		}

		args, err := field_Mutation_nrsignupSaveNewsroomApplyTxHash_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NrsignupSaveNewsroomApplyTxHash(childComplexity, args["txHash"].(string)), true

	case "Mutation.nrsignupPollNewsroomDeploy":
		if e.complexity.Mutation.NrsignupPollNewsroomDeploy == nil {
			break
		}

		args, err := field_Mutation_nrsignupPollNewsroomDeploy_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NrsignupPollNewsroomDeploy(childComplexity, args["txHash"].(string)), true

	case "Mutation.nrsignupPollTcrApplication":
		if e.complexity.Mutation.NrsignupPollTcrApplication == nil {
			break
		}

		args, err := field_Mutation_nrsignupPollTcrApplication_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NrsignupPollTcrApplication(childComplexity, args["txHash"].(string)), true

	case "Mutation.nrsignupUpdateSteps":
		if e.complexity.Mutation.NrsignupUpdateSteps == nil {
			break
		}

		args, err := field_Mutation_nrsignupUpdateSteps_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NrsignupUpdateSteps(childComplexity, args["input"].(NrsignupStepsInput)), true

	case "Mutation.storefrontAirswapTxHash":
		if e.complexity.Mutation.StorefrontAirswapTxHash == nil {
			break
		}

		args, err := field_Mutation_storefrontAirswapTxHash_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StorefrontAirswapTxHash(childComplexity, args["txHash"].(string)), true

	case "Mutation.storefrontAirswapCancelled":
		if e.complexity.Mutation.StorefrontAirswapCancelled == nil {
			break
		}

		return e.complexity.Mutation.StorefrontAirswapCancelled(childComplexity), true

	case "Mutation.userSetEthAddress":
		if e.complexity.Mutation.UserSetEthAddress == nil {
			break
		}

		args, err := field_Mutation_userSetEthAddress_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UserSetEthAddress(childComplexity, args["input"].(users.SignatureInput)), true

	case "Mutation.userUpdate":
		if e.complexity.Mutation.UserUpdate == nil {
			break
		}

		args, err := field_Mutation_userUpdate_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UserUpdate(childComplexity, args["uid"].(*string), args["input"].(*users.UserUpdateInput)), true

	case "NrsignupNewsroom.onboardedTs":
		if e.complexity.NrsignupNewsroom.OnboardedTs == nil {
			break
		}

		return e.complexity.NrsignupNewsroom.OnboardedTs(childComplexity), true

	case "NrsignupNewsroom.charter":
		if e.complexity.NrsignupNewsroom.Charter == nil {
			break
		}

		return e.complexity.NrsignupNewsroom.Charter(childComplexity), true

	case "NrsignupNewsroom.charterLastUpdated":
		if e.complexity.NrsignupNewsroom.CharterLastUpdated == nil {
			break
		}

		return e.complexity.NrsignupNewsroom.CharterLastUpdated(childComplexity), true

	case "NrsignupNewsroom.grantRequested":
		if e.complexity.NrsignupNewsroom.GrantRequested == nil {
			break
		}

		return e.complexity.NrsignupNewsroom.GrantRequested(childComplexity), true

	case "NrsignupNewsroom.grantApproved":
		if e.complexity.NrsignupNewsroom.GrantApproved == nil {
			break
		}

		return e.complexity.NrsignupNewsroom.GrantApproved(childComplexity), true

	case "NrsignupNewsroom.newsroomDeployTx":
		if e.complexity.NrsignupNewsroom.NewsroomDeployTx == nil {
			break
		}

		return e.complexity.NrsignupNewsroom.NewsroomDeployTx(childComplexity), true

	case "NrsignupNewsroom.newsroomAddress":
		if e.complexity.NrsignupNewsroom.NewsroomAddress == nil {
			break
		}

		return e.complexity.NrsignupNewsroom.NewsroomAddress(childComplexity), true

	case "NrsignupNewsroom.newsroomName":
		if e.complexity.NrsignupNewsroom.NewsroomName == nil {
			break
		}

		return e.complexity.NrsignupNewsroom.NewsroomName(childComplexity), true

	case "NrsignupNewsroom.tcrApplyTx":
		if e.complexity.NrsignupNewsroom.TcrApplyTx == nil {
			break
		}

		return e.complexity.NrsignupNewsroom.TcrApplyTx(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "Poll.commitEndDate":
		if e.complexity.Poll.CommitEndDate == nil {
			break
		}

		return e.complexity.Poll.CommitEndDate(childComplexity), true

	case "Poll.revealEndDate":
		if e.complexity.Poll.RevealEndDate == nil {
			break
		}

		return e.complexity.Poll.RevealEndDate(childComplexity), true

	case "Poll.voteQuorum":
		if e.complexity.Poll.VoteQuorum == nil {
			break
		}

		return e.complexity.Poll.VoteQuorum(childComplexity), true

	case "Poll.votesFor":
		if e.complexity.Poll.VotesFor == nil {
			break
		}

		return e.complexity.Poll.VotesFor(childComplexity), true

	case "Poll.votesAgainst":
		if e.complexity.Poll.VotesAgainst == nil {
			break
		}

		return e.complexity.Poll.VotesAgainst(childComplexity), true

	case "Query.articles":
		if e.complexity.Query.Articles == nil {
			break
		}

		args, err := field_Query_articles_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Articles(childComplexity, args["addr"].(*string), args["first"].(*int), args["after"].(*string), args["contentID"].(*int), args["revisionID"].(*int), args["lowercaseAddr"].(*bool)), true

	case "Query.challenge":
		if e.complexity.Query.Challenge == nil {
			break
		}

		args, err := field_Query_challenge_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Challenge(childComplexity, args["id"].(int), args["lowercaseAddr"].(*bool)), true

	case "Query.governanceEvents":
		if e.complexity.Query.GovernanceEvents == nil {
			break
		}

		args, err := field_Query_governanceEvents_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GovernanceEvents(childComplexity, args["addr"].(*string), args["after"].(*string), args["creationDate"].(*DateRange), args["first"].(*int), args["lowercaseAddr"].(*bool)), true

	case "Query.governanceEventsTxHash":
		if e.complexity.Query.GovernanceEventsTxHash == nil {
			break
		}

		args, err := field_Query_governanceEventsTxHash_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GovernanceEventsTxHash(childComplexity, args["txHash"].(string), args["lowercaseAddr"].(*bool)), true

	case "Query.listing":
		if e.complexity.Query.Listing == nil {
			break
		}

		args, err := field_Query_listing_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Listing(childComplexity, args["addr"].(string), args["lowercaseAddr"].(*bool)), true

	case "Query.listings":
		if e.complexity.Query.Listings == nil {
			break
		}

		args, err := field_Query_listings_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Listings(childComplexity, args["first"].(*int), args["after"].(*string), args["whitelistedOnly"].(*bool), args["rejectedOnly"].(*bool), args["activeChallenge"].(*bool), args["currentApplication"].(*bool), args["lowercaseAddr"].(*bool), args["sortBy"].(*model.SortByType), args["sortDesc"].(*bool)), true

	case "Query.tcrChallenge":
		if e.complexity.Query.TcrChallenge == nil {
			break
		}

		args, err := field_Query_tcrChallenge_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TcrChallenge(childComplexity, args["id"].(int), args["lowercaseAddr"].(*bool)), true

	case "Query.tcrGovernanceEvents":
		if e.complexity.Query.TcrGovernanceEvents == nil {
			break
		}

		args, err := field_Query_tcrGovernanceEvents_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TcrGovernanceEvents(childComplexity, args["addr"].(*string), args["after"].(*string), args["creationDate"].(*DateRange), args["first"].(*int), args["lowercaseAddr"].(*bool)), true

	case "Query.tcrGovernanceEventsTxHash":
		if e.complexity.Query.TcrGovernanceEventsTxHash == nil {
			break
		}

		args, err := field_Query_tcrGovernanceEventsTxHash_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TcrGovernanceEventsTxHash(childComplexity, args["txHash"].(string), args["lowercaseAddr"].(*bool)), true

	case "Query.tcrListing":
		if e.complexity.Query.TcrListing == nil {
			break
		}

		args, err := field_Query_tcrListing_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TcrListing(childComplexity, args["addr"].(string), args["lowercaseAddr"].(*bool)), true

	case "Query.tcrListings":
		if e.complexity.Query.TcrListings == nil {
			break
		}

		args, err := field_Query_tcrListings_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TcrListings(childComplexity, args["first"].(*int), args["after"].(*string), args["whitelistedOnly"].(*bool), args["rejectedOnly"].(*bool), args["activeChallenge"].(*bool), args["currentApplication"].(*bool), args["lowercaseAddr"].(*bool), args["sortBy"].(*model.SortByType), args["sortDesc"].(*bool)), true

	case "Query.newsroomArticles":
		if e.complexity.Query.NewsroomArticles == nil {
			break
		}

		args, err := field_Query_newsroomArticles_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NewsroomArticles(childComplexity, args["addr"].(*string), args["first"].(*int), args["after"].(*string), args["contentID"].(*int), args["revisionID"].(*int), args["lowercaseAddr"].(*bool)), true

	case "Query.nrsignupNewsroom":
		if e.complexity.Query.NrsignupNewsroom == nil {
			break
		}

		return e.complexity.Query.NrsignupNewsroom(childComplexity), true

	case "Query.userChallengeData":
		if e.complexity.Query.UserChallengeData == nil {
			break
		}

		args, err := field_Query_userChallengeData_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserChallengeData(childComplexity, args["userAddr"].(*string), args["pollID"].(*int), args["canUserCollect"].(*bool), args["canUserRescue"].(*bool), args["canUserReveal"].(*bool)), true

	case "Query.currentUser":
		if e.complexity.Query.CurrentUser == nil {
			break
		}

		return e.complexity.Query.CurrentUser(childComplexity), true

	case "Query.storefrontEthPrice":
		if e.complexity.Query.StorefrontEthPrice == nil {
			break
		}

		return e.complexity.Query.StorefrontEthPrice(childComplexity), true

	case "Query.storefrontCvlPrice":
		if e.complexity.Query.StorefrontCvlPrice == nil {
			break
		}

		return e.complexity.Query.StorefrontCvlPrice(childComplexity), true

	case "Query.storefrontCvlQuoteUsd":
		if e.complexity.Query.StorefrontCvlQuoteUsd == nil {
			break
		}

		args, err := field_Query_storefrontCvlQuoteUsd_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.StorefrontCvlQuoteUsd(childComplexity, args["usdToSpend"].(float64)), true

	case "Query.storefrontCvlQuoteTokens":
		if e.complexity.Query.StorefrontCvlQuoteTokens == nil {
			break
		}

		args, err := field_Query_storefrontCvlQuoteTokens_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.StorefrontCvlQuoteTokens(childComplexity, args["tokensToBuy"].(float64)), true

	case "Query.jsonb":
		if e.complexity.Query.Jsonb == nil {
			break
		}

		args, err := field_Query_jsonb_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Jsonb(childComplexity, args["id"].(*string)), true

	case "RosterMember.name":
		if e.complexity.RosterMember.Name == nil {
			break
		}

		return e.complexity.RosterMember.Name(childComplexity), true

	case "RosterMember.role":
		if e.complexity.RosterMember.Role == nil {
			break
		}

		return e.complexity.RosterMember.Role(childComplexity), true

	case "RosterMember.bio":
		if e.complexity.RosterMember.Bio == nil {
			break
		}

		return e.complexity.RosterMember.Bio(childComplexity), true

	case "RosterMember.ethAddress":
		if e.complexity.RosterMember.EthAddress == nil {
			break
		}

		return e.complexity.RosterMember.EthAddress(childComplexity), true

	case "RosterMember.socialUrls":
		if e.complexity.RosterMember.SocialUrls == nil {
			break
		}

		return e.complexity.RosterMember.SocialUrls(childComplexity), true

	case "RosterMember.avatarUrl":
		if e.complexity.RosterMember.AvatarUrl == nil {
			break
		}

		return e.complexity.RosterMember.AvatarUrl(childComplexity), true

	case "RosterMember.signature":
		if e.complexity.RosterMember.Signature == nil {
			break
		}

		return e.complexity.RosterMember.Signature(childComplexity), true

	case "User.uid":
		if e.complexity.User.Uid == nil {
			break
		}

		return e.complexity.User.Uid(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.ethAddress":
		if e.complexity.User.EthAddress == nil {
			break
		}

		return e.complexity.User.EthAddress(childComplexity), true

	case "User.quizPayload":
		if e.complexity.User.QuizPayload == nil {
			break
		}

		return e.complexity.User.QuizPayload(childComplexity), true

	case "User.quizStatus":
		if e.complexity.User.QuizStatus == nil {
			break
		}

		return e.complexity.User.QuizStatus(childComplexity), true

	case "User.civilianWhitelistTxID":
		if e.complexity.User.CivilianWhitelistTxId == nil {
			break
		}

		return e.complexity.User.CivilianWhitelistTxId(childComplexity), true

	case "User.nrStep":
		if e.complexity.User.NrStep == nil {
			break
		}

		return e.complexity.User.NrStep(childComplexity), true

	case "User.nrFurthestStep":
		if e.complexity.User.NrFurthestStep == nil {
			break
		}

		return e.complexity.User.NrFurthestStep(childComplexity), true

	case "User.nrLastSeen":
		if e.complexity.User.NrLastSeen == nil {
			break
		}

		return e.complexity.User.NrLastSeen(childComplexity), true

	case "UserChallengeVoteData.pollID":
		if e.complexity.UserChallengeVoteData.PollId == nil {
			break
		}

		return e.complexity.UserChallengeVoteData.PollId(childComplexity), true

	case "UserChallengeVoteData.pollRevealDate":
		if e.complexity.UserChallengeVoteData.PollRevealDate == nil {
			break
		}

		return e.complexity.UserChallengeVoteData.PollRevealDate(childComplexity), true

	case "UserChallengeVoteData.pollType":
		if e.complexity.UserChallengeVoteData.PollType == nil {
			break
		}

		return e.complexity.UserChallengeVoteData.PollType(childComplexity), true

	case "UserChallengeVoteData.userAddress":
		if e.complexity.UserChallengeVoteData.UserAddress == nil {
			break
		}

		return e.complexity.UserChallengeVoteData.UserAddress(childComplexity), true

	case "UserChallengeVoteData.userDidCommit":
		if e.complexity.UserChallengeVoteData.UserDidCommit == nil {
			break
		}

		return e.complexity.UserChallengeVoteData.UserDidCommit(childComplexity), true

	case "UserChallengeVoteData.userDidReveal":
		if e.complexity.UserChallengeVoteData.UserDidReveal == nil {
			break
		}

		return e.complexity.UserChallengeVoteData.UserDidReveal(childComplexity), true

	case "UserChallengeVoteData.didUserCollect":
		if e.complexity.UserChallengeVoteData.DidUserCollect == nil {
			break
		}

		return e.complexity.UserChallengeVoteData.DidUserCollect(childComplexity), true

	case "UserChallengeVoteData.didUserRescue":
		if e.complexity.UserChallengeVoteData.DidUserRescue == nil {
			break
		}

		return e.complexity.UserChallengeVoteData.DidUserRescue(childComplexity), true

	case "UserChallengeVoteData.didCollectAmount":
		if e.complexity.UserChallengeVoteData.DidCollectAmount == nil {
			break
		}

		return e.complexity.UserChallengeVoteData.DidCollectAmount(childComplexity), true

	case "UserChallengeVoteData.isVoterWinner":
		if e.complexity.UserChallengeVoteData.IsVoterWinner == nil {
			break
		}

		return e.complexity.UserChallengeVoteData.IsVoterWinner(childComplexity), true

	case "UserChallengeVoteData.pollIsPassed":
		if e.complexity.UserChallengeVoteData.PollIsPassed == nil {
			break
		}

		return e.complexity.UserChallengeVoteData.PollIsPassed(childComplexity), true

	case "UserChallengeVoteData.salt":
		if e.complexity.UserChallengeVoteData.Salt == nil {
			break
		}

		return e.complexity.UserChallengeVoteData.Salt(childComplexity), true

	case "UserChallengeVoteData.choice":
		if e.complexity.UserChallengeVoteData.Choice == nil {
			break
		}

		return e.complexity.UserChallengeVoteData.Choice(childComplexity), true

	case "UserChallengeVoteData.numTokens":
		if e.complexity.UserChallengeVoteData.NumTokens == nil {
			break
		}

		return e.complexity.UserChallengeVoteData.NumTokens(childComplexity), true

	case "UserChallengeVoteData.voterReward":
		if e.complexity.UserChallengeVoteData.VoterReward == nil {
			break
		}

		return e.complexity.UserChallengeVoteData.VoterReward(childComplexity), true

	case "UserChallengeVoteData.parentChallengeID":
		if e.complexity.UserChallengeVoteData.ParentChallengeId == nil {
			break
		}

		return e.complexity.UserChallengeVoteData.ParentChallengeId(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Query(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Query(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:       buf,
		Errors:     ec.Errors,
		Extensions: ec.Extensions}
}

func (e *executableSchema) Mutation(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Mutation(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:       buf,
		Errors:     ec.Errors,
		Extensions: ec.Extensions,
	}
}

func (e *executableSchema) Subscription(ctx context.Context, op *ast.OperationDefinition) func() *graphql.Response {
	return graphql.OneShot(graphql.ErrorResponse(ctx, "subscriptions are not supported"))
}

type executionContext struct {
	*graphql.RequestContext
	*executableSchema
}

var appealImplementors = []string{"Appeal"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Appeal(ctx context.Context, sel ast.SelectionSet, obj *model.Appeal) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, appealImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Appeal")
		case "requester":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Appeal_requester(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "appealFeePaid":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Appeal_appealFeePaid(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "appealPhaseExpiry":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Appeal_appealPhaseExpiry(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "appealGranted":
			out.Values[i] = ec._Appeal_appealGranted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "appealOpenToChallengeExpiry":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Appeal_appealOpenToChallengeExpiry(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "statement":
			out.Values[i] = ec._Appeal_statement(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "appealChallengeID":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Appeal_appealChallengeID(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "appealChallenge":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Appeal_appealChallenge(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "appealGrantedStatementURI":
			out.Values[i] = ec._Appeal_appealGrantedStatementURI(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Appeal_requester(ctx context.Context, field graphql.CollectedField, obj *model.Appeal) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Appeal",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Appeal().Requester(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Appeal_appealFeePaid(ctx context.Context, field graphql.CollectedField, obj *model.Appeal) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Appeal",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Appeal().AppealFeePaid(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Appeal_appealPhaseExpiry(ctx context.Context, field graphql.CollectedField, obj *model.Appeal) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Appeal",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Appeal().AppealPhaseExpiry(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _Appeal_appealGranted(ctx context.Context, field graphql.CollectedField, obj *model.Appeal) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Appeal",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppealGranted(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) _Appeal_appealOpenToChallengeExpiry(ctx context.Context, field graphql.CollectedField, obj *model.Appeal) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Appeal",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Appeal().AppealOpenToChallengeExpiry(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _Appeal_statement(ctx context.Context, field graphql.CollectedField, obj *model.Appeal) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Appeal",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Statement(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Appeal_appealChallengeID(ctx context.Context, field graphql.CollectedField, obj *model.Appeal) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Appeal",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Appeal().AppealChallengeID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _Appeal_appealChallenge(ctx context.Context, field graphql.CollectedField, obj *model.Appeal) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Appeal",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Appeal().AppealChallenge(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Challenge)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Challenge(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Appeal_appealGrantedStatementURI(ctx context.Context, field graphql.CollectedField, obj *model.Appeal) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Appeal",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppealGrantedStatementURI(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

var articlePayloadImplementors = []string{"ArticlePayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ArticlePayload(ctx context.Context, sel ast.SelectionSet, obj *ArticlePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, articlePayloadImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ArticlePayload")
		case "key":
			out.Values[i] = ec._ArticlePayload_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "value":
			out.Values[i] = ec._ArticlePayload_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ArticlePayload_key(ctx context.Context, field graphql.CollectedField, obj *ArticlePayload) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "ArticlePayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ArticlePayload_value(ctx context.Context, field graphql.CollectedField, obj *ArticlePayload) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "ArticlePayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ArticlePayloadValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return res
}

var authLoginResponseImplementors = []string{"AuthLoginResponse"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _AuthLoginResponse(ctx context.Context, sel ast.SelectionSet, obj *auth.LoginResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, authLoginResponseImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthLoginResponse")
		case "token":
			out.Values[i] = ec._AuthLoginResponse_token(ctx, field, obj)
		case "refreshToken":
			out.Values[i] = ec._AuthLoginResponse_refreshToken(ctx, field, obj)
		case "uid":
			out.Values[i] = ec._AuthLoginResponse_uid(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _AuthLoginResponse_token(ctx context.Context, field graphql.CollectedField, obj *auth.LoginResponse) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "AuthLoginResponse",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _AuthLoginResponse_refreshToken(ctx context.Context, field graphql.CollectedField, obj *auth.LoginResponse) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "AuthLoginResponse",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RefreshToken, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _AuthLoginResponse_uid(ctx context.Context, field graphql.CollectedField, obj *auth.LoginResponse) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "AuthLoginResponse",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

var blockDataImplementors = []string{"BlockData"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BlockData(ctx context.Context, sel ast.SelectionSet, obj *BlockData) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, blockDataImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BlockData")
		case "blockNumber":
			out.Values[i] = ec._BlockData_blockNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "txHash":
			out.Values[i] = ec._BlockData_txHash(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "txIndex":
			out.Values[i] = ec._BlockData_txIndex(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "blockHash":
			out.Values[i] = ec._BlockData_blockHash(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "index":
			out.Values[i] = ec._BlockData_index(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BlockData_blockNumber(ctx context.Context, field graphql.CollectedField, obj *BlockData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "BlockData",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlockNumber, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _BlockData_txHash(ctx context.Context, field graphql.CollectedField, obj *BlockData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "BlockData",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxHash, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BlockData_txIndex(ctx context.Context, field graphql.CollectedField, obj *BlockData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "BlockData",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxIndex, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _BlockData_blockHash(ctx context.Context, field graphql.CollectedField, obj *BlockData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "BlockData",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlockHash, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BlockData_index(ctx context.Context, field graphql.CollectedField, obj *BlockData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "BlockData",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Index, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

var challengeImplementors = []string{"Challenge"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Challenge(ctx context.Context, sel ast.SelectionSet, obj *model.Challenge) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, challengeImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Challenge")
		case "challengeID":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Challenge_challengeID(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "listingAddress":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Challenge_listingAddress(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "statement":
			out.Values[i] = ec._Challenge_statement(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "rewardPool":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Challenge_rewardPool(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "challenger":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Challenge_challenger(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "resolved":
			out.Values[i] = ec._Challenge_resolved(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "stake":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Challenge_stake(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "totalTokens":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Challenge_totalTokens(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "poll":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Challenge_poll(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "requestAppealExpiry":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Challenge_requestAppealExpiry(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "appeal":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Challenge_appeal(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "lastUpdatedDateTs":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Challenge_lastUpdatedDateTs(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Challenge_challengeID(ctx context.Context, field graphql.CollectedField, obj *model.Challenge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Challenge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Challenge().ChallengeID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _Challenge_listingAddress(ctx context.Context, field graphql.CollectedField, obj *model.Challenge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Challenge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Challenge().ListingAddress(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Challenge_statement(ctx context.Context, field graphql.CollectedField, obj *model.Challenge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Challenge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Statement(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Challenge_rewardPool(ctx context.Context, field graphql.CollectedField, obj *model.Challenge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Challenge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Challenge().RewardPool(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Challenge_challenger(ctx context.Context, field graphql.CollectedField, obj *model.Challenge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Challenge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Challenge().Challenger(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Challenge_resolved(ctx context.Context, field graphql.CollectedField, obj *model.Challenge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Challenge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resolved(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) _Challenge_stake(ctx context.Context, field graphql.CollectedField, obj *model.Challenge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Challenge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Challenge().Stake(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Challenge_totalTokens(ctx context.Context, field graphql.CollectedField, obj *model.Challenge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Challenge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Challenge().TotalTokens(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Challenge_poll(ctx context.Context, field graphql.CollectedField, obj *model.Challenge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Challenge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Challenge().Poll(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Poll)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Poll(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Challenge_requestAppealExpiry(ctx context.Context, field graphql.CollectedField, obj *model.Challenge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Challenge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Challenge().RequestAppealExpiry(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _Challenge_appeal(ctx context.Context, field graphql.CollectedField, obj *model.Challenge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Challenge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Challenge().Appeal(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Appeal)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Appeal(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Challenge_lastUpdatedDateTs(ctx context.Context, field graphql.CollectedField, obj *model.Challenge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Challenge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Challenge().LastUpdatedDateTs(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

var charterImplementors = []string{"Charter"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Charter(ctx context.Context, sel ast.SelectionSet, obj *model.Charter) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, charterImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Charter")
		case "uri":
			out.Values[i] = ec._Charter_uri(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "contentID":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Charter_contentID(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "revisionID":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Charter_revisionID(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "signature":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Charter_signature(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "author":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Charter_author(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "contentHash":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Charter_contentHash(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "timestamp":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Charter_timestamp(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Charter_uri(ctx context.Context, field graphql.CollectedField, obj *model.Charter) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Charter",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URI(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Charter_contentID(ctx context.Context, field graphql.CollectedField, obj *model.Charter) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Charter",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Charter().ContentID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _Charter_revisionID(ctx context.Context, field graphql.CollectedField, obj *model.Charter) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Charter",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Charter().RevisionID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _Charter_signature(ctx context.Context, field graphql.CollectedField, obj *model.Charter) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Charter",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Charter().Signature(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Charter_author(ctx context.Context, field graphql.CollectedField, obj *model.Charter) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Charter",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Charter().Author(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Charter_contentHash(ctx context.Context, field graphql.CollectedField, obj *model.Charter) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Charter",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Charter().ContentHash(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Charter_timestamp(ctx context.Context, field graphql.CollectedField, obj *model.Charter) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Charter",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Charter().Timestamp(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

var charterContentImplementors = []string{"CharterContent"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _CharterContent(ctx context.Context, sel ast.SelectionSet, obj *nrsignup.Charter) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, charterContentImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CharterContent")
		case "name":
			out.Values[i] = ec._CharterContent_name(ctx, field, obj)
		case "logoUrl":
			out.Values[i] = ec._CharterContent_logoUrl(ctx, field, obj)
		case "newsroomUrl":
			out.Values[i] = ec._CharterContent_newsroomUrl(ctx, field, obj)
		case "tagline":
			out.Values[i] = ec._CharterContent_tagline(ctx, field, obj)
		case "roster":
			out.Values[i] = ec._CharterContent_roster(ctx, field, obj)
		case "signatures":
			out.Values[i] = ec._CharterContent_signatures(ctx, field, obj)
		case "mission":
			out.Values[i] = ec._CharterContent_mission(ctx, field, obj)
		case "socialUrls":
			out.Values[i] = ec._CharterContent_socialUrls(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _CharterContent_name(ctx context.Context, field graphql.CollectedField, obj *nrsignup.Charter) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharterContent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _CharterContent_logoUrl(ctx context.Context, field graphql.CollectedField, obj *nrsignup.Charter) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharterContent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogoURL, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _CharterContent_newsroomUrl(ctx context.Context, field graphql.CollectedField, obj *nrsignup.Charter) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharterContent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewsroomURL, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _CharterContent_tagline(ctx context.Context, field graphql.CollectedField, obj *nrsignup.Charter) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharterContent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tagline, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _CharterContent_roster(ctx context.Context, field graphql.CollectedField, obj *nrsignup.Charter) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharterContent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roster, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*nrsignup.CharterRosterMember)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._RosterMember(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _CharterContent_signatures(ctx context.Context, field graphql.CollectedField, obj *nrsignup.Charter) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharterContent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Signatures, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*nrsignup.CharterConstitutionSignature)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._ConstitutionSignature(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _CharterContent_mission(ctx context.Context, field graphql.CollectedField, obj *nrsignup.Charter) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharterContent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mission, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*nrsignup.CharterMission)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._CharterMission(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _CharterContent_socialUrls(ctx context.Context, field graphql.CollectedField, obj *nrsignup.Charter) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharterContent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SocialURLs, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*nrsignup.CharterSocialURLs)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._CharterSocialUrls(ctx, field.Selections, res)
}

var charterMissionImplementors = []string{"CharterMission"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _CharterMission(ctx context.Context, sel ast.SelectionSet, obj *nrsignup.CharterMission) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, charterMissionImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CharterMission")
		case "purpose":
			out.Values[i] = ec._CharterMission_purpose(ctx, field, obj)
		case "structure":
			out.Values[i] = ec._CharterMission_structure(ctx, field, obj)
		case "revenue":
			out.Values[i] = ec._CharterMission_revenue(ctx, field, obj)
		case "encumbrances":
			out.Values[i] = ec._CharterMission_encumbrances(ctx, field, obj)
		case "miscellaneous":
			out.Values[i] = ec._CharterMission_miscellaneous(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _CharterMission_purpose(ctx context.Context, field graphql.CollectedField, obj *nrsignup.CharterMission) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharterMission",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Purpose, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _CharterMission_structure(ctx context.Context, field graphql.CollectedField, obj *nrsignup.CharterMission) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharterMission",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Structure, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _CharterMission_revenue(ctx context.Context, field graphql.CollectedField, obj *nrsignup.CharterMission) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharterMission",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Revenue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _CharterMission_encumbrances(ctx context.Context, field graphql.CollectedField, obj *nrsignup.CharterMission) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharterMission",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Encumbrances, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _CharterMission_miscellaneous(ctx context.Context, field graphql.CollectedField, obj *nrsignup.CharterMission) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharterMission",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Miscellaneous, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

var charterSocialUrlsImplementors = []string{"CharterSocialUrls"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _CharterSocialUrls(ctx context.Context, sel ast.SelectionSet, obj *nrsignup.CharterSocialURLs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, charterSocialUrlsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CharterSocialUrls")
		case "twitter":
			out.Values[i] = ec._CharterSocialUrls_twitter(ctx, field, obj)
		case "facebook":
			out.Values[i] = ec._CharterSocialUrls_facebook(ctx, field, obj)
		case "instagram":
			out.Values[i] = ec._CharterSocialUrls_instagram(ctx, field, obj)
		case "linkedIn":
			out.Values[i] = ec._CharterSocialUrls_linkedIn(ctx, field, obj)
		case "youTube":
			out.Values[i] = ec._CharterSocialUrls_youTube(ctx, field, obj)
		case "email":
			out.Values[i] = ec._CharterSocialUrls_email(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _CharterSocialUrls_twitter(ctx context.Context, field graphql.CollectedField, obj *nrsignup.CharterSocialURLs) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharterSocialUrls",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Twitter, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _CharterSocialUrls_facebook(ctx context.Context, field graphql.CollectedField, obj *nrsignup.CharterSocialURLs) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharterSocialUrls",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Facebook, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _CharterSocialUrls_instagram(ctx context.Context, field graphql.CollectedField, obj *nrsignup.CharterSocialURLs) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharterSocialUrls",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Instagram, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _CharterSocialUrls_linkedIn(ctx context.Context, field graphql.CollectedField, obj *nrsignup.CharterSocialURLs) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharterSocialUrls",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Linkedin, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _CharterSocialUrls_youTube(ctx context.Context, field graphql.CollectedField, obj *nrsignup.CharterSocialURLs) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharterSocialUrls",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Youtube, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _CharterSocialUrls_email(ctx context.Context, field graphql.CollectedField, obj *nrsignup.CharterSocialURLs) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharterSocialUrls",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

var constitutionSignatureImplementors = []string{"ConstitutionSignature"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ConstitutionSignature(ctx context.Context, sel ast.SelectionSet, obj *nrsignup.CharterConstitutionSignature) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, constitutionSignatureImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstitutionSignature")
		case "signer":
			out.Values[i] = ec._ConstitutionSignature_signer(ctx, field, obj)
		case "signature":
			out.Values[i] = ec._ConstitutionSignature_signature(ctx, field, obj)
		case "message":
			out.Values[i] = ec._ConstitutionSignature_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ConstitutionSignature_signer(ctx context.Context, field graphql.CollectedField, obj *nrsignup.CharterConstitutionSignature) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "ConstitutionSignature",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Signer, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ConstitutionSignature_signature(ctx context.Context, field graphql.CollectedField, obj *nrsignup.CharterConstitutionSignature) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "ConstitutionSignature",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Signature, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ConstitutionSignature_message(ctx context.Context, field graphql.CollectedField, obj *nrsignup.CharterConstitutionSignature) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "ConstitutionSignature",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

var contentRevisionImplementors = []string{"ContentRevision"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ContentRevision(ctx context.Context, sel ast.SelectionSet, obj *model.ContentRevision) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, contentRevisionImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContentRevision")
		case "listingAddress":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._ContentRevision_listingAddress(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "payload":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._ContentRevision_payload(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "payloadHash":
			out.Values[i] = ec._ContentRevision_payloadHash(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "editorAddress":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._ContentRevision_editorAddress(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "contractContentId":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._ContentRevision_contractContentId(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "contractRevisionId":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._ContentRevision_contractRevisionId(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "revisionUri":
			out.Values[i] = ec._ContentRevision_revisionUri(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "revisionDate":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._ContentRevision_revisionDate(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ContentRevision_listingAddress(ctx context.Context, field graphql.CollectedField, obj *model.ContentRevision) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "ContentRevision",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ContentRevision().ListingAddress(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ContentRevision_payload(ctx context.Context, field graphql.CollectedField, obj *model.ContentRevision) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "ContentRevision",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ContentRevision().Payload(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]ArticlePayload)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._ArticlePayload(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _ContentRevision_payloadHash(ctx context.Context, field graphql.CollectedField, obj *model.ContentRevision) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "ContentRevision",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayloadHash(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ContentRevision_editorAddress(ctx context.Context, field graphql.CollectedField, obj *model.ContentRevision) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "ContentRevision",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ContentRevision().EditorAddress(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ContentRevision_contractContentId(ctx context.Context, field graphql.CollectedField, obj *model.ContentRevision) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "ContentRevision",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ContentRevision().ContractContentID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _ContentRevision_contractRevisionId(ctx context.Context, field graphql.CollectedField, obj *model.ContentRevision) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "ContentRevision",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ContentRevision().ContractRevisionID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _ContentRevision_revisionUri(ctx context.Context, field graphql.CollectedField, obj *model.ContentRevision) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "ContentRevision",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RevisionURI(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ContentRevision_revisionDate(ctx context.Context, field graphql.CollectedField, obj *model.ContentRevision) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "ContentRevision",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ContentRevision().RevisionDate(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

var governanceEventImplementors = []string{"GovernanceEvent"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GovernanceEvent(ctx context.Context, sel ast.SelectionSet, obj *model.GovernanceEvent) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, governanceEventImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GovernanceEvent")
		case "listingAddress":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._GovernanceEvent_listingAddress(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "metadata":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._GovernanceEvent_metadata(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "governanceEventType":
			out.Values[i] = ec._GovernanceEvent_governanceEventType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "creationDate":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._GovernanceEvent_creationDate(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "lastUpdatedDate":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._GovernanceEvent_lastUpdatedDate(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "eventHash":
			out.Values[i] = ec._GovernanceEvent_eventHash(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "blockData":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._GovernanceEvent_blockData(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "listing":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._GovernanceEvent_listing(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GovernanceEvent_listingAddress(ctx context.Context, field graphql.CollectedField, obj *model.GovernanceEvent) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "GovernanceEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GovernanceEvent().ListingAddress(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _GovernanceEvent_metadata(ctx context.Context, field graphql.CollectedField, obj *model.GovernanceEvent) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "GovernanceEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GovernanceEvent().Metadata(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]Metadata)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._Metadata(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GovernanceEvent_governanceEventType(ctx context.Context, field graphql.CollectedField, obj *model.GovernanceEvent) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "GovernanceEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GovernanceEventType(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _GovernanceEvent_creationDate(ctx context.Context, field graphql.CollectedField, obj *model.GovernanceEvent) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "GovernanceEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GovernanceEvent().CreationDate(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _GovernanceEvent_lastUpdatedDate(ctx context.Context, field graphql.CollectedField, obj *model.GovernanceEvent) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "GovernanceEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GovernanceEvent().LastUpdatedDate(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _GovernanceEvent_eventHash(ctx context.Context, field graphql.CollectedField, obj *model.GovernanceEvent) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "GovernanceEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventHash(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _GovernanceEvent_blockData(ctx context.Context, field graphql.CollectedField, obj *model.GovernanceEvent) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "GovernanceEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GovernanceEvent().BlockData(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(BlockData)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	return ec._BlockData(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _GovernanceEvent_listing(ctx context.Context, field graphql.CollectedField, obj *model.GovernanceEvent) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "GovernanceEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GovernanceEvent().Listing(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.Listing)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	return ec._Listing(ctx, field.Selections, &res)
}

var governanceEventEdgeImplementors = []string{"GovernanceEventEdge"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GovernanceEventEdge(ctx context.Context, sel ast.SelectionSet, obj *GovernanceEventEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, governanceEventEdgeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GovernanceEventEdge")
		case "cursor":
			out.Values[i] = ec._GovernanceEventEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "node":
			out.Values[i] = ec._GovernanceEventEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GovernanceEventEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *GovernanceEventEdge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "GovernanceEventEdge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _GovernanceEventEdge_node(ctx context.Context, field graphql.CollectedField, obj *GovernanceEventEdge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "GovernanceEventEdge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.GovernanceEvent)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	return ec._GovernanceEvent(ctx, field.Selections, &res)
}

var governanceEventResultCursorImplementors = []string{"GovernanceEventResultCursor"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GovernanceEventResultCursor(ctx context.Context, sel ast.SelectionSet, obj *GovernanceEventResultCursor) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, governanceEventResultCursorImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GovernanceEventResultCursor")
		case "edges":
			out.Values[i] = ec._GovernanceEventResultCursor_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "pageInfo":
			out.Values[i] = ec._GovernanceEventResultCursor_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GovernanceEventResultCursor_edges(ctx context.Context, field graphql.CollectedField, obj *GovernanceEventResultCursor) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "GovernanceEventResultCursor",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*GovernanceEventEdge)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GovernanceEventEdge(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GovernanceEventResultCursor_pageInfo(ctx context.Context, field graphql.CollectedField, obj *GovernanceEventResultCursor) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "GovernanceEventResultCursor",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(PageInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	return ec._PageInfo(ctx, field.Selections, &res)
}

var jsonFieldImplementors = []string{"JsonField"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _JsonField(ctx context.Context, sel ast.SelectionSet, obj *jsonstore.JSONField) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, jsonFieldImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JsonField")
		case "key":
			out.Values[i] = ec._JsonField_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "value":
			out.Values[i] = ec._JsonField_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _JsonField_key(ctx context.Context, field graphql.CollectedField, obj *jsonstore.JSONField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "JsonField",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _JsonField_value(ctx context.Context, field graphql.CollectedField, obj *jsonstore.JSONField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "JsonField",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*jsonstore.JSONFieldValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return *res
}

var jsonbImplementors = []string{"Jsonb"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Jsonb(ctx context.Context, sel ast.SelectionSet, obj *jsonstore.JSONb) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, jsonbImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Jsonb")
		case "id":
			out.Values[i] = ec._Jsonb_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "hash":
			out.Values[i] = ec._Jsonb_hash(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "createdDate":
			out.Values[i] = ec._Jsonb_createdDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "lastUpdatedDate":
			out.Values[i] = ec._Jsonb_lastUpdatedDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "rawJson":
			out.Values[i] = ec._Jsonb_rawJson(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "json":
			out.Values[i] = ec._Jsonb_json(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Jsonb_id(ctx context.Context, field graphql.CollectedField, obj *jsonstore.JSONb) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Jsonb",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Jsonb_hash(ctx context.Context, field graphql.CollectedField, obj *jsonstore.JSONb) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Jsonb",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hash, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Jsonb_createdDate(ctx context.Context, field graphql.CollectedField, obj *jsonstore.JSONb) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Jsonb",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDate, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _Jsonb_lastUpdatedDate(ctx context.Context, field graphql.CollectedField, obj *jsonstore.JSONb) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Jsonb",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdatedDate, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _Jsonb_rawJson(ctx context.Context, field graphql.CollectedField, obj *jsonstore.JSONb) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Jsonb",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RawJSON, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Jsonb_json(ctx context.Context, field graphql.CollectedField, obj *jsonstore.JSONb) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Jsonb",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JSON, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*jsonstore.JSONField)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					if !ec.HasError(rctx) {
						ec.Errorf(ctx, "must not be null")
					}
					return graphql.Null
				}

				return ec._JsonField(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var listingImplementors = []string{"Listing"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Listing(ctx context.Context, sel ast.SelectionSet, obj *model.Listing) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, listingImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Listing")
		case "name":
			out.Values[i] = ec._Listing_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "contractAddress":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Listing_contractAddress(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "whitelisted":
			out.Values[i] = ec._Listing_whitelisted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "lastGovState":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Listing_lastGovState(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "url":
			out.Values[i] = ec._Listing_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "charter":
			out.Values[i] = ec._Listing_charter(ctx, field, obj)
		case "ownerAddresses":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Listing_ownerAddresses(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "owner":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Listing_owner(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "contributorAddresses":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Listing_contributorAddresses(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "createdDate":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Listing_createdDate(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "applicationDate":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Listing_applicationDate(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "approvalDate":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Listing_approvalDate(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "lastUpdatedDate":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Listing_lastUpdatedDate(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "appExpiry":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Listing_appExpiry(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "unstakedDeposit":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Listing_unstakedDeposit(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "challengeID":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Listing_challengeID(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "challenge":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Listing_challenge(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "prevChallenge":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Listing_prevChallenge(ctx, field, obj)
				wg.Done()
			}(i, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Listing_name(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Listing_contractAddress(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Listing().ContractAddress(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Listing_whitelisted(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Whitelisted(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) _Listing_lastGovState(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Listing().LastGovState(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Listing_url(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Listing_charter(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Charter(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Charter)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Charter(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Listing_ownerAddresses(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Listing().OwnerAddresses(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return graphql.MarshalString(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Listing_owner(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Listing().Owner(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Listing_contributorAddresses(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Listing().ContributorAddresses(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return graphql.MarshalString(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Listing_createdDate(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Listing().CreatedDate(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _Listing_applicationDate(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Listing().ApplicationDate(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Listing_approvalDate(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Listing().ApprovalDate(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Listing_lastUpdatedDate(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Listing().LastUpdatedDate(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _Listing_appExpiry(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Listing().AppExpiry(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _Listing_unstakedDeposit(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Listing().UnstakedDeposit(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Listing_challengeID(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Listing().ChallengeID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _Listing_challenge(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Listing().Challenge(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Challenge)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Challenge(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Listing_prevChallenge(ctx context.Context, field graphql.CollectedField, obj *model.Listing) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Listing",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Listing().PrevChallenge(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Challenge)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Challenge(ctx, field.Selections, res)
}

var listingEdgeImplementors = []string{"ListingEdge"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ListingEdge(ctx context.Context, sel ast.SelectionSet, obj *ListingEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, listingEdgeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListingEdge")
		case "cursor":
			out.Values[i] = ec._ListingEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "node":
			out.Values[i] = ec._ListingEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ListingEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ListingEdge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "ListingEdge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ListingEdge_node(ctx context.Context, field graphql.CollectedField, obj *ListingEdge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "ListingEdge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.Listing)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	return ec._Listing(ctx, field.Selections, &res)
}

var listingResultCursorImplementors = []string{"ListingResultCursor"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ListingResultCursor(ctx context.Context, sel ast.SelectionSet, obj *ListingResultCursor) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, listingResultCursorImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListingResultCursor")
		case "edges":
			out.Values[i] = ec._ListingResultCursor_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "pageInfo":
			out.Values[i] = ec._ListingResultCursor_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ListingResultCursor_edges(ctx context.Context, field graphql.CollectedField, obj *ListingResultCursor) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "ListingResultCursor",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ListingEdge)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._ListingEdge(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _ListingResultCursor_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ListingResultCursor) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "ListingResultCursor",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(PageInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	return ec._PageInfo(ctx, field.Selections, &res)
}

var metadataImplementors = []string{"Metadata"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Metadata(ctx context.Context, sel ast.SelectionSet, obj *Metadata) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, metadataImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Metadata")
		case "key":
			out.Values[i] = ec._Metadata_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "value":
			out.Values[i] = ec._Metadata_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Metadata_key(ctx context.Context, field graphql.CollectedField, obj *Metadata) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Metadata",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Metadata_value(ctx context.Context, field graphql.CollectedField, obj *Metadata) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Metadata",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

var mutationImplementors = []string{"Mutation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, mutationImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Mutation",
	})

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "authSignupEth":
			out.Values[i] = ec._Mutation_authSignupEth(ctx, field)
		case "authSignupEmailSend":
			out.Values[i] = ec._Mutation_authSignupEmailSend(ctx, field)
		case "authSignupEmailSendForApplication":
			out.Values[i] = ec._Mutation_authSignupEmailSendForApplication(ctx, field)
		case "authSignupEmailConfirm":
			out.Values[i] = ec._Mutation_authSignupEmailConfirm(ctx, field)
		case "authLoginEth":
			out.Values[i] = ec._Mutation_authLoginEth(ctx, field)
		case "authLoginEmailSend":
			out.Values[i] = ec._Mutation_authLoginEmailSend(ctx, field)
		case "authLoginEmailSendForApplication":
			out.Values[i] = ec._Mutation_authLoginEmailSendForApplication(ctx, field)
		case "authLoginEmailConfirm":
			out.Values[i] = ec._Mutation_authLoginEmailConfirm(ctx, field)
		case "authRefresh":
			out.Values[i] = ec._Mutation_authRefresh(ctx, field)
		case "jsonbSave":
			out.Values[i] = ec._Mutation_jsonbSave(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "nrsignupSendWelcomeEmail":
			out.Values[i] = ec._Mutation_nrsignupSendWelcomeEmail(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "nrsignupSaveCharter":
			out.Values[i] = ec._Mutation_nrsignupSaveCharter(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "nrsignupRequestGrant":
			out.Values[i] = ec._Mutation_nrsignupRequestGrant(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "nrsignupApproveGrant":
			out.Values[i] = ec._Mutation_nrsignupApproveGrant(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "nrsignupSaveTxHash":
			out.Values[i] = ec._Mutation_nrsignupSaveTxHash(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "nrsignupSaveAddress":
			out.Values[i] = ec._Mutation_nrsignupSaveAddress(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "nrsignupSaveNewsroomApplyTxHash":
			out.Values[i] = ec._Mutation_nrsignupSaveNewsroomApplyTxHash(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "nrsignupPollNewsroomDeploy":
			out.Values[i] = ec._Mutation_nrsignupPollNewsroomDeploy(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "nrsignupPollTcrApplication":
			out.Values[i] = ec._Mutation_nrsignupPollTcrApplication(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "nrsignupUpdateSteps":
			out.Values[i] = ec._Mutation_nrsignupUpdateSteps(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "storefrontAirswapTxHash":
			out.Values[i] = ec._Mutation_storefrontAirswapTxHash(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "storefrontAirswapCancelled":
			out.Values[i] = ec._Mutation_storefrontAirswapCancelled(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "userSetEthAddress":
			out.Values[i] = ec._Mutation_userSetEthAddress(ctx, field)
		case "userUpdate":
			out.Values[i] = ec._Mutation_userUpdate(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_authSignupEth(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_authSignupEth_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AuthSignupEth(rctx, args["input"].(users.SignatureInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*auth.LoginResponse)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._AuthLoginResponse(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_authSignupEmailSend(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_authSignupEmailSend_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AuthSignupEmailSend(rctx, args["emailAddress"].(string), args["addToMailing"].(*bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_authSignupEmailSendForApplication(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_authSignupEmailSendForApplication_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AuthSignupEmailSendForApplication(rctx, args["emailAddress"].(string), args["application"].(auth.ApplicationEnum), args["addToMailing"].(*bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_authSignupEmailConfirm(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_authSignupEmailConfirm_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AuthSignupEmailConfirm(rctx, args["signupJWT"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*auth.LoginResponse)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._AuthLoginResponse(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_authLoginEth(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_authLoginEth_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AuthLoginEth(rctx, args["input"].(users.SignatureInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*auth.LoginResponse)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._AuthLoginResponse(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_authLoginEmailSend(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_authLoginEmailSend_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AuthLoginEmailSend(rctx, args["emailAddress"].(string), args["addToMailing"].(*bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_authLoginEmailSendForApplication(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_authLoginEmailSendForApplication_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AuthLoginEmailSendForApplication(rctx, args["emailAddress"].(string), args["application"].(auth.ApplicationEnum), args["addToMailing"].(*bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_authLoginEmailConfirm(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_authLoginEmailConfirm_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AuthLoginEmailConfirm(rctx, args["loginJWT"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*auth.LoginResponse)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._AuthLoginResponse(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_authRefresh(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_authRefresh_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AuthRefresh(rctx, args["token"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*auth.LoginResponse)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._AuthLoginResponse(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_jsonbSave(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_jsonbSave_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().JsonbSave(rctx, args["input"].(JsonbInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(jsonstore.JSONb)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	return ec._Jsonb(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_nrsignupSendWelcomeEmail(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NrsignupSendWelcomeEmail(rctx)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_nrsignupSaveCharter(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_nrsignupSaveCharter_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NrsignupSaveCharter(rctx, args["charterData"].(nrsignup.Charter))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_nrsignupRequestGrant(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_nrsignupRequestGrant_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NrsignupRequestGrant(rctx, args["requested"].(bool))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_nrsignupApproveGrant(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_nrsignupApproveGrant_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NrsignupApproveGrant(rctx, args["approved"].(bool), args["newsroomOwnerUID"].(string))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_nrsignupSaveTxHash(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_nrsignupSaveTxHash_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NrsignupSaveTxHash(rctx, args["txHash"].(string))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_nrsignupSaveAddress(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_nrsignupSaveAddress_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NrsignupSaveAddress(rctx, args["address"].(string))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_nrsignupSaveNewsroomApplyTxHash(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_nrsignupSaveNewsroomApplyTxHash_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NrsignupSaveNewsroomApplyTxHash(rctx, args["txHash"].(string))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_nrsignupPollNewsroomDeploy(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_nrsignupPollNewsroomDeploy_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NrsignupPollNewsroomDeploy(rctx, args["txHash"].(string))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_nrsignupPollTcrApplication(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_nrsignupPollTcrApplication_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NrsignupPollTcrApplication(rctx, args["txHash"].(string))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_nrsignupUpdateSteps(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_nrsignupUpdateSteps_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NrsignupUpdateSteps(rctx, args["input"].(NrsignupStepsInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_storefrontAirswapTxHash(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_storefrontAirswapTxHash_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StorefrontAirswapTxHash(rctx, args["txHash"].(string))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_storefrontAirswapCancelled(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StorefrontAirswapCancelled(rctx)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_userSetEthAddress(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_userSetEthAddress_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UserSetEthAddress(rctx, args["input"].(users.SignatureInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_userUpdate(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_userUpdate_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UserUpdate(rctx, args["uid"].(*string), args["input"].(*users.UserUpdateInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*users.User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._User(ctx, field.Selections, res)
}

var nrsignupNewsroomImplementors = []string{"NrsignupNewsroom"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _NrsignupNewsroom(ctx context.Context, sel ast.SelectionSet, obj *nrsignup.SignupUserJSONData) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, nrsignupNewsroomImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NrsignupNewsroom")
		case "onboardedTs":
			out.Values[i] = ec._NrsignupNewsroom_onboardedTs(ctx, field, obj)
		case "charter":
			out.Values[i] = ec._NrsignupNewsroom_charter(ctx, field, obj)
		case "charterLastUpdated":
			out.Values[i] = ec._NrsignupNewsroom_charterLastUpdated(ctx, field, obj)
		case "grantRequested":
			out.Values[i] = ec._NrsignupNewsroom_grantRequested(ctx, field, obj)
		case "grantApproved":
			out.Values[i] = ec._NrsignupNewsroom_grantApproved(ctx, field, obj)
		case "newsroomDeployTx":
			out.Values[i] = ec._NrsignupNewsroom_newsroomDeployTx(ctx, field, obj)
		case "newsroomAddress":
			out.Values[i] = ec._NrsignupNewsroom_newsroomAddress(ctx, field, obj)
		case "newsroomName":
			out.Values[i] = ec._NrsignupNewsroom_newsroomName(ctx, field, obj)
		case "tcrApplyTx":
			out.Values[i] = ec._NrsignupNewsroom_tcrApplyTx(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _NrsignupNewsroom_onboardedTs(ctx context.Context, field graphql.CollectedField, obj *nrsignup.SignupUserJSONData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "NrsignupNewsroom",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnboardedTs, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _NrsignupNewsroom_charter(ctx context.Context, field graphql.CollectedField, obj *nrsignup.SignupUserJSONData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "NrsignupNewsroom",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Charter, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*nrsignup.Charter)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._CharterContent(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _NrsignupNewsroom_charterLastUpdated(ctx context.Context, field graphql.CollectedField, obj *nrsignup.SignupUserJSONData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "NrsignupNewsroom",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CharterLastUpdated, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _NrsignupNewsroom_grantRequested(ctx context.Context, field graphql.CollectedField, obj *nrsignup.SignupUserJSONData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "NrsignupNewsroom",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GrantRequested, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

// nolint: vetshadow
func (ec *executionContext) _NrsignupNewsroom_grantApproved(ctx context.Context, field graphql.CollectedField, obj *nrsignup.SignupUserJSONData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "NrsignupNewsroom",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GrantApproved, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

// nolint: vetshadow
func (ec *executionContext) _NrsignupNewsroom_newsroomDeployTx(ctx context.Context, field graphql.CollectedField, obj *nrsignup.SignupUserJSONData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "NrsignupNewsroom",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewsroomDeployTx, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _NrsignupNewsroom_newsroomAddress(ctx context.Context, field graphql.CollectedField, obj *nrsignup.SignupUserJSONData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "NrsignupNewsroom",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewsroomAddress, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _NrsignupNewsroom_newsroomName(ctx context.Context, field graphql.CollectedField, obj *nrsignup.SignupUserJSONData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "NrsignupNewsroom",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewsroomName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _NrsignupNewsroom_tcrApplyTx(ctx context.Context, field graphql.CollectedField, obj *nrsignup.SignupUserJSONData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "NrsignupNewsroom",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TcrApplyTx, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

var pageInfoImplementors = []string{"PageInfo"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, pageInfoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "endCursor":
			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *PageInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "PageInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *PageInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "PageInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalBoolean(res)
}

var pollImplementors = []string{"Poll"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Poll(ctx context.Context, sel ast.SelectionSet, obj *model.Poll) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, pollImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Poll")
		case "commitEndDate":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Poll_commitEndDate(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "revealEndDate":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Poll_revealEndDate(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "voteQuorum":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Poll_voteQuorum(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "votesFor":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Poll_votesFor(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "votesAgainst":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Poll_votesAgainst(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Poll_commitEndDate(ctx context.Context, field graphql.CollectedField, obj *model.Poll) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Poll",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Poll().CommitEndDate(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _Poll_revealEndDate(ctx context.Context, field graphql.CollectedField, obj *model.Poll) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Poll",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Poll().RevealEndDate(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _Poll_voteQuorum(ctx context.Context, field graphql.CollectedField, obj *model.Poll) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Poll",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Poll().VoteQuorum(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _Poll_votesFor(ctx context.Context, field graphql.CollectedField, obj *model.Poll) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Poll",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Poll().VotesFor(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Poll_votesAgainst(ctx context.Context, field graphql.CollectedField, obj *model.Poll) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Poll",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Poll().VotesAgainst(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

var queryImplementors = []string{"Query"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, queryImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
	})

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "articles":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_articles(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "challenge":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_challenge(ctx, field)
				wg.Done()
			}(i, field)
		case "governanceEvents":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_governanceEvents(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "governanceEventsTxHash":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_governanceEventsTxHash(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "listing":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_listing(ctx, field)
				wg.Done()
			}(i, field)
		case "listings":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_listings(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "tcrChallenge":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_tcrChallenge(ctx, field)
				wg.Done()
			}(i, field)
		case "tcrGovernanceEvents":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_tcrGovernanceEvents(ctx, field)
				wg.Done()
			}(i, field)
		case "tcrGovernanceEventsTxHash":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_tcrGovernanceEventsTxHash(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "tcrListing":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_tcrListing(ctx, field)
				wg.Done()
			}(i, field)
		case "tcrListings":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_tcrListings(ctx, field)
				wg.Done()
			}(i, field)
		case "newsroomArticles":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_newsroomArticles(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "nrsignupNewsroom":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_nrsignupNewsroom(ctx, field)
				wg.Done()
			}(i, field)
		case "userChallengeData":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_userChallengeData(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "currentUser":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_currentUser(ctx, field)
				wg.Done()
			}(i, field)
		case "storefrontEthPrice":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_storefrontEthPrice(ctx, field)
				wg.Done()
			}(i, field)
		case "storefrontCvlPrice":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_storefrontCvlPrice(ctx, field)
				wg.Done()
			}(i, field)
		case "storefrontCvlQuoteUsd":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_storefrontCvlQuoteUsd(ctx, field)
				wg.Done()
			}(i, field)
		case "storefrontCvlQuoteTokens":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_storefrontCvlQuoteTokens(ctx, field)
				wg.Done()
			}(i, field)
		case "jsonb":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_jsonb(ctx, field)
				wg.Done()
			}(i, field)
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Query_articles(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_articles_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Articles(rctx, args["addr"].(*string), args["first"].(*int), args["after"].(*string), args["contentID"].(*int), args["revisionID"].(*int), args["lowercaseAddr"].(*bool))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.ContentRevision)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._ContentRevision(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query_challenge(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_challenge_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Challenge(rctx, args["id"].(int), args["lowercaseAddr"].(*bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Challenge)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Challenge(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_governanceEvents(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_governanceEvents_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GovernanceEvents(rctx, args["addr"].(*string), args["after"].(*string), args["creationDate"].(*DateRange), args["first"].(*int), args["lowercaseAddr"].(*bool))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.GovernanceEvent)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._GovernanceEvent(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query_governanceEventsTxHash(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_governanceEventsTxHash_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GovernanceEventsTxHash(rctx, args["txHash"].(string), args["lowercaseAddr"].(*bool))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.GovernanceEvent)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._GovernanceEvent(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query_listing(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_listing_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Listing(rctx, args["addr"].(string), args["lowercaseAddr"].(*bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Listing)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Listing(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_listings(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_listings_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Listings(rctx, args["first"].(*int), args["after"].(*string), args["whitelistedOnly"].(*bool), args["rejectedOnly"].(*bool), args["activeChallenge"].(*bool), args["currentApplication"].(*bool), args["lowercaseAddr"].(*bool), args["sortBy"].(*model.SortByType), args["sortDesc"].(*bool))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Listing)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._Listing(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query_tcrChallenge(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_tcrChallenge_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TcrChallenge(rctx, args["id"].(int), args["lowercaseAddr"].(*bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Challenge)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Challenge(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_tcrGovernanceEvents(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_tcrGovernanceEvents_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TcrGovernanceEvents(rctx, args["addr"].(*string), args["after"].(*string), args["creationDate"].(*DateRange), args["first"].(*int), args["lowercaseAddr"].(*bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*GovernanceEventResultCursor)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._GovernanceEventResultCursor(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_tcrGovernanceEventsTxHash(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_tcrGovernanceEventsTxHash_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TcrGovernanceEventsTxHash(rctx, args["txHash"].(string), args["lowercaseAddr"].(*bool))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.GovernanceEvent)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._GovernanceEvent(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query_tcrListing(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_tcrListing_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TcrListing(rctx, args["addr"].(string), args["lowercaseAddr"].(*bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Listing)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Listing(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_tcrListings(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_tcrListings_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TcrListings(rctx, args["first"].(*int), args["after"].(*string), args["whitelistedOnly"].(*bool), args["rejectedOnly"].(*bool), args["activeChallenge"].(*bool), args["currentApplication"].(*bool), args["lowercaseAddr"].(*bool), args["sortBy"].(*model.SortByType), args["sortDesc"].(*bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ListingResultCursor)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._ListingResultCursor(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_newsroomArticles(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_newsroomArticles_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NewsroomArticles(rctx, args["addr"].(*string), args["first"].(*int), args["after"].(*string), args["contentID"].(*int), args["revisionID"].(*int), args["lowercaseAddr"].(*bool))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.ContentRevision)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._ContentRevision(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query_nrsignupNewsroom(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NrsignupNewsroom(rctx)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*nrsignup.SignupUserJSONData)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._NrsignupNewsroom(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_userChallengeData(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_userChallengeData_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserChallengeData(rctx, args["userAddr"].(*string), args["pollID"].(*int), args["canUserCollect"].(*bool), args["canUserRescue"].(*bool), args["canUserReveal"].(*bool))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.UserChallengeData)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._UserChallengeVoteData(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query_currentUser(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CurrentUser(rctx)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*users.User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._User(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_storefrontEthPrice(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().StorefrontEthPrice(rctx)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_storefrontCvlPrice(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().StorefrontCvlPrice(rctx)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_storefrontCvlQuoteUsd(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_storefrontCvlQuoteUsd_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().StorefrontCvlQuoteUsd(rctx, args["usdToSpend"].(float64))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_storefrontCvlQuoteTokens(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_storefrontCvlQuoteTokens_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().StorefrontCvlQuoteTokens(rctx, args["tokensToBuy"].(float64))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_jsonb(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_jsonb_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Jsonb(rctx, args["id"].(*string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*jsonstore.JSONb)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Jsonb(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query___type_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec.___Schema(ctx, field.Selections, res)
}

var rosterMemberImplementors = []string{"RosterMember"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _RosterMember(ctx context.Context, sel ast.SelectionSet, obj *nrsignup.CharterRosterMember) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, rosterMemberImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RosterMember")
		case "name":
			out.Values[i] = ec._RosterMember_name(ctx, field, obj)
		case "role":
			out.Values[i] = ec._RosterMember_role(ctx, field, obj)
		case "bio":
			out.Values[i] = ec._RosterMember_bio(ctx, field, obj)
		case "ethAddress":
			out.Values[i] = ec._RosterMember_ethAddress(ctx, field, obj)
		case "socialUrls":
			out.Values[i] = ec._RosterMember_socialUrls(ctx, field, obj)
		case "avatarUrl":
			out.Values[i] = ec._RosterMember_avatarUrl(ctx, field, obj)
		case "signature":
			out.Values[i] = ec._RosterMember_signature(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _RosterMember_name(ctx context.Context, field graphql.CollectedField, obj *nrsignup.CharterRosterMember) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "RosterMember",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _RosterMember_role(ctx context.Context, field graphql.CollectedField, obj *nrsignup.CharterRosterMember) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "RosterMember",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _RosterMember_bio(ctx context.Context, field graphql.CollectedField, obj *nrsignup.CharterRosterMember) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "RosterMember",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bio, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _RosterMember_ethAddress(ctx context.Context, field graphql.CollectedField, obj *nrsignup.CharterRosterMember) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "RosterMember",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EthAddress, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _RosterMember_socialUrls(ctx context.Context, field graphql.CollectedField, obj *nrsignup.CharterRosterMember) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "RosterMember",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SocialURLs, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*nrsignup.CharterSocialURLs)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._CharterSocialUrls(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _RosterMember_avatarUrl(ctx context.Context, field graphql.CollectedField, obj *nrsignup.CharterRosterMember) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "RosterMember",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvatarURL, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _RosterMember_signature(ctx context.Context, field graphql.CollectedField, obj *nrsignup.CharterRosterMember) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "RosterMember",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Signature, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

var userImplementors = []string{"User"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *users.User) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, userImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "uid":
			out.Values[i] = ec._User_uid(ctx, field, obj)
		case "email":
			out.Values[i] = ec._User_email(ctx, field, obj)
		case "ethAddress":
			out.Values[i] = ec._User_ethAddress(ctx, field, obj)
		case "quizPayload":
			out.Values[i] = ec._User_quizPayload(ctx, field, obj)
		case "quizStatus":
			out.Values[i] = ec._User_quizStatus(ctx, field, obj)
		case "civilianWhitelistTxID":
			out.Values[i] = ec._User_civilianWhitelistTxID(ctx, field, obj)
		case "nrStep":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._User_nrStep(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "nrFurthestStep":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._User_nrFurthestStep(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "nrLastSeen":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._User_nrLastSeen(ctx, field, obj)
				wg.Done()
			}(i, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _User_uid(ctx context.Context, field graphql.CollectedField, obj *users.User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *users.User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _User_ethAddress(ctx context.Context, field graphql.CollectedField, obj *users.User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EthAddress, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _User_quizPayload(ctx context.Context, field graphql.CollectedField, obj *users.User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuizPayload, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(postgres.JsonbPayload)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return utils.MarshalJsonbPayloadScalar(res)
}

// nolint: vetshadow
func (ec *executionContext) _User_quizStatus(ctx context.Context, field graphql.CollectedField, obj *users.User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuizStatus, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _User_civilianWhitelistTxID(ctx context.Context, field graphql.CollectedField, obj *users.User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CivilianWhitelistTxID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _User_nrStep(ctx context.Context, field graphql.CollectedField, obj *users.User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().NrStep(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _User_nrFurthestStep(ctx context.Context, field graphql.CollectedField, obj *users.User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().NrFurthestStep(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _User_nrLastSeen(ctx context.Context, field graphql.CollectedField, obj *users.User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().NrLastSeen(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

var userChallengeVoteDataImplementors = []string{"UserChallengeVoteData"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _UserChallengeVoteData(ctx context.Context, sel ast.SelectionSet, obj *model.UserChallengeData) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, userChallengeVoteDataImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserChallengeVoteData")
		case "pollID":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._UserChallengeVoteData_pollID(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "pollRevealDate":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._UserChallengeVoteData_pollRevealDate(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "pollType":
			out.Values[i] = ec._UserChallengeVoteData_pollType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "userAddress":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._UserChallengeVoteData_userAddress(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "userDidCommit":
			out.Values[i] = ec._UserChallengeVoteData_userDidCommit(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "userDidReveal":
			out.Values[i] = ec._UserChallengeVoteData_userDidReveal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "didUserCollect":
			out.Values[i] = ec._UserChallengeVoteData_didUserCollect(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "didUserRescue":
			out.Values[i] = ec._UserChallengeVoteData_didUserRescue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "didCollectAmount":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._UserChallengeVoteData_didCollectAmount(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "isVoterWinner":
			out.Values[i] = ec._UserChallengeVoteData_isVoterWinner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "pollIsPassed":
			out.Values[i] = ec._UserChallengeVoteData_pollIsPassed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "salt":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._UserChallengeVoteData_salt(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "choice":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._UserChallengeVoteData_choice(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "numTokens":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._UserChallengeVoteData_numTokens(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "voterReward":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._UserChallengeVoteData_voterReward(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "parentChallengeID":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._UserChallengeVoteData_parentChallengeID(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _UserChallengeVoteData_pollID(ctx context.Context, field graphql.CollectedField, obj *model.UserChallengeData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "UserChallengeVoteData",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserChallengeVoteData().PollID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _UserChallengeVoteData_pollRevealDate(ctx context.Context, field graphql.CollectedField, obj *model.UserChallengeData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "UserChallengeVoteData",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserChallengeVoteData().PollRevealDate(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _UserChallengeVoteData_pollType(ctx context.Context, field graphql.CollectedField, obj *model.UserChallengeData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "UserChallengeVoteData",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PollType(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _UserChallengeVoteData_userAddress(ctx context.Context, field graphql.CollectedField, obj *model.UserChallengeData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "UserChallengeVoteData",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserChallengeVoteData().UserAddress(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _UserChallengeVoteData_userDidCommit(ctx context.Context, field graphql.CollectedField, obj *model.UserChallengeData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "UserChallengeVoteData",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserDidCommit(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) _UserChallengeVoteData_userDidReveal(ctx context.Context, field graphql.CollectedField, obj *model.UserChallengeData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "UserChallengeVoteData",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserDidReveal(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) _UserChallengeVoteData_didUserCollect(ctx context.Context, field graphql.CollectedField, obj *model.UserChallengeData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "UserChallengeVoteData",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DidUserCollect(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) _UserChallengeVoteData_didUserRescue(ctx context.Context, field graphql.CollectedField, obj *model.UserChallengeData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "UserChallengeVoteData",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DidUserRescue(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) _UserChallengeVoteData_didCollectAmount(ctx context.Context, field graphql.CollectedField, obj *model.UserChallengeData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "UserChallengeVoteData",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserChallengeVoteData().DidCollectAmount(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _UserChallengeVoteData_isVoterWinner(ctx context.Context, field graphql.CollectedField, obj *model.UserChallengeData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "UserChallengeVoteData",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsVoterWinner(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) _UserChallengeVoteData_pollIsPassed(ctx context.Context, field graphql.CollectedField, obj *model.UserChallengeData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "UserChallengeVoteData",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PollIsPassed(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) _UserChallengeVoteData_salt(ctx context.Context, field graphql.CollectedField, obj *model.UserChallengeData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "UserChallengeVoteData",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserChallengeVoteData().Salt(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _UserChallengeVoteData_choice(ctx context.Context, field graphql.CollectedField, obj *model.UserChallengeData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "UserChallengeVoteData",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserChallengeVoteData().Choice(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _UserChallengeVoteData_numTokens(ctx context.Context, field graphql.CollectedField, obj *model.UserChallengeData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "UserChallengeVoteData",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserChallengeVoteData().NumTokens(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _UserChallengeVoteData_voterReward(ctx context.Context, field graphql.CollectedField, obj *model.UserChallengeData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "UserChallengeVoteData",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserChallengeVoteData().VoterReward(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _UserChallengeVoteData_parentChallengeID(ctx context.Context, field graphql.CollectedField, obj *model.UserChallengeData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "UserChallengeVoteData",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserChallengeVoteData().ParentChallengeID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

var __DirectiveImplementors = []string{"__Directive"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __DirectiveImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return graphql.MarshalString(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___InputValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var __EnumValueImplementors = []string{"__EnumValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __EnumValueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __FieldImplementors = []string{"__Field"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __FieldImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___InputValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __InputValueImplementors = []string{"__InputValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __InputValueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __SchemaImplementors = []string{"__Schema"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __SchemaImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Type(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Directive(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var __TypeImplementors = []string{"__Type"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __TypeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field___Type_fields_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Field(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Type(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Type(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field___Type_enumValues_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___EnumValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___InputValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

func UnmarshalCharterInput(v interface{}) (nrsignup.Charter, error) {
	var it nrsignup.Charter
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "logoUrl":
			var err error
			it.LogoURL, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "newsroomUrl":
			var err error
			it.NewsroomURL, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "tagline":
			var err error
			it.Tagline, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "roster":
			var err error
			var rawIf1 []interface{}
			if v != nil {
				if tmp1, ok := v.([]interface{}); ok {
					rawIf1 = tmp1
				} else {
					rawIf1 = []interface{}{v}
				}
			}
			it.Roster = make([]*nrsignup.CharterRosterMember, len(rawIf1))
			for idx1 := range rawIf1 {
				var ptr2 nrsignup.CharterRosterMember
				if rawIf1[idx1] != nil {
					ptr2, err = UnmarshalRosterMemberInput(rawIf1[idx1])
					it.Roster[idx1] = &ptr2
				}
			}
			if err != nil {
				return it, err
			}
		case "signatures":
			var err error
			var rawIf1 []interface{}
			if v != nil {
				if tmp1, ok := v.([]interface{}); ok {
					rawIf1 = tmp1
				} else {
					rawIf1 = []interface{}{v}
				}
			}
			it.Signatures = make([]*nrsignup.CharterConstitutionSignature, len(rawIf1))
			for idx1 := range rawIf1 {
				var ptr2 nrsignup.CharterConstitutionSignature
				if rawIf1[idx1] != nil {
					ptr2, err = UnmarshalConstitutionSignatureInput(rawIf1[idx1])
					it.Signatures[idx1] = &ptr2
				}
			}
			if err != nil {
				return it, err
			}
		case "mission":
			var err error
			var ptr1 nrsignup.CharterMission
			if v != nil {
				ptr1, err = UnmarshalCharterMissionInput(v)
				it.Mission = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "socialUrls":
			var err error
			var ptr1 nrsignup.CharterSocialURLs
			if v != nil {
				ptr1, err = UnmarshalCharterSocialUrlsInput(v)
				it.SocialURLs = &ptr1
			}

			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalCharterMissionInput(v interface{}) (nrsignup.CharterMission, error) {
	var it nrsignup.CharterMission
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "purpose":
			var err error
			it.Purpose, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "structure":
			var err error
			it.Structure, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "revenue":
			var err error
			it.Revenue, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "encumbrances":
			var err error
			it.Encumbrances, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "miscellaneous":
			var err error
			it.Miscellaneous, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalCharterSocialUrlsInput(v interface{}) (nrsignup.CharterSocialURLs, error) {
	var it nrsignup.CharterSocialURLs
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "twitter":
			var err error
			it.Twitter, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "facebook":
			var err error
			it.Facebook, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "instagram":
			var err error
			it.Instagram, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "linkedIn":
			var err error
			it.Linkedin, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "youTube":
			var err error
			it.Youtube, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error
			it.Email, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalConstitutionSignatureInput(v interface{}) (nrsignup.CharterConstitutionSignature, error) {
	var it nrsignup.CharterConstitutionSignature
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "signer":
			var err error
			it.Signer, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "signature":
			var err error
			it.Signature, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error
			it.Message, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalDateRange(v interface{}) (DateRange, error) {
	var it DateRange
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "gt":
			var err error
			var ptr1 int
			if v != nil {
				ptr1, err = graphql.UnmarshalInt(v)
				it.Gt = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "lt":
			var err error
			var ptr1 int
			if v != nil {
				ptr1, err = graphql.UnmarshalInt(v)
				it.Lt = &ptr1
			}

			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalJsonbInput(v interface{}) (JsonbInput, error) {
	var it JsonbInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "jsonStr":
			var err error
			it.JSONStr, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalNrsignupStepsInput(v interface{}) (NrsignupStepsInput, error) {
	var it NrsignupStepsInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "step":
			var err error
			var ptr1 int
			if v != nil {
				ptr1, err = graphql.UnmarshalInt(v)
				it.Step = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "furthestStep":
			var err error
			var ptr1 int
			if v != nil {
				ptr1, err = graphql.UnmarshalInt(v)
				it.FurthestStep = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "lastSeen":
			var err error
			var ptr1 int
			if v != nil {
				ptr1, err = graphql.UnmarshalInt(v)
				it.LastSeen = &ptr1
			}

			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalRosterMemberInput(v interface{}) (nrsignup.CharterRosterMember, error) {
	var it nrsignup.CharterRosterMember
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "role":
			var err error
			it.Role, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "bio":
			var err error
			it.Bio, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "ethAddress":
			var err error
			it.EthAddress, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "socialUrls":
			var err error
			var ptr1 nrsignup.CharterSocialURLs
			if v != nil {
				ptr1, err = UnmarshalCharterSocialUrlsInput(v)
				it.SocialURLs = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "avatarUrl":
			var err error
			it.AvatarURL, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "signature":
			var err error
			it.Signature, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalUserSignatureInput(v interface{}) (users.SignatureInput, error) {
	var it users.SignatureInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "message":
			var err error
			it.Message, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "messageHash":
			var err error
			it.MessageHash, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "signature":
			var err error
			it.Signature, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "signer":
			var err error
			it.Signer, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "r":
			var err error
			it.R, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "s":
			var err error
			it.S, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "v":
			var err error
			it.V, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalUserUpdateInput(v interface{}) (users.UserUpdateInput, error) {
	var it users.UserUpdateInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "quizPayload":
			var err error
			it.QuizPayload, err = utils.UnmarshalJsonbPayloadScalar(v)
			if err != nil {
				return it, err
			}
		case "quizStatus":
			var err error
			it.QuizStatus, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "nrStep":
			var err error
			var ptr1 int
			if v != nil {
				ptr1, err = graphql.UnmarshalInt(v)
				it.NrStep = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "nrFurthestStep":
			var err error
			var ptr1 int
			if v != nil {
				ptr1, err = graphql.UnmarshalInt(v)
				it.NrFurthestStep = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "nrLastSeen":
			var err error
			var ptr1 int
			if v != nil {
				ptr1, err = graphql.UnmarshalInt(v)
				it.NrLastSeen = &ptr1
			}

			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) FieldMiddleware(ctx context.Context, obj interface{}, next graphql.Resolver) (ret interface{}) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	res, err := ec.ResolverMiddleware(ctx, next)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return res
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var parsedSchema = gqlparser.MustLoadSchema(
	&ast.Source{Name: "schema.graphql", Input: `schema {
  query: Query
}

# NOTE(PN): All date fields are ints in seconds from epoch

# The query type, represents all of the entry points into our object graph
type Query {
  # TCR / Crawler Queries (Legacy naming)
  # TODO(PN): Temporary keep these until migrated over to new naming
  # Just calls the properly named versions
  articles(
    addr: String
    first: Int
    after: String
    contentID: Int
    revisionID: Int
    lowercaseAddr: Boolean = True
  ): [ContentRevision!]!
  challenge(id: Int!, lowercaseAddr: Boolean = True): Challenge
  governanceEvents(
    addr: String
    after: String
    creationDate: DateRange
    first: Int
    lowercaseAddr: Boolean = True
  ): [GovernanceEvent!]!
  governanceEventsTxHash(
    txHash: String!
    lowercaseAddr: Boolean = True
  ): [GovernanceEvent!]!
  listing(addr: String!, lowercaseAddr: Boolean = True): Listing
  listings(
    first: Int
    after: String
    whitelistedOnly: Boolean
    rejectedOnly: Boolean
    activeChallenge: Boolean
    currentApplication: Boolean
    lowercaseAddr: Boolean = True
    sortBy: ListingSort
    sortDesc: Boolean = False
  ): [Listing!]!

  # TCR Queries
  tcrChallenge(id: Int!, lowercaseAddr: Boolean = True): Challenge
  tcrGovernanceEvents(
    addr: String
    after: String
    creationDate: DateRange
    first: Int
    lowercaseAddr: Boolean = True
  ): GovernanceEventResultCursor
  tcrGovernanceEventsTxHash(
    txHash: String!
    lowercaseAddr: Boolean = True
  ): [GovernanceEvent!]!
  tcrListing(addr: String!, lowercaseAddr: Boolean = True): Listing
  tcrListings(
    first: Int
    after: String
    whitelistedOnly: Boolean
    rejectedOnly: Boolean
    activeChallenge: Boolean
    currentApplication: Boolean
    lowercaseAddr: Boolean = True
    sortBy: ListingSort
    sortDesc: Boolean = False
  ): ListingResultCursor

  # Newsroom Queries
  newsroomArticles(
    addr: String
    first: Int
    after: String
    contentID: Int
    revisionID: Int
    lowercaseAddr: Boolean = True
  ): [ContentRevision!]!
  nrsignupNewsroom: NrsignupNewsroom

  # UserChallengeData Queries
  userChallengeData(
    userAddr: String
    pollID: Int
    canUserCollect: Boolean
    canUserRescue: Boolean
    canUserReveal: Boolean
  ): [UserChallengeVoteData!]!

  # User Queries
  currentUser: User

  # Storefront
  storefrontEthPrice: Float
  storefrontCvlPrice: Float
  storefrontCvlQuoteUsd(usdToSpend: Float!): Float
  storefrontCvlQuoteTokens(tokensToBuy: Float!): Float

  # JSONb Store Query
  jsonb(id: String): Jsonb
}

type Mutation {
  # Auth Mutations
  authSignupEth(input: UserSignatureInput!): AuthLoginResponse
  authSignupEmailSend(
    emailAddress: String!
    addToMailing: Boolean = False
  ): String
  authSignupEmailSendForApplication(
    emailAddress: String!
    application: AuthApplicationEnum!
    addToMailing: Boolean = False
  ): String
  authSignupEmailConfirm(signupJWT: String!): AuthLoginResponse
  authLoginEth(input: UserSignatureInput!): AuthLoginResponse
  authLoginEmailSend(
    emailAddress: String!
    addToMailing: Boolean = False
  ): String
  authLoginEmailSendForApplication(
    emailAddress: String!
    application: AuthApplicationEnum!
    addToMailing: Boolean = False
  ): String
  authLoginEmailConfirm(loginJWT: String!): AuthLoginResponse
  authRefresh(token: String!): AuthLoginResponse

  # JSONb Store Mutations
  jsonbSave(input: JsonbInput!): Jsonb!

  # Newsroom Signup Mutations
  nrsignupSendWelcomeEmail: String!
  nrsignupSaveCharter(charterData: CharterInput!): String!
  nrsignupRequestGrant(requested: Boolean!): String!
  nrsignupApproveGrant(approved: Boolean!, newsroomOwnerUID: String!): String!
  nrsignupSaveTxHash(txHash: String!): String!
  nrsignupSaveAddress(address: String!): String!
  nrsignupSaveNewsroomApplyTxHash(txHash: String!): String!
  nrsignupPollNewsroomDeploy(txHash: String!): String!
  nrsignupPollTcrApplication(txHash: String!): String!
  nrsignupUpdateSteps(input: NrsignupStepsInput!): String!

  # Storefront Mutations
  storefrontAirswapTxHash(txHash: String!): String!
  storefrontAirswapCancelled: String!

  # User Mutations
  userSetEthAddress(input: UserSignatureInput!): String
  userUpdate(uid: String, input: UserUpdateInput): User
}

# Enum of valid values for application types for auth
enum AuthApplicationEnum {
  DEFAULT
  NEWSROOM
  STOREFRONT
}

## Auth object schemas
type AuthLoginResponse {
  token: String
  refreshToken: String
  uid: String
}

## TCR object schemas

# A type that reflects values in model.Appeal
type Appeal {
  requester: String!
  appealFeePaid: String!
  appealPhaseExpiry: Int!
  appealGranted: Boolean!
  appealOpenToChallengeExpiry: Int!
  statement: String!
  appealChallengeID: Int!
  appealChallenge: Challenge
  appealGrantedStatementURI: String!
}

# A type that reflects block data in model.BlockData
type BlockData {
  blockNumber: Int!
  txHash: String!
  txIndex: Int!
  blockHash: String!
  index: Int!
}

# A type that reflects values in model.Challenge
type Challenge {
  challengeID: Int!
  listingAddress: String!
  statement: String!
  rewardPool: String!
  challenger: String!
  resolved: Boolean!
  stake: String!
  totalTokens: String!
  poll: Poll
  requestAppealExpiry: Int!
  appeal: Appeal
  lastUpdatedDateTs: Int!
}

# A type that represents a Charter
type Charter {
  uri: String!
  contentID: Int!
  revisionID: Int!
  signature: String!
  author: String!
  contentHash: String!
  timestamp: Int!
}

# A type that reflects values in model.GovernanceEvent
type GovernanceEvent {
  listingAddress: String!
  metadata: [Metadata!]!
  governanceEventType: String!
  creationDate: Int!
  lastUpdatedDate: Int!
  eventHash: String!
  blockData: BlockData!
  listing: Listing!
}

# A type that represents an edge value in a GovernanceEvent
type GovernanceEventEdge {
  cursor: String!
  node: GovernanceEvent!
}

# A type that represents return values from GovernanceEvents
type GovernanceEventResultCursor {
  edges: [GovernanceEventEdge]!
  pageInfo: PageInfo!
}

# A type that reflects values in model.Listing
type Listing {
  name: String!
  contractAddress: String!
  whitelisted: Boolean!
  lastGovState: String!
  url: String!
  charter: Charter
  ownerAddresses: [String!]!
  owner: String!
  contributorAddresses: [String!]!
  createdDate: Int!
  applicationDate: Int
  approvalDate: Int
  lastUpdatedDate: Int!
  appExpiry: Int!
  unstakedDeposit: String!
  challengeID: Int!
  challenge: Challenge
  prevChallenge: Challenge
}

# A type that represents a edge value in a Listing
type ListingEdge {
  cursor: String!
  node: Listing!
}

# A type that represents return values from Listings
type ListingResultCursor {
  edges: [ListingEdge]!
  pageInfo: PageInfo!
}

# Enum of valid sort values for Listings
enum ListingSort {
  DEFAULT
  NAME
  CREATED
  APPLIED
  WHITELISTED
}

# A type that reflects values in model.Metadata
type Metadata {
  key: String!
  value: String!
}

# A type that reflects values in model.Poll
type Poll {
  commitEndDate: Int!
  revealEndDate: Int!
  voteQuorum: Int!
  votesFor: String!
  votesAgainst: String!
}

# A type that reflects values in model.UserChallengeData
type UserChallengeVoteData {
  pollID: Int!
  pollRevealDate: Int!
  pollType: String!
  userAddress: String!
  userDidCommit: Boolean!
  userDidReveal: Boolean!
  didUserCollect: Boolean!
  didUserRescue: Boolean!
  didCollectAmount: Int!
  isVoterWinner: Boolean!
  pollIsPassed: Boolean!
  salt: Int!
  choice: Int!
  numTokens: String!
  voterReward: String!
  parentChallengeID: Int!
}

## Newsroom object schemas

# A type that reflects values in model.ArticlePayload
type ArticlePayload {
  key: String!
  value: ArticlePayloadValue!
}

# A type that reflects values in model.ContentRevision
type ContentRevision {
  listingAddress: String!
  payload: [ArticlePayload!]!
  payloadHash: String!
  editorAddress: String!
  contractContentId: Int!
  contractRevisionId: Int!
  revisionUri: String!
  revisionDate: Int!
}

## User object schemas

# A type that reflects values in users.User
type User {
  uid: String
  email: String
  ethAddress: String
  quizPayload: RawObject
  quizStatus: String
  civilianWhitelistTxID: String
  nrStep: Int
  nrFurthestStep: Int
  nrLastSeen: Int
}

input UserSignatureInput {
  message: String!
  messageHash: String!
  signature: String!
  signer: String!
  r: String!
  s: String!
  v: String!
}

input UserUpdateInput {
  quizPayload: RawObject
  quizStatus: String
  nrStep: Int
  nrFurthestStep: Int
  nrLastSeen: Int
}

input NrsignupStepsInput {
  step: Int
  furthestStep: Int
  lastSeen: Int
}

type NrsignupNewsroom {
  onboardedTs: Int
  charter: CharterContent
  charterLastUpdated: Int
  grantRequested: Boolean
  grantApproved: Boolean
  newsroomDeployTx: String
  newsroomAddress: String
  newsroomName: String
  tcrApplyTx: String
}

input CharterInput {
  name: String
  logoUrl: String
  newsroomUrl: String
  tagline: String
  roster: [RosterMemberInput]
  signatures: [ConstitutionSignatureInput]
  mission: CharterMissionInput
  socialUrls: CharterSocialUrlsInput
}

type CharterContent {
  name: String
  logoUrl: String
  newsroomUrl: String
  tagline: String
  roster: [RosterMember]
  signatures: [ConstitutionSignature]
  mission: CharterMission
  socialUrls: CharterSocialUrls
}

input RosterMemberInput {
  name: String
  role: String
  bio: String
  ethAddress: String
  socialUrls: CharterSocialUrlsInput
  avatarUrl: String
  signature: String
}

type RosterMember {
  name: String
  role: String
  bio: String
  ethAddress: String
  socialUrls: CharterSocialUrls
  avatarUrl: String
  signature: String
}

input CharterSocialUrlsInput {
  twitter: String
  facebook: String
  instagram: String
  linkedIn: String
  youTube: String
  email: String
}

type CharterSocialUrls {
  twitter: String
  facebook: String
  instagram: String
  linkedIn: String
  youTube: String
  email: String
}

input ConstitutionSignatureInput {
  signer: String
  signature: String
  message: String
}

type ConstitutionSignature {
  signer: String
  signature: String
  message: String
}

input CharterMissionInput {
  purpose: String
  structure: String
  revenue: String
  encumbrances: String
  miscellaneous: String
}

type CharterMission {
  purpose: String
  structure: String
  revenue: String
  encumbrances: String
  miscellaneous: String
}

## JSONb Store object schemas

type JsonField {
  key: String!
  value: JsonFieldValue!
}

input JsonbInput {
  id: String!
  jsonStr: String!
}

type Jsonb {
  id: String!
  hash: String!
  createdDate: Time!
  lastUpdatedDate: Time!
  rawJson: String!
  json: [JsonField!]!
}

## Common object schemas

input DateRange {
  gt: Int
  lt: Int
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

## Scalars

scalar ArticlePayloadValue
scalar JsonFieldValue
scalar RawObject
scalar Time
`},
)
