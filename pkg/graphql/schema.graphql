schema {
  query: Query
}

# The query type, represents all of the entry points into our object graph
type Query {
  currentUser: User
  listings(whitelistedOnly: Boolean, first: Int, after: String): [Listing!]!
  listing(addr: String!): Listing
  governanceEvents(
    addr: String
    creationDate: DateRange
    first: Int
    after: String
  ): [GovernanceEvent!]!
  governanceEventsTxHash(txHash: String!): [GovernanceEvent!]!
  challenge(id: Int!): Challenge
  articles(addr: String, first: Int, after: String): [ContentRevision!]!
}

type Mutation {
  kycCreateApplicant(applicant: KycCreateApplicantInput!): String
  kycGenerateSdkToken(applicantID: String!): String
  kycCreateCheck(applicantID: String!, facialVariant: String): String
  userSetEthAddress(input: UserSetEthAddressInput!): String
  userUpdate(uid: String, input: UserUpdateInput): User
}

input DateRange {
  gt: Time
  lt: Time
}

# A type that reflects values in users.User
type User {
  uid: String
  email: String
  ethAddress: String
  onfidoApplicantId: String
  kycStatus: String
  quizPayload: RawObject
  quizStatus: String
  # dateCreated: Int
  # dateUpdated: Int
  invoices: [Invoice]
  isTokenFoundryRegistered: Boolean
}

# A type that reflects values in invoicing.PostgresInvoice
type Invoice {
  hash: String
  email: String
  phone: String
  name: String
  amount: Float
  invoiceID: String
  invoiceNum: String
  invoiceStatus: String
  checkID: String
  checkStatus: String
  stopPoll: Boolean
  isCheckbook: Boolean
  isThirdParty: Boolean
  referralCode: String
  referredBy: String
  emailState: Int
}

# A type that reflects values in model.Listing
type Listing {
  name: String!
  contractAddress: String!
  whitelisted: Boolean!
  lastGovState: String!
  url: String!
  charterUri: String!
  ownerAddresses: [String!]!
  owner: String!
  contributorAddresses: [String!]!
  createdDate: Time!
  applicationDate: Time
  approvalDate: Time
  lastUpdatedDate: Time!
  appExpiry: Time!
  appExpiryTs: Int!
  unstakedDeposit: String!
  challengeID: Int!
  challenge: Challenge
}

# A type that reflects values in model.Challenge
type Challenge {
  challengeID: Int!
  listingAddress: String!
  statement: String!
  rewardPool: Int!
  challenger: String!
  resolved: Boolean!
  stake: Int!
  totalTokens: Int!
  poll: Poll
  requestAppealExpiry: Int!
  appeal: Appeal
  lastUpdatedDateTs: Int!
}

# A type that reflects values in model.Appeal
type Appeal {
  requester: String!
  appealFeePaid: Int!
  appealPhaseExpiry: Int!
  appealGranted: Boolean!
  appealOpenToChallengeExpiry: Int!
  statement: String!
  appealChallengeID: Int!
}

# A type that reflects values in model.Poll
type Poll {
  commitEndDate: Int!
  revealEndDate: Int!
  voteQuorum: Int!
  votesFor: Int!
  votesAgainst: Int!
}

# A type that reflects values in model.Metadata
type Metadata {
  key: String!
  value: String!
}

# A type that reflects block data in model.BlockData
type BlockData {
  blockNumber: Int!
  txHash: String!
  txIndex: Int!
  blockHash: String!
  index: Int!
}

# A type that reflects values in model.GovernanceEvent
type GovernanceEvent {
  listingAddress: String!
  senderAddress: String!
  metadata: [Metadata!]!
  governanceEventType: String!
  creationDate: Time!
  lastUpdatedDate: Time!
  eventHash: String!
  blockData: BlockData!
  listing: Listing!
}

# A type that reflects values in model.ArticlePayload
type ArticlePayload {
  key: String!
  value: ArticlePayloadValue!
}

# A type that reflects values in model.ContentRevision
type ContentRevision {
  listingAddress: String!
  payload: [ArticlePayload!]!
  payloadHash: String!
  editorAddress: String!
  contractContentId: Int!
  contractRevisionId: Int!
  revisionUri: String!
  revisionDate: Time!
}

# A type that reflects values in onfido.CreateApplicantRequest
input KycCreateApplicantInput {
  firstName: String!
  lastName: String!
  email: String
  middleName: String
  profession: String
  nationality: String
  countryOfResidence: String
  dateOfBirth: String
  buildingNumber: String
  street: String
  aptNumber: String
  city: String
  state: String
  zipcode: String
}

input UserSetEthAddressInput {
  message: String!
  messageHash: String!
  signature: String!
  signer: String!
  r: String!
  s: String!
  v: String!
}

input UserUpdateInput {
  onfidoApplicantID: String
  kycStatus: String
  quizPayload: RawObject
  quizStatus: String
}

scalar Time
scalar ArticlePayloadValue
scalar RawObject
