// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// NewsroomContractABI is the input ABI used to generate the binding from.
const NewsroomContractABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"role\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"newsroomName\",\"type\":\"string\"},{\"name\":\"charterUri\",\"type\":\"string\"},{\"name\":\"charterHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"editor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"contentId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ContentPublished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contentId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"revisionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"author\",\"type\":\"address\"}],\"name\":\"RevisionSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"editor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"contentId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"revisionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"RevisionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"granter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"grantee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"granter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"grantee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"name\":\"contentId\",\"type\":\"uint256\"}],\"name\":\"getContent\",\"outputs\":[{\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"name\":\"uri\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"author\",\"type\":\"address\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contentId\",\"type\":\"uint256\"},{\"name\":\"revisionId\",\"type\":\"uint256\"}],\"name\":\"getRevision\",\"outputs\":[{\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"name\":\"uri\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"author\",\"type\":\"address\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contentId\",\"type\":\"uint256\"}],\"name\":\"revisionCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contentId\",\"type\":\"uint256\"}],\"name\":\"isContentSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contentId\",\"type\":\"uint256\"},{\"name\":\"revisionId\",\"type\":\"uint256\"}],\"name\":\"isRevisionSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"role\",\"type\":\"string\"}],\"name\":\"addRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"role\",\"type\":\"string\"}],\"name\":\"removeRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contentUri\",\"type\":\"string\"},{\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"name\":\"author\",\"type\":\"address\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"publishContent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contentId\",\"type\":\"uint256\"},{\"name\":\"contentUri\",\"type\":\"string\"},{\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"updateRevision\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contentId\",\"type\":\"uint256\"},{\"name\":\"revisionId\",\"type\":\"uint256\"},{\"name\":\"author\",\"type\":\"address\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"signRevision\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// NewsroomContractBin is the compiled bytecode used for deploying new contracts.
const NewsroomContractBin = ``

// DeployNewsroomContract deploys a new Ethereum contract, binding an instance of NewsroomContract to it.
func DeployNewsroomContract(auth *bind.TransactOpts, backend bind.ContractBackend, newsroomName string, charterUri string, charterHash [32]byte) (common.Address, *types.Transaction, *NewsroomContract, error) {
	parsed, err := abi.JSON(strings.NewReader(NewsroomContractABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(NewsroomContractBin), backend, newsroomName, charterUri, charterHash)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NewsroomContract{NewsroomContractCaller: NewsroomContractCaller{contract: contract}, NewsroomContractTransactor: NewsroomContractTransactor{contract: contract}, NewsroomContractFilterer: NewsroomContractFilterer{contract: contract}}, nil
}

// NewsroomContract is an auto generated Go binding around an Ethereum contract.
type NewsroomContract struct {
	NewsroomContractCaller     // Read-only binding to the contract
	NewsroomContractTransactor // Write-only binding to the contract
	NewsroomContractFilterer   // Log filterer for contract events
}

// NewsroomContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type NewsroomContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewsroomContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NewsroomContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewsroomContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NewsroomContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewsroomContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NewsroomContractSession struct {
	Contract     *NewsroomContract // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NewsroomContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NewsroomContractCallerSession struct {
	Contract *NewsroomContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// NewsroomContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NewsroomContractTransactorSession struct {
	Contract     *NewsroomContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// NewsroomContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type NewsroomContractRaw struct {
	Contract *NewsroomContract // Generic contract binding to access the raw methods on
}

// NewsroomContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NewsroomContractCallerRaw struct {
	Contract *NewsroomContractCaller // Generic read-only contract binding to access the raw methods on
}

// NewsroomContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NewsroomContractTransactorRaw struct {
	Contract *NewsroomContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNewsroomContract creates a new instance of NewsroomContract, bound to a specific deployed contract.
func NewNewsroomContract(address common.Address, backend bind.ContractBackend) (*NewsroomContract, error) {
	contract, err := bindNewsroomContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NewsroomContract{NewsroomContractCaller: NewsroomContractCaller{contract: contract}, NewsroomContractTransactor: NewsroomContractTransactor{contract: contract}, NewsroomContractFilterer: NewsroomContractFilterer{contract: contract}}, nil
}

// NewNewsroomContractCaller creates a new read-only instance of NewsroomContract, bound to a specific deployed contract.
func NewNewsroomContractCaller(address common.Address, caller bind.ContractCaller) (*NewsroomContractCaller, error) {
	contract, err := bindNewsroomContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NewsroomContractCaller{contract: contract}, nil
}

// NewNewsroomContractTransactor creates a new write-only instance of NewsroomContract, bound to a specific deployed contract.
func NewNewsroomContractTransactor(address common.Address, transactor bind.ContractTransactor) (*NewsroomContractTransactor, error) {
	contract, err := bindNewsroomContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NewsroomContractTransactor{contract: contract}, nil
}

// NewNewsroomContractFilterer creates a new log filterer instance of NewsroomContract, bound to a specific deployed contract.
func NewNewsroomContractFilterer(address common.Address, filterer bind.ContractFilterer) (*NewsroomContractFilterer, error) {
	contract, err := bindNewsroomContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NewsroomContractFilterer{contract: contract}, nil
}

// bindNewsroomContract binds a generic wrapper to an already deployed contract.
func bindNewsroomContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(NewsroomContractABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NewsroomContract *NewsroomContractRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _NewsroomContract.Contract.NewsroomContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NewsroomContract *NewsroomContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NewsroomContract.Contract.NewsroomContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NewsroomContract *NewsroomContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NewsroomContract.Contract.NewsroomContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NewsroomContract *NewsroomContractCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _NewsroomContract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NewsroomContract *NewsroomContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NewsroomContract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NewsroomContract *NewsroomContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NewsroomContract.Contract.contract.Transact(opts, method, params...)
}

// ContentCount is a free data retrieval call binding the contract method 0xcc459696.
//
// Solidity: function contentCount() constant returns(uint256)
func (_NewsroomContract *NewsroomContractCaller) ContentCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _NewsroomContract.contract.Call(opts, out, "contentCount")
	return *ret0, err
}

// ContentCount is a free data retrieval call binding the contract method 0xcc459696.
//
// Solidity: function contentCount() constant returns(uint256)
func (_NewsroomContract *NewsroomContractSession) ContentCount() (*big.Int, error) {
	return _NewsroomContract.Contract.ContentCount(&_NewsroomContract.CallOpts)
}

// ContentCount is a free data retrieval call binding the contract method 0xcc459696.
//
// Solidity: function contentCount() constant returns(uint256)
func (_NewsroomContract *NewsroomContractCallerSession) ContentCount() (*big.Int, error) {
	return _NewsroomContract.Contract.ContentCount(&_NewsroomContract.CallOpts)
}

// GetContent is a free data retrieval call binding the contract method 0x0b7ad54c.
//
// Solidity: function getContent(contentId uint256) constant returns(contentHash bytes32, uri string, timestamp uint256, author address, signature bytes)
func (_NewsroomContract *NewsroomContractCaller) GetContent(opts *bind.CallOpts, contentId *big.Int) (struct {
	ContentHash [32]byte
	Uri         string
	Timestamp   *big.Int
	Author      common.Address
	Signature   []byte
}, error) {
	ret := new(struct {
		ContentHash [32]byte
		Uri         string
		Timestamp   *big.Int
		Author      common.Address
		Signature   []byte
	})
	out := ret
	err := _NewsroomContract.contract.Call(opts, out, "getContent", contentId)
	return *ret, err
}

// GetContent is a free data retrieval call binding the contract method 0x0b7ad54c.
//
// Solidity: function getContent(contentId uint256) constant returns(contentHash bytes32, uri string, timestamp uint256, author address, signature bytes)
func (_NewsroomContract *NewsroomContractSession) GetContent(contentId *big.Int) (struct {
	ContentHash [32]byte
	Uri         string
	Timestamp   *big.Int
	Author      common.Address
	Signature   []byte
}, error) {
	return _NewsroomContract.Contract.GetContent(&_NewsroomContract.CallOpts, contentId)
}

// GetContent is a free data retrieval call binding the contract method 0x0b7ad54c.
//
// Solidity: function getContent(contentId uint256) constant returns(contentHash bytes32, uri string, timestamp uint256, author address, signature bytes)
func (_NewsroomContract *NewsroomContractCallerSession) GetContent(contentId *big.Int) (struct {
	ContentHash [32]byte
	Uri         string
	Timestamp   *big.Int
	Author      common.Address
	Signature   []byte
}, error) {
	return _NewsroomContract.Contract.GetContent(&_NewsroomContract.CallOpts, contentId)
}

// GetRevision is a free data retrieval call binding the contract method 0x6192e3e8.
//
// Solidity: function getRevision(contentId uint256, revisionId uint256) constant returns(contentHash bytes32, uri string, timestamp uint256, author address, signature bytes)
func (_NewsroomContract *NewsroomContractCaller) GetRevision(opts *bind.CallOpts, contentId *big.Int, revisionId *big.Int) (struct {
	ContentHash [32]byte
	Uri         string
	Timestamp   *big.Int
	Author      common.Address
	Signature   []byte
}, error) {
	ret := new(struct {
		ContentHash [32]byte
		Uri         string
		Timestamp   *big.Int
		Author      common.Address
		Signature   []byte
	})
	out := ret
	err := _NewsroomContract.contract.Call(opts, out, "getRevision", contentId, revisionId)
	return *ret, err
}

// GetRevision is a free data retrieval call binding the contract method 0x6192e3e8.
//
// Solidity: function getRevision(contentId uint256, revisionId uint256) constant returns(contentHash bytes32, uri string, timestamp uint256, author address, signature bytes)
func (_NewsroomContract *NewsroomContractSession) GetRevision(contentId *big.Int, revisionId *big.Int) (struct {
	ContentHash [32]byte
	Uri         string
	Timestamp   *big.Int
	Author      common.Address
	Signature   []byte
}, error) {
	return _NewsroomContract.Contract.GetRevision(&_NewsroomContract.CallOpts, contentId, revisionId)
}

// GetRevision is a free data retrieval call binding the contract method 0x6192e3e8.
//
// Solidity: function getRevision(contentId uint256, revisionId uint256) constant returns(contentHash bytes32, uri string, timestamp uint256, author address, signature bytes)
func (_NewsroomContract *NewsroomContractCallerSession) GetRevision(contentId *big.Int, revisionId *big.Int) (struct {
	ContentHash [32]byte
	Uri         string
	Timestamp   *big.Int
	Author      common.Address
	Signature   []byte
}, error) {
	return _NewsroomContract.Contract.GetRevision(&_NewsroomContract.CallOpts, contentId, revisionId)
}

// HasRole is a free data retrieval call binding the contract method 0x217fe6c6.
//
// Solidity: function hasRole(user address, role string) constant returns(bool)
func (_NewsroomContract *NewsroomContractCaller) HasRole(opts *bind.CallOpts, user common.Address, role string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _NewsroomContract.contract.Call(opts, out, "hasRole", user, role)
	return *ret0, err
}

// HasRole is a free data retrieval call binding the contract method 0x217fe6c6.
//
// Solidity: function hasRole(user address, role string) constant returns(bool)
func (_NewsroomContract *NewsroomContractSession) HasRole(user common.Address, role string) (bool, error) {
	return _NewsroomContract.Contract.HasRole(&_NewsroomContract.CallOpts, user, role)
}

// HasRole is a free data retrieval call binding the contract method 0x217fe6c6.
//
// Solidity: function hasRole(user address, role string) constant returns(bool)
func (_NewsroomContract *NewsroomContractCallerSession) HasRole(user common.Address, role string) (bool, error) {
	return _NewsroomContract.Contract.HasRole(&_NewsroomContract.CallOpts, user, role)
}

// IsContentSigned is a free data retrieval call binding the contract method 0xefc97390.
//
// Solidity: function isContentSigned(contentId uint256) constant returns(bool)
func (_NewsroomContract *NewsroomContractCaller) IsContentSigned(opts *bind.CallOpts, contentId *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _NewsroomContract.contract.Call(opts, out, "isContentSigned", contentId)
	return *ret0, err
}

// IsContentSigned is a free data retrieval call binding the contract method 0xefc97390.
//
// Solidity: function isContentSigned(contentId uint256) constant returns(bool)
func (_NewsroomContract *NewsroomContractSession) IsContentSigned(contentId *big.Int) (bool, error) {
	return _NewsroomContract.Contract.IsContentSigned(&_NewsroomContract.CallOpts, contentId)
}

// IsContentSigned is a free data retrieval call binding the contract method 0xefc97390.
//
// Solidity: function isContentSigned(contentId uint256) constant returns(bool)
func (_NewsroomContract *NewsroomContractCallerSession) IsContentSigned(contentId *big.Int) (bool, error) {
	return _NewsroomContract.Contract.IsContentSigned(&_NewsroomContract.CallOpts, contentId)
}

// IsOwner is a free data retrieval call binding the contract method 0x2f54bf6e.
//
// Solidity: function isOwner(user address) constant returns(bool)
func (_NewsroomContract *NewsroomContractCaller) IsOwner(opts *bind.CallOpts, user common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _NewsroomContract.contract.Call(opts, out, "isOwner", user)
	return *ret0, err
}

// IsOwner is a free data retrieval call binding the contract method 0x2f54bf6e.
//
// Solidity: function isOwner(user address) constant returns(bool)
func (_NewsroomContract *NewsroomContractSession) IsOwner(user common.Address) (bool, error) {
	return _NewsroomContract.Contract.IsOwner(&_NewsroomContract.CallOpts, user)
}

// IsOwner is a free data retrieval call binding the contract method 0x2f54bf6e.
//
// Solidity: function isOwner(user address) constant returns(bool)
func (_NewsroomContract *NewsroomContractCallerSession) IsOwner(user common.Address) (bool, error) {
	return _NewsroomContract.Contract.IsOwner(&_NewsroomContract.CallOpts, user)
}

// IsRevisionSigned is a free data retrieval call binding the contract method 0xa54d1988.
//
// Solidity: function isRevisionSigned(contentId uint256, revisionId uint256) constant returns(bool)
func (_NewsroomContract *NewsroomContractCaller) IsRevisionSigned(opts *bind.CallOpts, contentId *big.Int, revisionId *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _NewsroomContract.contract.Call(opts, out, "isRevisionSigned", contentId, revisionId)
	return *ret0, err
}

// IsRevisionSigned is a free data retrieval call binding the contract method 0xa54d1988.
//
// Solidity: function isRevisionSigned(contentId uint256, revisionId uint256) constant returns(bool)
func (_NewsroomContract *NewsroomContractSession) IsRevisionSigned(contentId *big.Int, revisionId *big.Int) (bool, error) {
	return _NewsroomContract.Contract.IsRevisionSigned(&_NewsroomContract.CallOpts, contentId, revisionId)
}

// IsRevisionSigned is a free data retrieval call binding the contract method 0xa54d1988.
//
// Solidity: function isRevisionSigned(contentId uint256, revisionId uint256) constant returns(bool)
func (_NewsroomContract *NewsroomContractCallerSession) IsRevisionSigned(contentId *big.Int, revisionId *big.Int) (bool, error) {
	return _NewsroomContract.Contract.IsRevisionSigned(&_NewsroomContract.CallOpts, contentId, revisionId)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_NewsroomContract *NewsroomContractCaller) Name(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _NewsroomContract.contract.Call(opts, out, "name")
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_NewsroomContract *NewsroomContractSession) Name() (string, error) {
	return _NewsroomContract.Contract.Name(&_NewsroomContract.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_NewsroomContract *NewsroomContractCallerSession) Name() (string, error) {
	return _NewsroomContract.Contract.Name(&_NewsroomContract.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_NewsroomContract *NewsroomContractCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _NewsroomContract.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_NewsroomContract *NewsroomContractSession) Owner() (common.Address, error) {
	return _NewsroomContract.Contract.Owner(&_NewsroomContract.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_NewsroomContract *NewsroomContractCallerSession) Owner() (common.Address, error) {
	return _NewsroomContract.Contract.Owner(&_NewsroomContract.CallOpts)
}

// RevisionCount is a free data retrieval call binding the contract method 0x5614bdc8.
//
// Solidity: function revisionCount(contentId uint256) constant returns(uint256)
func (_NewsroomContract *NewsroomContractCaller) RevisionCount(opts *bind.CallOpts, contentId *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _NewsroomContract.contract.Call(opts, out, "revisionCount", contentId)
	return *ret0, err
}

// RevisionCount is a free data retrieval call binding the contract method 0x5614bdc8.
//
// Solidity: function revisionCount(contentId uint256) constant returns(uint256)
func (_NewsroomContract *NewsroomContractSession) RevisionCount(contentId *big.Int) (*big.Int, error) {
	return _NewsroomContract.Contract.RevisionCount(&_NewsroomContract.CallOpts, contentId)
}

// RevisionCount is a free data retrieval call binding the contract method 0x5614bdc8.
//
// Solidity: function revisionCount(contentId uint256) constant returns(uint256)
func (_NewsroomContract *NewsroomContractCallerSession) RevisionCount(contentId *big.Int) (*big.Int, error) {
	return _NewsroomContract.Contract.RevisionCount(&_NewsroomContract.CallOpts, contentId)
}

// AddRole is a paid mutator transaction binding the contract method 0x7d72aa65.
//
// Solidity: function addRole(who address, role string) returns()
func (_NewsroomContract *NewsroomContractTransactor) AddRole(opts *bind.TransactOpts, who common.Address, role string) (*types.Transaction, error) {
	return _NewsroomContract.contract.Transact(opts, "addRole", who, role)
}

// AddRole is a paid mutator transaction binding the contract method 0x7d72aa65.
//
// Solidity: function addRole(who address, role string) returns()
func (_NewsroomContract *NewsroomContractSession) AddRole(who common.Address, role string) (*types.Transaction, error) {
	return _NewsroomContract.Contract.AddRole(&_NewsroomContract.TransactOpts, who, role)
}

// AddRole is a paid mutator transaction binding the contract method 0x7d72aa65.
//
// Solidity: function addRole(who address, role string) returns()
func (_NewsroomContract *NewsroomContractTransactorSession) AddRole(who common.Address, role string) (*types.Transaction, error) {
	return _NewsroomContract.Contract.AddRole(&_NewsroomContract.TransactOpts, who, role)
}

// PublishContent is a paid mutator transaction binding the contract method 0x84a1176c.
//
// Solidity: function publishContent(contentUri string, contentHash bytes32, author address, signature bytes) returns(uint256)
func (_NewsroomContract *NewsroomContractTransactor) PublishContent(opts *bind.TransactOpts, contentUri string, contentHash [32]byte, author common.Address, signature []byte) (*types.Transaction, error) {
	return _NewsroomContract.contract.Transact(opts, "publishContent", contentUri, contentHash, author, signature)
}

// PublishContent is a paid mutator transaction binding the contract method 0x84a1176c.
//
// Solidity: function publishContent(contentUri string, contentHash bytes32, author address, signature bytes) returns(uint256)
func (_NewsroomContract *NewsroomContractSession) PublishContent(contentUri string, contentHash [32]byte, author common.Address, signature []byte) (*types.Transaction, error) {
	return _NewsroomContract.Contract.PublishContent(&_NewsroomContract.TransactOpts, contentUri, contentHash, author, signature)
}

// PublishContent is a paid mutator transaction binding the contract method 0x84a1176c.
//
// Solidity: function publishContent(contentUri string, contentHash bytes32, author address, signature bytes) returns(uint256)
func (_NewsroomContract *NewsroomContractTransactorSession) PublishContent(contentUri string, contentHash [32]byte, author common.Address, signature []byte) (*types.Transaction, error) {
	return _NewsroomContract.Contract.PublishContent(&_NewsroomContract.TransactOpts, contentUri, contentHash, author, signature)
}

// RemoveRole is a paid mutator transaction binding the contract method 0x1bfe0308.
//
// Solidity: function removeRole(who address, role string) returns()
func (_NewsroomContract *NewsroomContractTransactor) RemoveRole(opts *bind.TransactOpts, who common.Address, role string) (*types.Transaction, error) {
	return _NewsroomContract.contract.Transact(opts, "removeRole", who, role)
}

// RemoveRole is a paid mutator transaction binding the contract method 0x1bfe0308.
//
// Solidity: function removeRole(who address, role string) returns()
func (_NewsroomContract *NewsroomContractSession) RemoveRole(who common.Address, role string) (*types.Transaction, error) {
	return _NewsroomContract.Contract.RemoveRole(&_NewsroomContract.TransactOpts, who, role)
}

// RemoveRole is a paid mutator transaction binding the contract method 0x1bfe0308.
//
// Solidity: function removeRole(who address, role string) returns()
func (_NewsroomContract *NewsroomContractTransactorSession) RemoveRole(who common.Address, role string) (*types.Transaction, error) {
	return _NewsroomContract.Contract.RemoveRole(&_NewsroomContract.TransactOpts, who, role)
}

// SetName is a paid mutator transaction binding the contract method 0xc47f0027.
//
// Solidity: function setName(newName string) returns()
func (_NewsroomContract *NewsroomContractTransactor) SetName(opts *bind.TransactOpts, newName string) (*types.Transaction, error) {
	return _NewsroomContract.contract.Transact(opts, "setName", newName)
}

// SetName is a paid mutator transaction binding the contract method 0xc47f0027.
//
// Solidity: function setName(newName string) returns()
func (_NewsroomContract *NewsroomContractSession) SetName(newName string) (*types.Transaction, error) {
	return _NewsroomContract.Contract.SetName(&_NewsroomContract.TransactOpts, newName)
}

// SetName is a paid mutator transaction binding the contract method 0xc47f0027.
//
// Solidity: function setName(newName string) returns()
func (_NewsroomContract *NewsroomContractTransactorSession) SetName(newName string) (*types.Transaction, error) {
	return _NewsroomContract.Contract.SetName(&_NewsroomContract.TransactOpts, newName)
}

// SignRevision is a paid mutator transaction binding the contract method 0x65462d96.
//
// Solidity: function signRevision(contentId uint256, revisionId uint256, author address, signature bytes) returns()
func (_NewsroomContract *NewsroomContractTransactor) SignRevision(opts *bind.TransactOpts, contentId *big.Int, revisionId *big.Int, author common.Address, signature []byte) (*types.Transaction, error) {
	return _NewsroomContract.contract.Transact(opts, "signRevision", contentId, revisionId, author, signature)
}

// SignRevision is a paid mutator transaction binding the contract method 0x65462d96.
//
// Solidity: function signRevision(contentId uint256, revisionId uint256, author address, signature bytes) returns()
func (_NewsroomContract *NewsroomContractSession) SignRevision(contentId *big.Int, revisionId *big.Int, author common.Address, signature []byte) (*types.Transaction, error) {
	return _NewsroomContract.Contract.SignRevision(&_NewsroomContract.TransactOpts, contentId, revisionId, author, signature)
}

// SignRevision is a paid mutator transaction binding the contract method 0x65462d96.
//
// Solidity: function signRevision(contentId uint256, revisionId uint256, author address, signature bytes) returns()
func (_NewsroomContract *NewsroomContractTransactorSession) SignRevision(contentId *big.Int, revisionId *big.Int, author common.Address, signature []byte) (*types.Transaction, error) {
	return _NewsroomContract.Contract.SignRevision(&_NewsroomContract.TransactOpts, contentId, revisionId, author, signature)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(newOwner address) returns()
func (_NewsroomContract *NewsroomContractTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _NewsroomContract.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(newOwner address) returns()
func (_NewsroomContract *NewsroomContractSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _NewsroomContract.Contract.TransferOwnership(&_NewsroomContract.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(newOwner address) returns()
func (_NewsroomContract *NewsroomContractTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _NewsroomContract.Contract.TransferOwnership(&_NewsroomContract.TransactOpts, newOwner)
}

// UpdateRevision is a paid mutator transaction binding the contract method 0xe45e1c7d.
//
// Solidity: function updateRevision(contentId uint256, contentUri string, contentHash bytes32, signature bytes) returns()
func (_NewsroomContract *NewsroomContractTransactor) UpdateRevision(opts *bind.TransactOpts, contentId *big.Int, contentUri string, contentHash [32]byte, signature []byte) (*types.Transaction, error) {
	return _NewsroomContract.contract.Transact(opts, "updateRevision", contentId, contentUri, contentHash, signature)
}

// UpdateRevision is a paid mutator transaction binding the contract method 0xe45e1c7d.
//
// Solidity: function updateRevision(contentId uint256, contentUri string, contentHash bytes32, signature bytes) returns()
func (_NewsroomContract *NewsroomContractSession) UpdateRevision(contentId *big.Int, contentUri string, contentHash [32]byte, signature []byte) (*types.Transaction, error) {
	return _NewsroomContract.Contract.UpdateRevision(&_NewsroomContract.TransactOpts, contentId, contentUri, contentHash, signature)
}

// UpdateRevision is a paid mutator transaction binding the contract method 0xe45e1c7d.
//
// Solidity: function updateRevision(contentId uint256, contentUri string, contentHash bytes32, signature bytes) returns()
func (_NewsroomContract *NewsroomContractTransactorSession) UpdateRevision(contentId *big.Int, contentUri string, contentHash [32]byte, signature []byte) (*types.Transaction, error) {
	return _NewsroomContract.Contract.UpdateRevision(&_NewsroomContract.TransactOpts, contentId, contentUri, contentHash, signature)
}

// NewsroomContractContentPublishedIterator is returned from FilterContentPublished and is used to iterate over the raw logs and unpacked data for ContentPublished events raised by the NewsroomContract contract.
type NewsroomContractContentPublishedIterator struct {
	Event *NewsroomContractContentPublished // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NewsroomContractContentPublishedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NewsroomContractContentPublished)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NewsroomContractContentPublished)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NewsroomContractContentPublishedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NewsroomContractContentPublishedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NewsroomContractContentPublished represents a ContentPublished event raised by the NewsroomContract contract.
type NewsroomContractContentPublished struct {
	Editor    common.Address
	ContentId *big.Int
	Uri       string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterContentPublished is a free log retrieval operation binding the contract event 0x1ede735f9b446d8014022fed176848ac3894c54942bef9ff452f7ae42b50d5ae.
//
// Solidity: event ContentPublished(editor indexed address, contentId indexed uint256, uri string)
func (_NewsroomContract *NewsroomContractFilterer) FilterContentPublished(opts *bind.FilterOpts, editor []common.Address, contentId []*big.Int) (*NewsroomContractContentPublishedIterator, error) {

	var editorRule []interface{}
	for _, editorItem := range editor {
		editorRule = append(editorRule, editorItem)
	}
	var contentIdRule []interface{}
	for _, contentIdItem := range contentId {
		contentIdRule = append(contentIdRule, contentIdItem)
	}

	logs, sub, err := _NewsroomContract.contract.FilterLogs(opts, "ContentPublished", editorRule, contentIdRule)
	if err != nil {
		return nil, err
	}
	return &NewsroomContractContentPublishedIterator{contract: _NewsroomContract.contract, event: "ContentPublished", logs: logs, sub: sub}, nil
}

// WatchContentPublished is a free log subscription operation binding the contract event 0x1ede735f9b446d8014022fed176848ac3894c54942bef9ff452f7ae42b50d5ae.
//
// Solidity: event ContentPublished(editor indexed address, contentId indexed uint256, uri string)
func (_NewsroomContract *NewsroomContractFilterer) WatchContentPublished(opts *bind.WatchOpts, sink chan<- *NewsroomContractContentPublished, editor []common.Address, contentId []*big.Int) (event.Subscription, error) {

	var editorRule []interface{}
	for _, editorItem := range editor {
		editorRule = append(editorRule, editorItem)
	}
	var contentIdRule []interface{}
	for _, contentIdItem := range contentId {
		contentIdRule = append(contentIdRule, contentIdItem)
	}

	logs, sub, err := _NewsroomContract.contract.WatchLogs(opts, "ContentPublished", editorRule, contentIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NewsroomContractContentPublished)
				if err := _NewsroomContract.contract.UnpackLog(event, "ContentPublished", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// NewsroomContractNameChangedIterator is returned from FilterNameChanged and is used to iterate over the raw logs and unpacked data for NameChanged events raised by the NewsroomContract contract.
type NewsroomContractNameChangedIterator struct {
	Event *NewsroomContractNameChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NewsroomContractNameChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NewsroomContractNameChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NewsroomContractNameChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NewsroomContractNameChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NewsroomContractNameChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NewsroomContractNameChanged represents a NameChanged event raised by the NewsroomContract contract.
type NewsroomContractNameChanged struct {
	NewName string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNameChanged is a free log retrieval operation binding the contract event 0x4737457377f528cc8afd815f73ecb8b05df80d047dbffc41c17750a4033592bc.
//
// Solidity: event NameChanged(newName string)
func (_NewsroomContract *NewsroomContractFilterer) FilterNameChanged(opts *bind.FilterOpts) (*NewsroomContractNameChangedIterator, error) {

	logs, sub, err := _NewsroomContract.contract.FilterLogs(opts, "NameChanged")
	if err != nil {
		return nil, err
	}
	return &NewsroomContractNameChangedIterator{contract: _NewsroomContract.contract, event: "NameChanged", logs: logs, sub: sub}, nil
}

// WatchNameChanged is a free log subscription operation binding the contract event 0x4737457377f528cc8afd815f73ecb8b05df80d047dbffc41c17750a4033592bc.
//
// Solidity: event NameChanged(newName string)
func (_NewsroomContract *NewsroomContractFilterer) WatchNameChanged(opts *bind.WatchOpts, sink chan<- *NewsroomContractNameChanged) (event.Subscription, error) {

	logs, sub, err := _NewsroomContract.contract.WatchLogs(opts, "NameChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NewsroomContractNameChanged)
				if err := _NewsroomContract.contract.UnpackLog(event, "NameChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// NewsroomContractOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the NewsroomContract contract.
type NewsroomContractOwnershipTransferredIterator struct {
	Event *NewsroomContractOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NewsroomContractOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NewsroomContractOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NewsroomContractOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NewsroomContractOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NewsroomContractOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NewsroomContractOwnershipTransferred represents a OwnershipTransferred event raised by the NewsroomContract contract.
type NewsroomContractOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(previousOwner indexed address, newOwner indexed address)
func (_NewsroomContract *NewsroomContractFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*NewsroomContractOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _NewsroomContract.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &NewsroomContractOwnershipTransferredIterator{contract: _NewsroomContract.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(previousOwner indexed address, newOwner indexed address)
func (_NewsroomContract *NewsroomContractFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *NewsroomContractOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _NewsroomContract.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NewsroomContractOwnershipTransferred)
				if err := _NewsroomContract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// NewsroomContractRevisionSignedIterator is returned from FilterRevisionSigned and is used to iterate over the raw logs and unpacked data for RevisionSigned events raised by the NewsroomContract contract.
type NewsroomContractRevisionSignedIterator struct {
	Event *NewsroomContractRevisionSigned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NewsroomContractRevisionSignedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NewsroomContractRevisionSigned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NewsroomContractRevisionSigned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NewsroomContractRevisionSignedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NewsroomContractRevisionSignedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NewsroomContractRevisionSigned represents a RevisionSigned event raised by the NewsroomContract contract.
type NewsroomContractRevisionSigned struct {
	ContentId  *big.Int
	RevisionId *big.Int
	Author     common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRevisionSigned is a free log retrieval operation binding the contract event 0x605611fc50d3effbe4af88e82f5daebfcffe0fb8f3b34ed32f1a746290ccbc61.
//
// Solidity: event RevisionSigned(contentId indexed uint256, revisionId indexed uint256, author indexed address)
func (_NewsroomContract *NewsroomContractFilterer) FilterRevisionSigned(opts *bind.FilterOpts, contentId []*big.Int, revisionId []*big.Int, author []common.Address) (*NewsroomContractRevisionSignedIterator, error) {

	var contentIdRule []interface{}
	for _, contentIdItem := range contentId {
		contentIdRule = append(contentIdRule, contentIdItem)
	}
	var revisionIdRule []interface{}
	for _, revisionIdItem := range revisionId {
		revisionIdRule = append(revisionIdRule, revisionIdItem)
	}
	var authorRule []interface{}
	for _, authorItem := range author {
		authorRule = append(authorRule, authorItem)
	}

	logs, sub, err := _NewsroomContract.contract.FilterLogs(opts, "RevisionSigned", contentIdRule, revisionIdRule, authorRule)
	if err != nil {
		return nil, err
	}
	return &NewsroomContractRevisionSignedIterator{contract: _NewsroomContract.contract, event: "RevisionSigned", logs: logs, sub: sub}, nil
}

// WatchRevisionSigned is a free log subscription operation binding the contract event 0x605611fc50d3effbe4af88e82f5daebfcffe0fb8f3b34ed32f1a746290ccbc61.
//
// Solidity: event RevisionSigned(contentId indexed uint256, revisionId indexed uint256, author indexed address)
func (_NewsroomContract *NewsroomContractFilterer) WatchRevisionSigned(opts *bind.WatchOpts, sink chan<- *NewsroomContractRevisionSigned, contentId []*big.Int, revisionId []*big.Int, author []common.Address) (event.Subscription, error) {

	var contentIdRule []interface{}
	for _, contentIdItem := range contentId {
		contentIdRule = append(contentIdRule, contentIdItem)
	}
	var revisionIdRule []interface{}
	for _, revisionIdItem := range revisionId {
		revisionIdRule = append(revisionIdRule, revisionIdItem)
	}
	var authorRule []interface{}
	for _, authorItem := range author {
		authorRule = append(authorRule, authorItem)
	}

	logs, sub, err := _NewsroomContract.contract.WatchLogs(opts, "RevisionSigned", contentIdRule, revisionIdRule, authorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NewsroomContractRevisionSigned)
				if err := _NewsroomContract.contract.UnpackLog(event, "RevisionSigned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// NewsroomContractRevisionUpdatedIterator is returned from FilterRevisionUpdated and is used to iterate over the raw logs and unpacked data for RevisionUpdated events raised by the NewsroomContract contract.
type NewsroomContractRevisionUpdatedIterator struct {
	Event *NewsroomContractRevisionUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NewsroomContractRevisionUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NewsroomContractRevisionUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NewsroomContractRevisionUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NewsroomContractRevisionUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NewsroomContractRevisionUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NewsroomContractRevisionUpdated represents a RevisionUpdated event raised by the NewsroomContract contract.
type NewsroomContractRevisionUpdated struct {
	Editor     common.Address
	ContentId  *big.Int
	RevisionId *big.Int
	Uri        string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRevisionUpdated is a free log retrieval operation binding the contract event 0x18b6b5c485f8822a270464dd544d0715597dc8f1a007ee2b0252b62b8b9fb390.
//
// Solidity: event RevisionUpdated(editor indexed address, contentId indexed uint256, revisionId indexed uint256, uri string)
func (_NewsroomContract *NewsroomContractFilterer) FilterRevisionUpdated(opts *bind.FilterOpts, editor []common.Address, contentId []*big.Int, revisionId []*big.Int) (*NewsroomContractRevisionUpdatedIterator, error) {

	var editorRule []interface{}
	for _, editorItem := range editor {
		editorRule = append(editorRule, editorItem)
	}
	var contentIdRule []interface{}
	for _, contentIdItem := range contentId {
		contentIdRule = append(contentIdRule, contentIdItem)
	}
	var revisionIdRule []interface{}
	for _, revisionIdItem := range revisionId {
		revisionIdRule = append(revisionIdRule, revisionIdItem)
	}

	logs, sub, err := _NewsroomContract.contract.FilterLogs(opts, "RevisionUpdated", editorRule, contentIdRule, revisionIdRule)
	if err != nil {
		return nil, err
	}
	return &NewsroomContractRevisionUpdatedIterator{contract: _NewsroomContract.contract, event: "RevisionUpdated", logs: logs, sub: sub}, nil
}

// WatchRevisionUpdated is a free log subscription operation binding the contract event 0x18b6b5c485f8822a270464dd544d0715597dc8f1a007ee2b0252b62b8b9fb390.
//
// Solidity: event RevisionUpdated(editor indexed address, contentId indexed uint256, revisionId indexed uint256, uri string)
func (_NewsroomContract *NewsroomContractFilterer) WatchRevisionUpdated(opts *bind.WatchOpts, sink chan<- *NewsroomContractRevisionUpdated, editor []common.Address, contentId []*big.Int, revisionId []*big.Int) (event.Subscription, error) {

	var editorRule []interface{}
	for _, editorItem := range editor {
		editorRule = append(editorRule, editorItem)
	}
	var contentIdRule []interface{}
	for _, contentIdItem := range contentId {
		contentIdRule = append(contentIdRule, contentIdItem)
	}
	var revisionIdRule []interface{}
	for _, revisionIdItem := range revisionId {
		revisionIdRule = append(revisionIdRule, revisionIdItem)
	}

	logs, sub, err := _NewsroomContract.contract.WatchLogs(opts, "RevisionUpdated", editorRule, contentIdRule, revisionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NewsroomContractRevisionUpdated)
				if err := _NewsroomContract.contract.UnpackLog(event, "RevisionUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// NewsroomContractRoleAddedIterator is returned from FilterRoleAdded and is used to iterate over the raw logs and unpacked data for RoleAdded events raised by the NewsroomContract contract.
type NewsroomContractRoleAddedIterator struct {
	Event *NewsroomContractRoleAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NewsroomContractRoleAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NewsroomContractRoleAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NewsroomContractRoleAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NewsroomContractRoleAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NewsroomContractRoleAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NewsroomContractRoleAdded represents a RoleAdded event raised by the NewsroomContract contract.
type NewsroomContractRoleAdded struct {
	Granter common.Address
	Grantee common.Address
	Role    string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleAdded is a free log retrieval operation binding the contract event 0xa40c1dc2b34f6b51c3ea614b688f243e50047ed9fa3ea19010303d70dac781ed.
//
// Solidity: event RoleAdded(granter indexed address, grantee indexed address, role string)
func (_NewsroomContract *NewsroomContractFilterer) FilterRoleAdded(opts *bind.FilterOpts, granter []common.Address, grantee []common.Address) (*NewsroomContractRoleAddedIterator, error) {

	var granterRule []interface{}
	for _, granterItem := range granter {
		granterRule = append(granterRule, granterItem)
	}
	var granteeRule []interface{}
	for _, granteeItem := range grantee {
		granteeRule = append(granteeRule, granteeItem)
	}

	logs, sub, err := _NewsroomContract.contract.FilterLogs(opts, "RoleAdded", granterRule, granteeRule)
	if err != nil {
		return nil, err
	}
	return &NewsroomContractRoleAddedIterator{contract: _NewsroomContract.contract, event: "RoleAdded", logs: logs, sub: sub}, nil
}

// WatchRoleAdded is a free log subscription operation binding the contract event 0xa40c1dc2b34f6b51c3ea614b688f243e50047ed9fa3ea19010303d70dac781ed.
//
// Solidity: event RoleAdded(granter indexed address, grantee indexed address, role string)
func (_NewsroomContract *NewsroomContractFilterer) WatchRoleAdded(opts *bind.WatchOpts, sink chan<- *NewsroomContractRoleAdded, granter []common.Address, grantee []common.Address) (event.Subscription, error) {

	var granterRule []interface{}
	for _, granterItem := range granter {
		granterRule = append(granterRule, granterItem)
	}
	var granteeRule []interface{}
	for _, granteeItem := range grantee {
		granteeRule = append(granteeRule, granteeItem)
	}

	logs, sub, err := _NewsroomContract.contract.WatchLogs(opts, "RoleAdded", granterRule, granteeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NewsroomContractRoleAdded)
				if err := _NewsroomContract.contract.UnpackLog(event, "RoleAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// NewsroomContractRoleRemovedIterator is returned from FilterRoleRemoved and is used to iterate over the raw logs and unpacked data for RoleRemoved events raised by the NewsroomContract contract.
type NewsroomContractRoleRemovedIterator struct {
	Event *NewsroomContractRoleRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NewsroomContractRoleRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NewsroomContractRoleRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NewsroomContractRoleRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NewsroomContractRoleRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NewsroomContractRoleRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NewsroomContractRoleRemoved represents a RoleRemoved event raised by the NewsroomContract contract.
type NewsroomContractRoleRemoved struct {
	Granter common.Address
	Grantee common.Address
	Role    string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRemoved is a free log retrieval operation binding the contract event 0x6a52fb0cb0e75e6a6721483d2e539b38273ec6fe95b648a41e1a901594aeccb8.
//
// Solidity: event RoleRemoved(granter indexed address, grantee indexed address, role string)
func (_NewsroomContract *NewsroomContractFilterer) FilterRoleRemoved(opts *bind.FilterOpts, granter []common.Address, grantee []common.Address) (*NewsroomContractRoleRemovedIterator, error) {

	var granterRule []interface{}
	for _, granterItem := range granter {
		granterRule = append(granterRule, granterItem)
	}
	var granteeRule []interface{}
	for _, granteeItem := range grantee {
		granteeRule = append(granteeRule, granteeItem)
	}

	logs, sub, err := _NewsroomContract.contract.FilterLogs(opts, "RoleRemoved", granterRule, granteeRule)
	if err != nil {
		return nil, err
	}
	return &NewsroomContractRoleRemovedIterator{contract: _NewsroomContract.contract, event: "RoleRemoved", logs: logs, sub: sub}, nil
}

// WatchRoleRemoved is a free log subscription operation binding the contract event 0x6a52fb0cb0e75e6a6721483d2e539b38273ec6fe95b648a41e1a901594aeccb8.
//
// Solidity: event RoleRemoved(granter indexed address, grantee indexed address, role string)
func (_NewsroomContract *NewsroomContractFilterer) WatchRoleRemoved(opts *bind.WatchOpts, sink chan<- *NewsroomContractRoleRemoved, granter []common.Address, grantee []common.Address) (event.Subscription, error) {

	var granterRule []interface{}
	for _, granterItem := range granter {
		granterRule = append(granterRule, granterItem)
	}
	var granteeRule []interface{}
	for _, granteeItem := range grantee {
		granteeRule = append(granteeRule, granteeItem)
	}

	logs, sub, err := _NewsroomContract.contract.WatchLogs(opts, "RoleRemoved", granterRule, granteeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NewsroomContractRoleRemoved)
				if err := _NewsroomContract.contract.UnpackLog(event, "RoleRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
