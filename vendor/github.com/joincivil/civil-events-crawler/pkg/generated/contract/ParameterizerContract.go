// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// ParameterizerContractABI is the input ABI used to generate the binding from.
const ParameterizerContractABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"appExpiry\",\"type\":\"uint256\"},{\"name\":\"challengeID\",\"type\":\"uint256\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"processBy\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challenges\",\"outputs\":[{\"name\":\"rewardPool\",\"type\":\"uint256\"},{\"name\":\"challenger\",\"type\":\"address\"},{\"name\":\"resolved\",\"type\":\"bool\"},{\"name\":\"stake\",\"type\":\"uint256\"},{\"name\":\"winningTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"params\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voting\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"_plcrAddr\",\"type\":\"address\"},{\"name\":\"_uintParameters\",\"type\":\"uint256[16]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"propID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"appEndDate\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"_ReparameterizationProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"propID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"challengeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"commitEndDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"revealEndDate\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"challenger\",\"type\":\"address\"}],\"name\":\"_NewChallenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"propID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"_ProposalAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"propID\",\"type\":\"bytes32\"}],\"name\":\"_ProposalExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"propID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"challengeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rewardPool\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"_ChallengeSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"propID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"challengeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rewardPool\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"_ChallengeFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"challengeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"_RewardClaimed\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"proposeReparameterization\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_propID\",\"type\":\"bytes32\"}],\"name\":\"challengeReparameterization\",\"outputs\":[{\"name\":\"challengeID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_propID\",\"type\":\"bytes32\"}],\"name\":\"processProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_challengeID\",\"type\":\"uint256\"},{\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"},{\"name\":\"_challengeID\",\"type\":\"uint256\"},{\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"voterReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_propID\",\"type\":\"bytes32\"}],\"name\":\"canBeSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_propID\",\"type\":\"bytes32\"}],\"name\":\"propExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_propID\",\"type\":\"bytes32\"}],\"name\":\"challengeCanBeResolved\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_challengeID\",\"type\":\"uint256\"}],\"name\":\"challengeWinnerReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_challengeID\",\"type\":\"uint256\"},{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"tokenClaims\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ParameterizerContractBin is the compiled bytecode used for deploying new contracts.
const ParameterizerContractBin = `0x60806040523480156200001157600080fd5b506040516102408062003ba983398101806040528101908080519060200190929190805190602001909291909190505082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001276040805190810160405280600a81526020017f6d696e4465706f736974000000000000000000000000000000000000000000008152508260006010811015156200010d57fe5b60200201516200070c640100000000026401000000009004565b6200018b6040805190810160405280600b81526020017f704d696e4465706f7369740000000000000000000000000000000000000000008152508260016010811015156200017157fe5b60200201516200070c640100000000026401000000009004565b620001ef6040805190810160405280600d81526020017f6170706c7953746167654c656e00000000000000000000000000000000000000815250826002601081101515620001d557fe5b60200201516200070c640100000000026401000000009004565b620002536040805190810160405280600e81526020017f704170706c7953746167654c656e0000000000000000000000000000000000008152508260036010811015156200023957fe5b60200201516200070c640100000000026401000000009004565b620002b76040805190810160405280600e81526020017f636f6d6d697453746167654c656e0000000000000000000000000000000000008152508260046010811015156200029d57fe5b60200201516200070c640100000000026401000000009004565b6200031b6040805190810160405280600f81526020017f70436f6d6d697453746167654c656e00000000000000000000000000000000008152508260056010811015156200030157fe5b60200201516200070c640100000000026401000000009004565b6200037f6040805190810160405280600e81526020017f72657665616c53746167654c656e0000000000000000000000000000000000008152508260066010811015156200036557fe5b60200201516200070c640100000000026401000000009004565b620003e36040805190810160405280600f81526020017f7052657665616c53746167654c656e0000000000000000000000000000000000815250826007601081101515620003c957fe5b60200201516200070c640100000000026401000000009004565b620004476040805190810160405280600f81526020017f64697370656e736174696f6e50637400000000000000000000000000000000008152508260086010811015156200042d57fe5b60200201516200070c640100000000026401000000009004565b620004ab6040805190810160405280601081526020017f7044697370656e736174696f6e506374000000000000000000000000000000008152508260096010811015156200049157fe5b60200201516200070c640100000000026401000000009004565b6200050f6040805190810160405280600a81526020017f766f746551756f72756d0000000000000000000000000000000000000000000081525082600a601081101515620004f557fe5b60200201516200070c640100000000026401000000009004565b620005736040805190810160405280600b81526020017f70566f746551756f72756d00000000000000000000000000000000000000000081525082600b6010811015156200055957fe5b60200201516200070c640100000000026401000000009004565b620005d76040805190810160405280600a81526020017f7050726f6365737342790000000000000000000000000000000000000000000081525082600c601081101515620005bd57fe5b60200201516200070c640100000000026401000000009004565b6200063b6040805190810160405280601281526020017f6368616c6c656e676541707065616c4c656e000000000000000000000000000081525082600d6010811015156200062157fe5b60200201516200070c640100000000026401000000009004565b6200069f6040805190810160405280601881526020017f6368616c6c656e676541707065616c436f6d6d69744c656e000000000000000081525082600e6010811015156200068557fe5b60200201516200070c640100000000026401000000009004565b620007036040805190810160405280601881526020017f6368616c6c656e676541707065616c52657665616c4c656e000000000000000081525082600f601081101515620006e957fe5b60200201516200070c640100000000026401000000009004565b50505062000793565b80600080846040518082805190602001908083835b60208310151562000748578051825260208201915060208101905060208303925062000721565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916600019168152602001908152602001600020819055505050565b61340680620007a36000396000f3006080604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806330490e91146100eb57806332ed5b121461011c578063353009901461021c5780635041155214610265578063693ec85e146102a657806377609a41146103235780638240ae4b1461036c57806386bb8f37146103b15780638f1d3776146103e8578063a5ba3b1e14610475578063a7aad3db146104da578063bade1c5414610545578063c51131fb146105d4578063dc6ab5271461061d578063fc0c546a14610662578063fce1ccca146106b9575b600080fd5b3480156100f757600080fd5b5061011a6004803603810190808035600019169060200190929190505050610710565b005b34801561012857600080fd5b5061014b6004803603810190808035600019169060200190929190505050610eb4565b60405180888152602001878152602001868152602001806020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b838110156101db5780820151818401526020810190506101c0565b50505050905090810190601f1680156102085780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b34801561022857600080fd5b5061024b6004803603810190808035600019169060200190929190505050610fae565b604051808215151515815260200191505060405180910390f35b34801561027157600080fd5b5061029060048036038101908080359060200190929190505050610fd8565b6040518082815260200191505060405180910390f35b3480156102b257600080fd5b5061030d600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611108565b6040518082815260200191505060405180910390f35b34801561032f57600080fd5b50610352600480360381019080803560001916906020019092919050505061118e565b604051808215151515815260200191505060405180910390f35b34801561037857600080fd5b5061039b60048036038101908080356000191690602001909291905050506114a4565b6040518082815260200191505060405180910390f35b3480156103bd57600080fd5b506103e66004803603810190808035906020019092919080359060200190929190505050611bdd565b005b3480156103f457600080fd5b5061041360048036038101908080359060200190929190505050611fb3565b604051808681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001841515151581526020018381526020018281526020019550505050505060405180910390f35b34801561048157600080fd5b506104c060048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612016565b604051808215151515815260200191505060405180910390f35b3480156104e657600080fd5b5061052f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050612081565b6040518082815260200191505060405180910390f35b34801561055157600080fd5b506105b6600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291905050506121dd565b60405180826000191660001916815260200191505060405180910390f35b3480156105e057600080fd5b5061060360048036038101908080356000191690602001909291905050506128e9565b604051808215151515815260200191505060405180910390f35b34801561062957600080fd5b5061064c6004803603810190808035600019169060200190929190505050612a74565b6040518082815260200191505060405180910390f35b34801561066e57600080fd5b50610677612a8c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106c557600080fd5b506106ce612ab2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600080600060026000856000191660001916815260200190815260200160002092508260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915082600201549050610769846128e9565b15610a7257610818836003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108095780601f106107de57610100808354040283529160200191610809565b820191906000526020600020905b8154815290600101906020018083116107ec57829003601f168201915b50505050508460060154612ad8565b83600019167f37f3986c71e1aa2c470cfc4a92af70820610c3065589d35ef1664ea27f3e73a584600301856006015460405180806020018381526020018281038252848181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156108d65780601f106108ab576101008083540402835291602001916108d6565b820191906000526020600020905b8154815290600101906020018083116108b957829003601f168201915b5050935050505060405180910390a2600260008560001916600019168152602001908152602001600020600080820160009055600182016000905560028201600090556003820160006109299190613251565b6004820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600582016000905560068201600090555050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610a2757600080fd5b505af1158015610a3b573d6000803e3d6000fd5b505050506040513d6020811015610a5157600080fd5b81019080805190602001909291905050501515610a6d57600080fd5b610c5f565b610a7b8461118e565b15610a8e57610a8984612b5d565b610c5e565b8260050154421115610c585783600019167f29026cb2acebe6d0a4b6d593ccadf76e3fc6d0a02254e078b0c4a619608089d760405160405180910390a260026000856000191660001916815260200190815260200160002060008082016000905560018201600090556002820160009055600382016000610b0f9190613251565b6004820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600582016000905560068201600090555050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610c0d57600080fd5b505af1158015610c21573d6000803e3d6000fd5b505050506040513d6020811015610c3757600080fd5b81019080805190602001909291905050501515610c5357600080fd5b610c5d565b600080fd5b5b5b6064610c9f6040805190810160405280600f81526020017f64697370656e736174696f6e5063740000000000000000000000000000000000815250611108565b11151515610ca957fe5b6064610ce96040805190810160405280601081526020017f7044697370656e736174696f6e50637400000000000000000000000000000000815250611108565b11151515610cf357fe5b610e30610d346040805190810160405280600a81526020017f7050726f63657373427900000000000000000000000000000000000000000000815250611108565b610e22610d756040805190810160405280600f81526020017f7052657665616c53746167654c656e0000000000000000000000000000000000815250611108565b610e14610db66040805190810160405280600f81526020017f70436f6d6d697453746167654c656e0000000000000000000000000000000000815250611108565b610e06610df76040805190810160405280600e81526020017f704170706c7953746167654c656e000000000000000000000000000000000000815250611108565b426131ce90919063ffffffff16565b6131ce90919063ffffffff16565b6131ce90919063ffffffff16565b6131ce90919063ffffffff16565b5060026000856000191660001916815260200190815260200160002060008082016000905560018201600090556002820160009055600382016000610e759190613251565b6004820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560058201600090556006820160009055505050505050565b6002602052806000526040600020600091509050806000015490806001015490806002015490806003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f725780601f10610f4757610100808354040283529160200191610f72565b820191906000526020600020905b815481529060010190602001808311610f5557829003601f168201915b5050505050908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050154908060060154905087565b60008060026000846000191660001916815260200190815260200160002060050154119050919050565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663053e71a6846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561106c57600080fd5b505af1158015611080573d6000803e3d6000fd5b505050506040513d602081101561109657600080fd5b810190808051906020019092919050505014156110ce5760016000838152602001908152602001600020600201546002029050611103565b600160008381526020019081526020016000206000015460016000848152602001908152602001600020600201546002020390505b919050565b6000806000836040518082805190602001908083835b602083101515611143578051825260208201915060208101905060208303925061111e565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916600019168152602001908152602001600020549050919050565b6000611198613299565b6111a06132ed565b60026000856000191660001916815260200190815260200160002060e06040519081016040529081600082015481526020016001820154815260200160028201548152602001600382018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561127e5780601f106112535761010080835404028352916020019161127e565b820191906000526020600020905b81548152906001019060200180831161126157829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820154815250509150600160008360200151815260200190815260200160002060a06040519081016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff16151515158152602001600282015481526020016003820154815250509050600082602001511180156113c357506000151581604001511515145b801561149b5750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ee68483083602001516040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561145f57600080fd5b505af1158015611473573d6000803e3d6000fd5b505050506040513d602081101561148957600080fd5b81019080805190602001909291905050505b92505050919050565b60006114ae613299565b60008060008060026000886000191660001916815260200190815260200160002060e06040519081016040529081600082015481526020016001820154815260200160028201548152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115925780601f1061156757610100808354040283529160200191611592565b820191906000526020600020905b81548152906001019060200180831161157557829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820154815260200160068201548152505094508460400151935061161787610fae565b8015611627575060008560200151145b151561163257600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166332ed3d606116ae6040805190810160405280600b81526020017f70566f746551756f72756d000000000000000000000000000000000000000000815250611108565b6116ec6040805190810160405280600f81526020017f70436f6d6d697453746167654c656e0000000000000000000000000000000000815250611108565b61172a6040805190810160405280600f81526020017f7052657665616c53746167654c656e0000000000000000000000000000000000815250611108565b6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018281526020019350505050602060405180830381600087803b15801561178a57600080fd5b505af115801561179e573d6000803e3d6000fd5b505050506040513d60208110156117b457600080fd5b8101908080519060200190929190505050925060a060405190810160405280611840606461183288611824606461181f6040805190810160405280601081526020017f7044697370656e736174696f6e50637400000000000000000000000000000000815250611108565b6131ea565b61320390919063ffffffff16565b61323b90919063ffffffff16565b81526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020018581526020016000815250600160008581526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff02191690831515021790555060608201518160020155608082015181600301559050508260026000896000191660001916815260200190815260200160002060010181905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015611a2c57600080fd5b505af1158015611a40573d6000803e3d6000fd5b505050506040513d6020811015611a5657600080fd5b81019080805190602001909291905050501515611a7257600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636148fed5846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060a060405180830381600087803b158015611b0357600080fd5b505af1158015611b17573d6000803e3d6000fd5b505050506040513d60a0811015611b2d57600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050505050915091503373ffffffffffffffffffffffffffffffffffffffff1687600019167fe94e3086c4bfe84acba4437b85a80fca3721dfc419d1f7afe4fa4e470e670b4885858560405180848152602001838152602001828152602001935050505060405180910390a38295505050505050919050565b600080600015156001600086815260200190815260200160002060040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611c5357600080fd5b600115156001600086815260200190815260200160002060010160149054906101000a900460ff161515141515611c8957600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b43bd0693386866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019350505050602060405180830381600087803b158015611d5657600080fd5b505af1158015611d6a573d6000803e3d6000fd5b505050506040513d6020811015611d8057600080fd5b81019080805190602001909291905050509150611d9e338585612081565b9050816001600086815260200190815260200160002060030160008282540392505081905550806001600086815260200190815260200160002060000160008282540392505081905550600180600086815260200190815260200160002060040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff16847f6f4c982acc31b0af2cf1dc1556f21c0325d893782d65e83c68a5534a33f59957836040518082815260200191505060405180910390a3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611f6757600080fd5b505af1158015611f7b573d6000803e3d6000fd5b505050506040513d6020811015611f9157600080fd5b81019080805190602001909291905050501515611fad57600080fd5b50505050565b60016020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16908060020154908060030154905085565b60006001600084815260200190815260200160002060040160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806000806001600087815260200190815260200160002060030154925060016000878152602001908152602001600020600001549150600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b43bd0698888886040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019350505050602060405180830381600087803b15801561218657600080fd5b505af115801561219a573d6000803e3d6000fd5b505050506040513d60208110156121b057600080fd5b81019080805190602001909291905050509050828282028115156121d057fe5b0493505050509392505050565b60008060006122206040805190810160405280600b81526020017f704d696e4465706f736974000000000000000000000000000000000000000000815250611108565b915084846040518083805190602001908083835b6020831015156122595780518252602082019150602081019050602083039250612234565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040518091039020905060405180807f64697370656e736174696f6e5063740000000000000000000000000000000000815250600f019050604051809103902060001916856040518082805190602001908083835b6020831015156122ff57805182526020820191506020810190506020830392506122da565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614806123da575060405180807f7044697370656e736174696f6e506374000000000000000000000000000000008152506010019050604051809103902060001916856040518082805190602001908083835b6020831015156123a75780518252602082019150602081019050602083039250612382565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916145b156123f057606484111515156123ef57600080fd5b5b6123f981610fae565b15151561240557600080fd5b8361240f86611108565b1415151561241c57600080fd5b60e0604051908101604052806124786124696040805190810160405280600e81526020017f704170706c7953746167654c656e000000000000000000000000000000000000815250611108565b426131ce90919063ffffffff16565b8152602001600081526020018381526020018681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016125e96124ed6040805190810160405280600a81526020017f7050726f63657373427900000000000000000000000000000000000000000000815250611108565b6125db61252e6040805190810160405280600f81526020017f7052657665616c53746167654c656e0000000000000000000000000000000000815250611108565b6125cd61256f6040805190810160405280600f81526020017f70436f6d6d697453746167654c656e0000000000000000000000000000000000815250611108565b6125bf6125b06040805190810160405280600e81526020017f704170706c7953746167654c656e000000000000000000000000000000000000815250611108565b426131ce90919063ffffffff16565b6131ce90919063ffffffff16565b6131ce90919063ffffffff16565b6131ce90919063ffffffff16565b8152602001858152506002600083600019166000191681526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003019080519060200190612647929190613335565b5060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015560c08201518160060155905050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561279f57600080fd5b505af11580156127b3573d6000803e3d6000fd5b505050506040513d60208110156127c957600080fd5b810190808051906020019092919050505015156127e557600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167fb25bdef16105f099e5c185f9c7fd969571e8e0caa3f7bd75409512fe0a41a60b868684866002600088600019166000191681526020019081526020016000206000015460405180806020018681526020018560001916600019168152602001848152602001838152602001828103825287818151815260200191508051906020019080838360005b838110156128a0578082015181840152602081019050612885565b50505050905090810190601f1680156128cd5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a2809250505092915050565b60006128f3613299565b60026000846000191660001916815260200190815260200160002060e06040519081016040529081600082015481526020016001820154815260200160028201548152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129d15780601f106129a6576101008083540402835291602001916129d1565b820191906000526020600020905b8154815290600101906020018083116129b457829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820154815250509050806000015142118015612a5c57508060a0015142105b8015612a6c575060008160200151145b915050919050565b60006020528060005260406000206000915090505481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b80600080846040518082805190602001908083835b602083101515612b125780518252602082019150602081019050602083039250612aed565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916600019168152602001908152602001600020819055505050565b612b65613299565b60008060026000856000191660001916815260200190815260200160002060e06040519081016040529081600082015481526020016001820154815260200160028201548152602001600382018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612c465780601f10612c1b57610100808354040283529160200191612c46565b820191906000526020600020905b815481529060010190602001808311612c2957829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160058201548152602001600682015481525050925060016000846020015181526020019081526020016000209150612ce18360200151610fd8565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663053e71a684602001516040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015612d7857600080fd5b505af1158015612d8c573d6000803e3d6000fd5b505050506040513d6020811015612da257600080fd5b8101908080519060200190929190505050826003018190555060018260010160146101000a81548160ff021916908315150217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634940318384602001516040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015612e6d57600080fd5b505af1158015612e81573d6000803e3d6000fd5b505050506040513d6020811015612e9757600080fd5b81019080805190602001909291905050501561303157428360a001511115612ecc57612ecb83606001518460c00151612ad8565b5b826020015184600019167fc4497224aa78dd50c9b3e344aab02596201ca1e6dca4057a91a6c02f83f4f6c184600001548560030154604051808381526020018281526020019250505060405180910390a3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460800151836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612fe657600080fd5b505af1158015612ffa573d6000803e3d6000fd5b505050506040513d602081101561301057600080fd5b8101908080519060200190929190505050151561302c57600080fd5b6131c8565b826020015184600019167f362a12431f779a2baff4f77f75ba7960ae993a5c41b425df11f7fd0af2b9cbe684600001548560030154604051808381526020018281526020019250505060405180910390a3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160008660200151815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561318157600080fd5b505af1158015613195573d6000803e3d6000fd5b505050506040513d60208110156131ab57600080fd5b810190808051906020019092919050505015156131c757600080fd5b5b50505050565b600081830190508281101515156131e157fe5b80905092915050565b60008282111515156131f857fe5b818303905092915050565b6000808314156132165760009050613235565b818302905081838281151561322757fe5b0414151561323157fe5b8090505b92915050565b6000818381151561324857fe5b04905092915050565b50805460018160011615610100020316600290046000825580601f106132775750613296565b601f01602090049060005260206000209081019061329591906133b5565b5b50565b60e06040519081016040528060008152602001600081526020016000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b60a06040519081016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160001515815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061337657805160ff19168380011785556133a4565b828001600101855582156133a4579182015b828111156133a3578251825591602001919060010190613388565b5b5090506133b191906133b5565b5090565b6133d791905b808211156133d35760008160009055506001016133bb565b5090565b905600a165627a7a723058202bb863aa73c00dbabaf4e024739e5ead62e781feb5a10a148e28c9b1dc154c860029`

// DeployParameterizerContract deploys a new Ethereum contract, binding an instance of ParameterizerContract to it.
func DeployParameterizerContract(auth *bind.TransactOpts, backend bind.ContractBackend, _tokenAddr common.Address, _plcrAddr common.Address, _uintParameters [16]*big.Int) (common.Address, *types.Transaction, *ParameterizerContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ParameterizerContractABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ParameterizerContractBin), backend, _tokenAddr, _plcrAddr, _uintParameters)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ParameterizerContract{ParameterizerContractCaller: ParameterizerContractCaller{contract: contract}, ParameterizerContractTransactor: ParameterizerContractTransactor{contract: contract}, ParameterizerContractFilterer: ParameterizerContractFilterer{contract: contract}}, nil
}

// ParameterizerContract is an auto generated Go binding around an Ethereum contract.
type ParameterizerContract struct {
	ParameterizerContractCaller     // Read-only binding to the contract
	ParameterizerContractTransactor // Write-only binding to the contract
	ParameterizerContractFilterer   // Log filterer for contract events
}

// ParameterizerContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type ParameterizerContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParameterizerContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ParameterizerContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParameterizerContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ParameterizerContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParameterizerContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ParameterizerContractSession struct {
	Contract     *ParameterizerContract // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ParameterizerContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ParameterizerContractCallerSession struct {
	Contract *ParameterizerContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// ParameterizerContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ParameterizerContractTransactorSession struct {
	Contract     *ParameterizerContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// ParameterizerContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type ParameterizerContractRaw struct {
	Contract *ParameterizerContract // Generic contract binding to access the raw methods on
}

// ParameterizerContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ParameterizerContractCallerRaw struct {
	Contract *ParameterizerContractCaller // Generic read-only contract binding to access the raw methods on
}

// ParameterizerContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ParameterizerContractTransactorRaw struct {
	Contract *ParameterizerContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewParameterizerContract creates a new instance of ParameterizerContract, bound to a specific deployed contract.
func NewParameterizerContract(address common.Address, backend bind.ContractBackend) (*ParameterizerContract, error) {
	contract, err := bindParameterizerContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ParameterizerContract{ParameterizerContractCaller: ParameterizerContractCaller{contract: contract}, ParameterizerContractTransactor: ParameterizerContractTransactor{contract: contract}, ParameterizerContractFilterer: ParameterizerContractFilterer{contract: contract}}, nil
}

// NewParameterizerContractCaller creates a new read-only instance of ParameterizerContract, bound to a specific deployed contract.
func NewParameterizerContractCaller(address common.Address, caller bind.ContractCaller) (*ParameterizerContractCaller, error) {
	contract, err := bindParameterizerContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ParameterizerContractCaller{contract: contract}, nil
}

// NewParameterizerContractTransactor creates a new write-only instance of ParameterizerContract, bound to a specific deployed contract.
func NewParameterizerContractTransactor(address common.Address, transactor bind.ContractTransactor) (*ParameterizerContractTransactor, error) {
	contract, err := bindParameterizerContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ParameterizerContractTransactor{contract: contract}, nil
}

// NewParameterizerContractFilterer creates a new log filterer instance of ParameterizerContract, bound to a specific deployed contract.
func NewParameterizerContractFilterer(address common.Address, filterer bind.ContractFilterer) (*ParameterizerContractFilterer, error) {
	contract, err := bindParameterizerContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ParameterizerContractFilterer{contract: contract}, nil
}

// bindParameterizerContract binds a generic wrapper to an already deployed contract.
func bindParameterizerContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ParameterizerContractABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParameterizerContract *ParameterizerContractRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ParameterizerContract.Contract.ParameterizerContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParameterizerContract *ParameterizerContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParameterizerContract.Contract.ParameterizerContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParameterizerContract *ParameterizerContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParameterizerContract.Contract.ParameterizerContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParameterizerContract *ParameterizerContractCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ParameterizerContract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParameterizerContract *ParameterizerContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParameterizerContract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParameterizerContract *ParameterizerContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParameterizerContract.Contract.contract.Transact(opts, method, params...)
}

// CanBeSet is a free data retrieval call binding the contract method 0xc51131fb.
//
// Solidity: function canBeSet(_propID bytes32) constant returns(bool)
func (_ParameterizerContract *ParameterizerContractCaller) CanBeSet(opts *bind.CallOpts, _propID [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ParameterizerContract.contract.Call(opts, out, "canBeSet", _propID)
	return *ret0, err
}

// CanBeSet is a free data retrieval call binding the contract method 0xc51131fb.
//
// Solidity: function canBeSet(_propID bytes32) constant returns(bool)
func (_ParameterizerContract *ParameterizerContractSession) CanBeSet(_propID [32]byte) (bool, error) {
	return _ParameterizerContract.Contract.CanBeSet(&_ParameterizerContract.CallOpts, _propID)
}

// CanBeSet is a free data retrieval call binding the contract method 0xc51131fb.
//
// Solidity: function canBeSet(_propID bytes32) constant returns(bool)
func (_ParameterizerContract *ParameterizerContractCallerSession) CanBeSet(_propID [32]byte) (bool, error) {
	return _ParameterizerContract.Contract.CanBeSet(&_ParameterizerContract.CallOpts, _propID)
}

// ChallengeCanBeResolved is a free data retrieval call binding the contract method 0x77609a41.
//
// Solidity: function challengeCanBeResolved(_propID bytes32) constant returns(bool)
func (_ParameterizerContract *ParameterizerContractCaller) ChallengeCanBeResolved(opts *bind.CallOpts, _propID [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ParameterizerContract.contract.Call(opts, out, "challengeCanBeResolved", _propID)
	return *ret0, err
}

// ChallengeCanBeResolved is a free data retrieval call binding the contract method 0x77609a41.
//
// Solidity: function challengeCanBeResolved(_propID bytes32) constant returns(bool)
func (_ParameterizerContract *ParameterizerContractSession) ChallengeCanBeResolved(_propID [32]byte) (bool, error) {
	return _ParameterizerContract.Contract.ChallengeCanBeResolved(&_ParameterizerContract.CallOpts, _propID)
}

// ChallengeCanBeResolved is a free data retrieval call binding the contract method 0x77609a41.
//
// Solidity: function challengeCanBeResolved(_propID bytes32) constant returns(bool)
func (_ParameterizerContract *ParameterizerContractCallerSession) ChallengeCanBeResolved(_propID [32]byte) (bool, error) {
	return _ParameterizerContract.Contract.ChallengeCanBeResolved(&_ParameterizerContract.CallOpts, _propID)
}

// ChallengeWinnerReward is a free data retrieval call binding the contract method 0x50411552.
//
// Solidity: function challengeWinnerReward(_challengeID uint256) constant returns(uint256)
func (_ParameterizerContract *ParameterizerContractCaller) ChallengeWinnerReward(opts *bind.CallOpts, _challengeID *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ParameterizerContract.contract.Call(opts, out, "challengeWinnerReward", _challengeID)
	return *ret0, err
}

// ChallengeWinnerReward is a free data retrieval call binding the contract method 0x50411552.
//
// Solidity: function challengeWinnerReward(_challengeID uint256) constant returns(uint256)
func (_ParameterizerContract *ParameterizerContractSession) ChallengeWinnerReward(_challengeID *big.Int) (*big.Int, error) {
	return _ParameterizerContract.Contract.ChallengeWinnerReward(&_ParameterizerContract.CallOpts, _challengeID)
}

// ChallengeWinnerReward is a free data retrieval call binding the contract method 0x50411552.
//
// Solidity: function challengeWinnerReward(_challengeID uint256) constant returns(uint256)
func (_ParameterizerContract *ParameterizerContractCallerSession) ChallengeWinnerReward(_challengeID *big.Int) (*big.Int, error) {
	return _ParameterizerContract.Contract.ChallengeWinnerReward(&_ParameterizerContract.CallOpts, _challengeID)
}

// Challenges is a free data retrieval call binding the contract method 0x8f1d3776.
//
// Solidity: function challenges( uint256) constant returns(rewardPool uint256, challenger address, resolved bool, stake uint256, winningTokens uint256)
func (_ParameterizerContract *ParameterizerContractCaller) Challenges(opts *bind.CallOpts, arg0 *big.Int) (struct {
	RewardPool    *big.Int
	Challenger    common.Address
	Resolved      bool
	Stake         *big.Int
	WinningTokens *big.Int
}, error) {
	ret := new(struct {
		RewardPool    *big.Int
		Challenger    common.Address
		Resolved      bool
		Stake         *big.Int
		WinningTokens *big.Int
	})
	out := ret
	err := _ParameterizerContract.contract.Call(opts, out, "challenges", arg0)
	return *ret, err
}

// Challenges is a free data retrieval call binding the contract method 0x8f1d3776.
//
// Solidity: function challenges( uint256) constant returns(rewardPool uint256, challenger address, resolved bool, stake uint256, winningTokens uint256)
func (_ParameterizerContract *ParameterizerContractSession) Challenges(arg0 *big.Int) (struct {
	RewardPool    *big.Int
	Challenger    common.Address
	Resolved      bool
	Stake         *big.Int
	WinningTokens *big.Int
}, error) {
	return _ParameterizerContract.Contract.Challenges(&_ParameterizerContract.CallOpts, arg0)
}

// Challenges is a free data retrieval call binding the contract method 0x8f1d3776.
//
// Solidity: function challenges( uint256) constant returns(rewardPool uint256, challenger address, resolved bool, stake uint256, winningTokens uint256)
func (_ParameterizerContract *ParameterizerContractCallerSession) Challenges(arg0 *big.Int) (struct {
	RewardPool    *big.Int
	Challenger    common.Address
	Resolved      bool
	Stake         *big.Int
	WinningTokens *big.Int
}, error) {
	return _ParameterizerContract.Contract.Challenges(&_ParameterizerContract.CallOpts, arg0)
}

// Get is a free data retrieval call binding the contract method 0x693ec85e.
//
// Solidity: function get(_name string) constant returns(value uint256)
func (_ParameterizerContract *ParameterizerContractCaller) Get(opts *bind.CallOpts, _name string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ParameterizerContract.contract.Call(opts, out, "get", _name)
	return *ret0, err
}

// Get is a free data retrieval call binding the contract method 0x693ec85e.
//
// Solidity: function get(_name string) constant returns(value uint256)
func (_ParameterizerContract *ParameterizerContractSession) Get(_name string) (*big.Int, error) {
	return _ParameterizerContract.Contract.Get(&_ParameterizerContract.CallOpts, _name)
}

// Get is a free data retrieval call binding the contract method 0x693ec85e.
//
// Solidity: function get(_name string) constant returns(value uint256)
func (_ParameterizerContract *ParameterizerContractCallerSession) Get(_name string) (*big.Int, error) {
	return _ParameterizerContract.Contract.Get(&_ParameterizerContract.CallOpts, _name)
}

// Params is a free data retrieval call binding the contract method 0xdc6ab527.
//
// Solidity: function params( bytes32) constant returns(uint256)
func (_ParameterizerContract *ParameterizerContractCaller) Params(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ParameterizerContract.contract.Call(opts, out, "params", arg0)
	return *ret0, err
}

// Params is a free data retrieval call binding the contract method 0xdc6ab527.
//
// Solidity: function params( bytes32) constant returns(uint256)
func (_ParameterizerContract *ParameterizerContractSession) Params(arg0 [32]byte) (*big.Int, error) {
	return _ParameterizerContract.Contract.Params(&_ParameterizerContract.CallOpts, arg0)
}

// Params is a free data retrieval call binding the contract method 0xdc6ab527.
//
// Solidity: function params( bytes32) constant returns(uint256)
func (_ParameterizerContract *ParameterizerContractCallerSession) Params(arg0 [32]byte) (*big.Int, error) {
	return _ParameterizerContract.Contract.Params(&_ParameterizerContract.CallOpts, arg0)
}

// PropExists is a free data retrieval call binding the contract method 0x35300990.
//
// Solidity: function propExists(_propID bytes32) constant returns(bool)
func (_ParameterizerContract *ParameterizerContractCaller) PropExists(opts *bind.CallOpts, _propID [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ParameterizerContract.contract.Call(opts, out, "propExists", _propID)
	return *ret0, err
}

// PropExists is a free data retrieval call binding the contract method 0x35300990.
//
// Solidity: function propExists(_propID bytes32) constant returns(bool)
func (_ParameterizerContract *ParameterizerContractSession) PropExists(_propID [32]byte) (bool, error) {
	return _ParameterizerContract.Contract.PropExists(&_ParameterizerContract.CallOpts, _propID)
}

// PropExists is a free data retrieval call binding the contract method 0x35300990.
//
// Solidity: function propExists(_propID bytes32) constant returns(bool)
func (_ParameterizerContract *ParameterizerContractCallerSession) PropExists(_propID [32]byte) (bool, error) {
	return _ParameterizerContract.Contract.PropExists(&_ParameterizerContract.CallOpts, _propID)
}

// Proposals is a free data retrieval call binding the contract method 0x32ed5b12.
//
// Solidity: function proposals( bytes32) constant returns(appExpiry uint256, challengeID uint256, deposit uint256, name string, owner address, processBy uint256, value uint256)
func (_ParameterizerContract *ParameterizerContractCaller) Proposals(opts *bind.CallOpts, arg0 [32]byte) (struct {
	AppExpiry   *big.Int
	ChallengeID *big.Int
	Deposit     *big.Int
	Name        string
	Owner       common.Address
	ProcessBy   *big.Int
	Value       *big.Int
}, error) {
	ret := new(struct {
		AppExpiry   *big.Int
		ChallengeID *big.Int
		Deposit     *big.Int
		Name        string
		Owner       common.Address
		ProcessBy   *big.Int
		Value       *big.Int
	})
	out := ret
	err := _ParameterizerContract.contract.Call(opts, out, "proposals", arg0)
	return *ret, err
}

// Proposals is a free data retrieval call binding the contract method 0x32ed5b12.
//
// Solidity: function proposals( bytes32) constant returns(appExpiry uint256, challengeID uint256, deposit uint256, name string, owner address, processBy uint256, value uint256)
func (_ParameterizerContract *ParameterizerContractSession) Proposals(arg0 [32]byte) (struct {
	AppExpiry   *big.Int
	ChallengeID *big.Int
	Deposit     *big.Int
	Name        string
	Owner       common.Address
	ProcessBy   *big.Int
	Value       *big.Int
}, error) {
	return _ParameterizerContract.Contract.Proposals(&_ParameterizerContract.CallOpts, arg0)
}

// Proposals is a free data retrieval call binding the contract method 0x32ed5b12.
//
// Solidity: function proposals( bytes32) constant returns(appExpiry uint256, challengeID uint256, deposit uint256, name string, owner address, processBy uint256, value uint256)
func (_ParameterizerContract *ParameterizerContractCallerSession) Proposals(arg0 [32]byte) (struct {
	AppExpiry   *big.Int
	ChallengeID *big.Int
	Deposit     *big.Int
	Name        string
	Owner       common.Address
	ProcessBy   *big.Int
	Value       *big.Int
}, error) {
	return _ParameterizerContract.Contract.Proposals(&_ParameterizerContract.CallOpts, arg0)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() constant returns(address)
func (_ParameterizerContract *ParameterizerContractCaller) Token(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ParameterizerContract.contract.Call(opts, out, "token")
	return *ret0, err
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() constant returns(address)
func (_ParameterizerContract *ParameterizerContractSession) Token() (common.Address, error) {
	return _ParameterizerContract.Contract.Token(&_ParameterizerContract.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() constant returns(address)
func (_ParameterizerContract *ParameterizerContractCallerSession) Token() (common.Address, error) {
	return _ParameterizerContract.Contract.Token(&_ParameterizerContract.CallOpts)
}

// TokenClaims is a free data retrieval call binding the contract method 0xa5ba3b1e.
//
// Solidity: function tokenClaims(_challengeID uint256, _voter address) constant returns(bool)
func (_ParameterizerContract *ParameterizerContractCaller) TokenClaims(opts *bind.CallOpts, _challengeID *big.Int, _voter common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ParameterizerContract.contract.Call(opts, out, "tokenClaims", _challengeID, _voter)
	return *ret0, err
}

// TokenClaims is a free data retrieval call binding the contract method 0xa5ba3b1e.
//
// Solidity: function tokenClaims(_challengeID uint256, _voter address) constant returns(bool)
func (_ParameterizerContract *ParameterizerContractSession) TokenClaims(_challengeID *big.Int, _voter common.Address) (bool, error) {
	return _ParameterizerContract.Contract.TokenClaims(&_ParameterizerContract.CallOpts, _challengeID, _voter)
}

// TokenClaims is a free data retrieval call binding the contract method 0xa5ba3b1e.
//
// Solidity: function tokenClaims(_challengeID uint256, _voter address) constant returns(bool)
func (_ParameterizerContract *ParameterizerContractCallerSession) TokenClaims(_challengeID *big.Int, _voter common.Address) (bool, error) {
	return _ParameterizerContract.Contract.TokenClaims(&_ParameterizerContract.CallOpts, _challengeID, _voter)
}

// VoterReward is a free data retrieval call binding the contract method 0xa7aad3db.
//
// Solidity: function voterReward(_voter address, _challengeID uint256, _salt uint256) constant returns(uint256)
func (_ParameterizerContract *ParameterizerContractCaller) VoterReward(opts *bind.CallOpts, _voter common.Address, _challengeID *big.Int, _salt *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ParameterizerContract.contract.Call(opts, out, "voterReward", _voter, _challengeID, _salt)
	return *ret0, err
}

// VoterReward is a free data retrieval call binding the contract method 0xa7aad3db.
//
// Solidity: function voterReward(_voter address, _challengeID uint256, _salt uint256) constant returns(uint256)
func (_ParameterizerContract *ParameterizerContractSession) VoterReward(_voter common.Address, _challengeID *big.Int, _salt *big.Int) (*big.Int, error) {
	return _ParameterizerContract.Contract.VoterReward(&_ParameterizerContract.CallOpts, _voter, _challengeID, _salt)
}

// VoterReward is a free data retrieval call binding the contract method 0xa7aad3db.
//
// Solidity: function voterReward(_voter address, _challengeID uint256, _salt uint256) constant returns(uint256)
func (_ParameterizerContract *ParameterizerContractCallerSession) VoterReward(_voter common.Address, _challengeID *big.Int, _salt *big.Int) (*big.Int, error) {
	return _ParameterizerContract.Contract.VoterReward(&_ParameterizerContract.CallOpts, _voter, _challengeID, _salt)
}

// Voting is a free data retrieval call binding the contract method 0xfce1ccca.
//
// Solidity: function voting() constant returns(address)
func (_ParameterizerContract *ParameterizerContractCaller) Voting(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ParameterizerContract.contract.Call(opts, out, "voting")
	return *ret0, err
}

// Voting is a free data retrieval call binding the contract method 0xfce1ccca.
//
// Solidity: function voting() constant returns(address)
func (_ParameterizerContract *ParameterizerContractSession) Voting() (common.Address, error) {
	return _ParameterizerContract.Contract.Voting(&_ParameterizerContract.CallOpts)
}

// Voting is a free data retrieval call binding the contract method 0xfce1ccca.
//
// Solidity: function voting() constant returns(address)
func (_ParameterizerContract *ParameterizerContractCallerSession) Voting() (common.Address, error) {
	return _ParameterizerContract.Contract.Voting(&_ParameterizerContract.CallOpts)
}

// ChallengeReparameterization is a paid mutator transaction binding the contract method 0x8240ae4b.
//
// Solidity: function challengeReparameterization(_propID bytes32) returns(challengeID uint256)
func (_ParameterizerContract *ParameterizerContractTransactor) ChallengeReparameterization(opts *bind.TransactOpts, _propID [32]byte) (*types.Transaction, error) {
	return _ParameterizerContract.contract.Transact(opts, "challengeReparameterization", _propID)
}

// ChallengeReparameterization is a paid mutator transaction binding the contract method 0x8240ae4b.
//
// Solidity: function challengeReparameterization(_propID bytes32) returns(challengeID uint256)
func (_ParameterizerContract *ParameterizerContractSession) ChallengeReparameterization(_propID [32]byte) (*types.Transaction, error) {
	return _ParameterizerContract.Contract.ChallengeReparameterization(&_ParameterizerContract.TransactOpts, _propID)
}

// ChallengeReparameterization is a paid mutator transaction binding the contract method 0x8240ae4b.
//
// Solidity: function challengeReparameterization(_propID bytes32) returns(challengeID uint256)
func (_ParameterizerContract *ParameterizerContractTransactorSession) ChallengeReparameterization(_propID [32]byte) (*types.Transaction, error) {
	return _ParameterizerContract.Contract.ChallengeReparameterization(&_ParameterizerContract.TransactOpts, _propID)
}

// ClaimReward is a paid mutator transaction binding the contract method 0x86bb8f37.
//
// Solidity: function claimReward(_challengeID uint256, _salt uint256) returns()
func (_ParameterizerContract *ParameterizerContractTransactor) ClaimReward(opts *bind.TransactOpts, _challengeID *big.Int, _salt *big.Int) (*types.Transaction, error) {
	return _ParameterizerContract.contract.Transact(opts, "claimReward", _challengeID, _salt)
}

// ClaimReward is a paid mutator transaction binding the contract method 0x86bb8f37.
//
// Solidity: function claimReward(_challengeID uint256, _salt uint256) returns()
func (_ParameterizerContract *ParameterizerContractSession) ClaimReward(_challengeID *big.Int, _salt *big.Int) (*types.Transaction, error) {
	return _ParameterizerContract.Contract.ClaimReward(&_ParameterizerContract.TransactOpts, _challengeID, _salt)
}

// ClaimReward is a paid mutator transaction binding the contract method 0x86bb8f37.
//
// Solidity: function claimReward(_challengeID uint256, _salt uint256) returns()
func (_ParameterizerContract *ParameterizerContractTransactorSession) ClaimReward(_challengeID *big.Int, _salt *big.Int) (*types.Transaction, error) {
	return _ParameterizerContract.Contract.ClaimReward(&_ParameterizerContract.TransactOpts, _challengeID, _salt)
}

// ProcessProposal is a paid mutator transaction binding the contract method 0x30490e91.
//
// Solidity: function processProposal(_propID bytes32) returns()
func (_ParameterizerContract *ParameterizerContractTransactor) ProcessProposal(opts *bind.TransactOpts, _propID [32]byte) (*types.Transaction, error) {
	return _ParameterizerContract.contract.Transact(opts, "processProposal", _propID)
}

// ProcessProposal is a paid mutator transaction binding the contract method 0x30490e91.
//
// Solidity: function processProposal(_propID bytes32) returns()
func (_ParameterizerContract *ParameterizerContractSession) ProcessProposal(_propID [32]byte) (*types.Transaction, error) {
	return _ParameterizerContract.Contract.ProcessProposal(&_ParameterizerContract.TransactOpts, _propID)
}

// ProcessProposal is a paid mutator transaction binding the contract method 0x30490e91.
//
// Solidity: function processProposal(_propID bytes32) returns()
func (_ParameterizerContract *ParameterizerContractTransactorSession) ProcessProposal(_propID [32]byte) (*types.Transaction, error) {
	return _ParameterizerContract.Contract.ProcessProposal(&_ParameterizerContract.TransactOpts, _propID)
}

// ProposeReparameterization is a paid mutator transaction binding the contract method 0xbade1c54.
//
// Solidity: function proposeReparameterization(_name string, _value uint256) returns(bytes32)
func (_ParameterizerContract *ParameterizerContractTransactor) ProposeReparameterization(opts *bind.TransactOpts, _name string, _value *big.Int) (*types.Transaction, error) {
	return _ParameterizerContract.contract.Transact(opts, "proposeReparameterization", _name, _value)
}

// ProposeReparameterization is a paid mutator transaction binding the contract method 0xbade1c54.
//
// Solidity: function proposeReparameterization(_name string, _value uint256) returns(bytes32)
func (_ParameterizerContract *ParameterizerContractSession) ProposeReparameterization(_name string, _value *big.Int) (*types.Transaction, error) {
	return _ParameterizerContract.Contract.ProposeReparameterization(&_ParameterizerContract.TransactOpts, _name, _value)
}

// ProposeReparameterization is a paid mutator transaction binding the contract method 0xbade1c54.
//
// Solidity: function proposeReparameterization(_name string, _value uint256) returns(bytes32)
func (_ParameterizerContract *ParameterizerContractTransactorSession) ProposeReparameterization(_name string, _value *big.Int) (*types.Transaction, error) {
	return _ParameterizerContract.Contract.ProposeReparameterization(&_ParameterizerContract.TransactOpts, _name, _value)
}

// ParameterizerContractChallengeFailedIterator is returned from FilterChallengeFailed and is used to iterate over the raw logs and unpacked data for ChallengeFailed events raised by the ParameterizerContract contract.
type ParameterizerContractChallengeFailedIterator struct {
	Event *ParameterizerContractChallengeFailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParameterizerContractChallengeFailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParameterizerContractChallengeFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParameterizerContractChallengeFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParameterizerContractChallengeFailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParameterizerContractChallengeFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParameterizerContractChallengeFailed represents a ChallengeFailed event raised by the ParameterizerContract contract.
type ParameterizerContractChallengeFailed struct {
	PropID      [32]byte
	ChallengeID *big.Int
	RewardPool  *big.Int
	TotalTokens *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterChallengeFailed is a free log retrieval operation binding the contract event 0xc4497224aa78dd50c9b3e344aab02596201ca1e6dca4057a91a6c02f83f4f6c1.
//
// Solidity: event _ChallengeFailed(propID indexed bytes32, challengeID indexed uint256, rewardPool uint256, totalTokens uint256)
func (_ParameterizerContract *ParameterizerContractFilterer) FilterChallengeFailed(opts *bind.FilterOpts, propID [][32]byte, challengeID []*big.Int) (*ParameterizerContractChallengeFailedIterator, error) {

	var propIDRule []interface{}
	for _, propIDItem := range propID {
		propIDRule = append(propIDRule, propIDItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	logs, sub, err := _ParameterizerContract.contract.FilterLogs(opts, "_ChallengeFailed", propIDRule, challengeIDRule)
	if err != nil {
		return nil, err
	}
	return &ParameterizerContractChallengeFailedIterator{contract: _ParameterizerContract.contract, event: "_ChallengeFailed", logs: logs, sub: sub}, nil
}

// WatchChallengeFailed is a free log subscription operation binding the contract event 0xc4497224aa78dd50c9b3e344aab02596201ca1e6dca4057a91a6c02f83f4f6c1.
//
// Solidity: event _ChallengeFailed(propID indexed bytes32, challengeID indexed uint256, rewardPool uint256, totalTokens uint256)
func (_ParameterizerContract *ParameterizerContractFilterer) WatchChallengeFailed(opts *bind.WatchOpts, sink chan<- *ParameterizerContractChallengeFailed, propID [][32]byte, challengeID []*big.Int) (event.Subscription, error) {

	var propIDRule []interface{}
	for _, propIDItem := range propID {
		propIDRule = append(propIDRule, propIDItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	logs, sub, err := _ParameterizerContract.contract.WatchLogs(opts, "_ChallengeFailed", propIDRule, challengeIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParameterizerContractChallengeFailed)
				if err := _ParameterizerContract.contract.UnpackLog(event, "_ChallengeFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParameterizerContractChallengeSucceededIterator is returned from FilterChallengeSucceeded and is used to iterate over the raw logs and unpacked data for ChallengeSucceeded events raised by the ParameterizerContract contract.
type ParameterizerContractChallengeSucceededIterator struct {
	Event *ParameterizerContractChallengeSucceeded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParameterizerContractChallengeSucceededIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParameterizerContractChallengeSucceeded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParameterizerContractChallengeSucceeded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParameterizerContractChallengeSucceededIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParameterizerContractChallengeSucceededIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParameterizerContractChallengeSucceeded represents a ChallengeSucceeded event raised by the ParameterizerContract contract.
type ParameterizerContractChallengeSucceeded struct {
	PropID      [32]byte
	ChallengeID *big.Int
	RewardPool  *big.Int
	TotalTokens *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterChallengeSucceeded is a free log retrieval operation binding the contract event 0x362a12431f779a2baff4f77f75ba7960ae993a5c41b425df11f7fd0af2b9cbe6.
//
// Solidity: event _ChallengeSucceeded(propID indexed bytes32, challengeID indexed uint256, rewardPool uint256, totalTokens uint256)
func (_ParameterizerContract *ParameterizerContractFilterer) FilterChallengeSucceeded(opts *bind.FilterOpts, propID [][32]byte, challengeID []*big.Int) (*ParameterizerContractChallengeSucceededIterator, error) {

	var propIDRule []interface{}
	for _, propIDItem := range propID {
		propIDRule = append(propIDRule, propIDItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	logs, sub, err := _ParameterizerContract.contract.FilterLogs(opts, "_ChallengeSucceeded", propIDRule, challengeIDRule)
	if err != nil {
		return nil, err
	}
	return &ParameterizerContractChallengeSucceededIterator{contract: _ParameterizerContract.contract, event: "_ChallengeSucceeded", logs: logs, sub: sub}, nil
}

// WatchChallengeSucceeded is a free log subscription operation binding the contract event 0x362a12431f779a2baff4f77f75ba7960ae993a5c41b425df11f7fd0af2b9cbe6.
//
// Solidity: event _ChallengeSucceeded(propID indexed bytes32, challengeID indexed uint256, rewardPool uint256, totalTokens uint256)
func (_ParameterizerContract *ParameterizerContractFilterer) WatchChallengeSucceeded(opts *bind.WatchOpts, sink chan<- *ParameterizerContractChallengeSucceeded, propID [][32]byte, challengeID []*big.Int) (event.Subscription, error) {

	var propIDRule []interface{}
	for _, propIDItem := range propID {
		propIDRule = append(propIDRule, propIDItem)
	}
	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	logs, sub, err := _ParameterizerContract.contract.WatchLogs(opts, "_ChallengeSucceeded", propIDRule, challengeIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParameterizerContractChallengeSucceeded)
				if err := _ParameterizerContract.contract.UnpackLog(event, "_ChallengeSucceeded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParameterizerContractNewChallengeIterator is returned from FilterNewChallenge and is used to iterate over the raw logs and unpacked data for NewChallenge events raised by the ParameterizerContract contract.
type ParameterizerContractNewChallengeIterator struct {
	Event *ParameterizerContractNewChallenge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParameterizerContractNewChallengeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParameterizerContractNewChallenge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParameterizerContractNewChallenge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParameterizerContractNewChallengeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParameterizerContractNewChallengeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParameterizerContractNewChallenge represents a NewChallenge event raised by the ParameterizerContract contract.
type ParameterizerContractNewChallenge struct {
	PropID        [32]byte
	ChallengeID   *big.Int
	CommitEndDate *big.Int
	RevealEndDate *big.Int
	Challenger    common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterNewChallenge is a free log retrieval operation binding the contract event 0xe94e3086c4bfe84acba4437b85a80fca3721dfc419d1f7afe4fa4e470e670b48.
//
// Solidity: event _NewChallenge(propID indexed bytes32, challengeID uint256, commitEndDate uint256, revealEndDate uint256, challenger indexed address)
func (_ParameterizerContract *ParameterizerContractFilterer) FilterNewChallenge(opts *bind.FilterOpts, propID [][32]byte, challenger []common.Address) (*ParameterizerContractNewChallengeIterator, error) {

	var propIDRule []interface{}
	for _, propIDItem := range propID {
		propIDRule = append(propIDRule, propIDItem)
	}

	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _ParameterizerContract.contract.FilterLogs(opts, "_NewChallenge", propIDRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return &ParameterizerContractNewChallengeIterator{contract: _ParameterizerContract.contract, event: "_NewChallenge", logs: logs, sub: sub}, nil
}

// WatchNewChallenge is a free log subscription operation binding the contract event 0xe94e3086c4bfe84acba4437b85a80fca3721dfc419d1f7afe4fa4e470e670b48.
//
// Solidity: event _NewChallenge(propID indexed bytes32, challengeID uint256, commitEndDate uint256, revealEndDate uint256, challenger indexed address)
func (_ParameterizerContract *ParameterizerContractFilterer) WatchNewChallenge(opts *bind.WatchOpts, sink chan<- *ParameterizerContractNewChallenge, propID [][32]byte, challenger []common.Address) (event.Subscription, error) {

	var propIDRule []interface{}
	for _, propIDItem := range propID {
		propIDRule = append(propIDRule, propIDItem)
	}

	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _ParameterizerContract.contract.WatchLogs(opts, "_NewChallenge", propIDRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParameterizerContractNewChallenge)
				if err := _ParameterizerContract.contract.UnpackLog(event, "_NewChallenge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParameterizerContractProposalAcceptedIterator is returned from FilterProposalAccepted and is used to iterate over the raw logs and unpacked data for ProposalAccepted events raised by the ParameterizerContract contract.
type ParameterizerContractProposalAcceptedIterator struct {
	Event *ParameterizerContractProposalAccepted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParameterizerContractProposalAcceptedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParameterizerContractProposalAccepted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParameterizerContractProposalAccepted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParameterizerContractProposalAcceptedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParameterizerContractProposalAcceptedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParameterizerContractProposalAccepted represents a ProposalAccepted event raised by the ParameterizerContract contract.
type ParameterizerContractProposalAccepted struct {
	PropID [32]byte
	Name   string
	Value  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterProposalAccepted is a free log retrieval operation binding the contract event 0x37f3986c71e1aa2c470cfc4a92af70820610c3065589d35ef1664ea27f3e73a5.
//
// Solidity: event _ProposalAccepted(propID indexed bytes32, name string, value uint256)
func (_ParameterizerContract *ParameterizerContractFilterer) FilterProposalAccepted(opts *bind.FilterOpts, propID [][32]byte) (*ParameterizerContractProposalAcceptedIterator, error) {

	var propIDRule []interface{}
	for _, propIDItem := range propID {
		propIDRule = append(propIDRule, propIDItem)
	}

	logs, sub, err := _ParameterizerContract.contract.FilterLogs(opts, "_ProposalAccepted", propIDRule)
	if err != nil {
		return nil, err
	}
	return &ParameterizerContractProposalAcceptedIterator{contract: _ParameterizerContract.contract, event: "_ProposalAccepted", logs: logs, sub: sub}, nil
}

// WatchProposalAccepted is a free log subscription operation binding the contract event 0x37f3986c71e1aa2c470cfc4a92af70820610c3065589d35ef1664ea27f3e73a5.
//
// Solidity: event _ProposalAccepted(propID indexed bytes32, name string, value uint256)
func (_ParameterizerContract *ParameterizerContractFilterer) WatchProposalAccepted(opts *bind.WatchOpts, sink chan<- *ParameterizerContractProposalAccepted, propID [][32]byte) (event.Subscription, error) {

	var propIDRule []interface{}
	for _, propIDItem := range propID {
		propIDRule = append(propIDRule, propIDItem)
	}

	logs, sub, err := _ParameterizerContract.contract.WatchLogs(opts, "_ProposalAccepted", propIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParameterizerContractProposalAccepted)
				if err := _ParameterizerContract.contract.UnpackLog(event, "_ProposalAccepted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParameterizerContractProposalExpiredIterator is returned from FilterProposalExpired and is used to iterate over the raw logs and unpacked data for ProposalExpired events raised by the ParameterizerContract contract.
type ParameterizerContractProposalExpiredIterator struct {
	Event *ParameterizerContractProposalExpired // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParameterizerContractProposalExpiredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParameterizerContractProposalExpired)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParameterizerContractProposalExpired)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParameterizerContractProposalExpiredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParameterizerContractProposalExpiredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParameterizerContractProposalExpired represents a ProposalExpired event raised by the ParameterizerContract contract.
type ParameterizerContractProposalExpired struct {
	PropID [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterProposalExpired is a free log retrieval operation binding the contract event 0x29026cb2acebe6d0a4b6d593ccadf76e3fc6d0a02254e078b0c4a619608089d7.
//
// Solidity: event _ProposalExpired(propID indexed bytes32)
func (_ParameterizerContract *ParameterizerContractFilterer) FilterProposalExpired(opts *bind.FilterOpts, propID [][32]byte) (*ParameterizerContractProposalExpiredIterator, error) {

	var propIDRule []interface{}
	for _, propIDItem := range propID {
		propIDRule = append(propIDRule, propIDItem)
	}

	logs, sub, err := _ParameterizerContract.contract.FilterLogs(opts, "_ProposalExpired", propIDRule)
	if err != nil {
		return nil, err
	}
	return &ParameterizerContractProposalExpiredIterator{contract: _ParameterizerContract.contract, event: "_ProposalExpired", logs: logs, sub: sub}, nil
}

// WatchProposalExpired is a free log subscription operation binding the contract event 0x29026cb2acebe6d0a4b6d593ccadf76e3fc6d0a02254e078b0c4a619608089d7.
//
// Solidity: event _ProposalExpired(propID indexed bytes32)
func (_ParameterizerContract *ParameterizerContractFilterer) WatchProposalExpired(opts *bind.WatchOpts, sink chan<- *ParameterizerContractProposalExpired, propID [][32]byte) (event.Subscription, error) {

	var propIDRule []interface{}
	for _, propIDItem := range propID {
		propIDRule = append(propIDRule, propIDItem)
	}

	logs, sub, err := _ParameterizerContract.contract.WatchLogs(opts, "_ProposalExpired", propIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParameterizerContractProposalExpired)
				if err := _ParameterizerContract.contract.UnpackLog(event, "_ProposalExpired", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParameterizerContractReparameterizationProposalIterator is returned from FilterReparameterizationProposal and is used to iterate over the raw logs and unpacked data for ReparameterizationProposal events raised by the ParameterizerContract contract.
type ParameterizerContractReparameterizationProposalIterator struct {
	Event *ParameterizerContractReparameterizationProposal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParameterizerContractReparameterizationProposalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParameterizerContractReparameterizationProposal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParameterizerContractReparameterizationProposal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParameterizerContractReparameterizationProposalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParameterizerContractReparameterizationProposalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParameterizerContractReparameterizationProposal represents a ReparameterizationProposal event raised by the ParameterizerContract contract.
type ParameterizerContractReparameterizationProposal struct {
	Name       string
	Value      *big.Int
	PropID     [32]byte
	Deposit    *big.Int
	AppEndDate *big.Int
	Proposer   common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterReparameterizationProposal is a free log retrieval operation binding the contract event 0xb25bdef16105f099e5c185f9c7fd969571e8e0caa3f7bd75409512fe0a41a60b.
//
// Solidity: event _ReparameterizationProposal(name string, value uint256, propID bytes32, deposit uint256, appEndDate uint256, proposer indexed address)
func (_ParameterizerContract *ParameterizerContractFilterer) FilterReparameterizationProposal(opts *bind.FilterOpts, proposer []common.Address) (*ParameterizerContractReparameterizationProposalIterator, error) {

	var proposerRule []interface{}
	for _, proposerItem := range proposer {
		proposerRule = append(proposerRule, proposerItem)
	}

	logs, sub, err := _ParameterizerContract.contract.FilterLogs(opts, "_ReparameterizationProposal", proposerRule)
	if err != nil {
		return nil, err
	}
	return &ParameterizerContractReparameterizationProposalIterator{contract: _ParameterizerContract.contract, event: "_ReparameterizationProposal", logs: logs, sub: sub}, nil
}

// WatchReparameterizationProposal is a free log subscription operation binding the contract event 0xb25bdef16105f099e5c185f9c7fd969571e8e0caa3f7bd75409512fe0a41a60b.
//
// Solidity: event _ReparameterizationProposal(name string, value uint256, propID bytes32, deposit uint256, appEndDate uint256, proposer indexed address)
func (_ParameterizerContract *ParameterizerContractFilterer) WatchReparameterizationProposal(opts *bind.WatchOpts, sink chan<- *ParameterizerContractReparameterizationProposal, proposer []common.Address) (event.Subscription, error) {

	var proposerRule []interface{}
	for _, proposerItem := range proposer {
		proposerRule = append(proposerRule, proposerItem)
	}

	logs, sub, err := _ParameterizerContract.contract.WatchLogs(opts, "_ReparameterizationProposal", proposerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParameterizerContractReparameterizationProposal)
				if err := _ParameterizerContract.contract.UnpackLog(event, "_ReparameterizationProposal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParameterizerContractRewardClaimedIterator is returned from FilterRewardClaimed and is used to iterate over the raw logs and unpacked data for RewardClaimed events raised by the ParameterizerContract contract.
type ParameterizerContractRewardClaimedIterator struct {
	Event *ParameterizerContractRewardClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParameterizerContractRewardClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParameterizerContractRewardClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParameterizerContractRewardClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParameterizerContractRewardClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParameterizerContractRewardClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParameterizerContractRewardClaimed represents a RewardClaimed event raised by the ParameterizerContract contract.
type ParameterizerContractRewardClaimed struct {
	ChallengeID *big.Int
	Reward      *big.Int
	Voter       common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRewardClaimed is a free log retrieval operation binding the contract event 0x6f4c982acc31b0af2cf1dc1556f21c0325d893782d65e83c68a5534a33f59957.
//
// Solidity: event _RewardClaimed(challengeID indexed uint256, reward uint256, voter indexed address)
func (_ParameterizerContract *ParameterizerContractFilterer) FilterRewardClaimed(opts *bind.FilterOpts, challengeID []*big.Int, voter []common.Address) (*ParameterizerContractRewardClaimedIterator, error) {

	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _ParameterizerContract.contract.FilterLogs(opts, "_RewardClaimed", challengeIDRule, voterRule)
	if err != nil {
		return nil, err
	}
	return &ParameterizerContractRewardClaimedIterator{contract: _ParameterizerContract.contract, event: "_RewardClaimed", logs: logs, sub: sub}, nil
}

// WatchRewardClaimed is a free log subscription operation binding the contract event 0x6f4c982acc31b0af2cf1dc1556f21c0325d893782d65e83c68a5534a33f59957.
//
// Solidity: event _RewardClaimed(challengeID indexed uint256, reward uint256, voter indexed address)
func (_ParameterizerContract *ParameterizerContractFilterer) WatchRewardClaimed(opts *bind.WatchOpts, sink chan<- *ParameterizerContractRewardClaimed, challengeID []*big.Int, voter []common.Address) (event.Subscription, error) {

	var challengeIDRule []interface{}
	for _, challengeIDItem := range challengeID {
		challengeIDRule = append(challengeIDRule, challengeIDItem)
	}

	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _ParameterizerContract.contract.WatchLogs(opts, "_RewardClaimed", challengeIDRule, voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParameterizerContractRewardClaimed)
				if err := _ParameterizerContract.contract.UnpackLog(event, "_RewardClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
