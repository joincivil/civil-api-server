version: 2

defaults: &defaults
    docker:
      # CircleCI Go images available at: https://hub.docker.com/r/circleci/golang/
      - image: circleci/golang:1.10
      # CircleCI PostgreSQL images available at: https://hub.docker.com/r/circleci/postgres/
      - image: circleci/postgres:9.4.12-alpine
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
jobs:
  build:
    <<: *defaults
    working_directory: /go/src/github.com/joincivil/civil-events-processor
    environment:
    steps:
      - run:
          name: Local docker sudo
          command: |
            if [[ $CIRCLE_BUILD_NUM -gt 0 ]]; then
              echo "This is not a local build. Disabling sudo for docker"
              touch ~/sudo
            else
              echo "This is a local build. Enabling sudo for docker"
              echo sudo > ~/sudo
            fi
      - checkout
      - setup_remote_docker:   # (2)
          docker_layer_caching: true # (3)
      - run:
           name: Setting up tools
           command: make check-go-env
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1
      - run:
          name: Building code
          command: make build
      - persist_to_workspace:
          root: ./
          paths:
            - build
            - pkg
            - Makefile
            - vendor
            - cmd
            - .gometalinter.json

  lint:
    <<: *defaults
    working_directory: /go/src/github.com/joincivil/civil-events-processor
    environment:
    steps:
        - attach_workspace:
            at: ./
        - run:
           name: Setting up tools
           command: make install-linter
        - run:
            name: Run linter
            command: make lint

  test:
    <<: *defaults
    working_directory: /go/src/github.com/joincivil/civil-events-processor
    environment:
    steps:
        - attach_workspace:
            at: ./
        - run:
            name: Run unit tests
            environment:
               DB_URL: "postgres://root@localhost:5432/circle_test?sslmode=disable"
               DB_MIGRATIONS: /go/src/github.com/joincivil/civil-events-processor/migrations
            command: |
               make test

  setup-gcp:
    docker:
      - image: civilmedia/gcloud-node:latest
    working_directory: /go/src/github.com/joincivil/civil-events-processor
    steps:
       - run:
          name: Dump Google Cloud Credentials to file
          command: |
            echo ${GOOGLE_AUTH} | base64 -d > ${HOME}/gcp-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
            gcloud docker --authorize-only
       - persist_to_workspace:
          root: /root
          paths:
            - gcp-key.json
            - .config/gcloud
            - .docker
            - .dockercfg
            - .kubernetes_ns
            - .kube

  push-container-processor:
    docker:
      - image: civilmedia/gcloud-node:latest
    working_directory: /go/src/github.com/joincivil/civil-events-processor
    steps:
      - attach_workspace:
          at: /root
      - checkout
      - setup_remote_docker
      - run:
          name: Build Container
          command: |
            TAG=`echo $CIRCLE_BRANCH | sed 's/\\//_/g'`

            mv /root/build ./build
            cp /root/cmd/processorcron/Dockerfile ./Dockerfile

            docker build . \
              -t gcr.io/$GOOGLE_PROJECT_ID/$CIRCLE_PROJECT_REPONAME:$TAG \
              -t gcr.io/$GOOGLE_PROJECT_ID/$CIRCLE_PROJECT_REPONAME:$TAG-$CIRCLE_SHA1
      - deploy:
          name: Push Containers to Registry
          command: |
           gcloud config list
           echo "pushing $GOOGLE_PROJECT_ID"
           docker push gcr.io/$GOOGLE_PROJECT_ID/$CIRCLE_PROJECT_REPONAME

  deploy-staging-processor:
    docker:
      - image: civilmedia/gcloud-node:latest
    working_directory: ~/repo
    steps:
      - attach_workspace:
              at: /root
      - deploy:
          name: Update Kubernetes Deployment on STAGING
          command: |
            kubectl set image deployment/$CIRCLE_PROJECT_REPONAME $CIRCLE_PROJECT_REPONAME=gcr.io/$GOOGLE_PROJECT_ID/$CIRCLE_PROJECT_REPONAME:development-$CIRCLE_SHA1 --namespace staging

  deploy-production-processor:
    docker:
      - image: civilmedia/gcloud-node:latest
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: /root
      - deploy:
          name: Update Kubernetes Deployment on PRODUCTION
          command: |
            echo "intentionally turned off - uncomment to enable"
            # kubectl set image deployment/$CIRCLE_PROJECT_REPONAME $CIRCLE_PROJECT_REPONAME=gcr.io/$GOOGLE_PROJECT_ID/$CIRCLE_PROJECT_REPONAME:master-$CIRCLE_SHA1 --namespace production
            #
            #

  push-container-graphql:
    docker:
      - image: civilmedia/gcloud-node:latest
    working_directory: /go/src/github.com/joincivil/civil-events-processor
    steps:
      - attach_workspace:
          at: /root
      - checkout
      - setup_remote_docker
      - run:
          name: Build Container
          command: |
            TAG=`echo $CIRCLE_BRANCH | sed 's/\\//_/g'`
            GRAPHQL_REPONAME="$CIRCLE_PROJECT_REPONAME-graphql"
            echo $GRAPHQL_REPONAME

            mv /root/build ./build
            cp /root/cmd/graphqlserver/Dockerfile ./Dockerfile

            docker build . \
              -t gcr.io/$GOOGLE_PROJECT_ID/$GRAPHQL_REPONAME:$TAG \
              -t gcr.io/$GOOGLE_PROJECT_ID/$GRAPHQL_REPONAME:$TAG-$CIRCLE_SHA1
      - deploy:
          name: Push Containers to Registry
          command: |
           gcloud config list
           GRAPHQL_REPONAME="$CIRCLE_PROJECT_REPONAME-graphql"
           echo "pushing $GOOGLE_PROJECT_ID"
           docker push gcr.io/$GOOGLE_PROJECT_ID/$GRAPHQL_REPONAME

  deploy-staging-graphql:
    docker:
      - image: civilmedia/gcloud-node:latest
    working_directory: ~/repo
    steps:
      - attach_workspace:
              at: /root
      - deploy:
          name: Update Kubernetes Deployment on STAGING
          command: |
            GRAPHQL_REPONAME="$CIRCLE_PROJECT_REPONAME-graphql"
            kubectl set image deployment/$GRAPHQL_REPONAME $GRAPHQL_REPONAME=gcr.io/$GOOGLE_PROJECT_ID/$GRAPHQL_REPONAME:development-$CIRCLE_SHA1 --namespace staging

  deploy-production-graphql:
    docker:
      - image: civilmedia/gcloud-node:latest
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: /root
      - deploy:
          name: Update Kubernetes Deployment on PRODUCTION
          command: |
            echo "intentionally turned off - uncomment to enable"
            # GRAPHQL_REPONAME="$CIRCLE_PROJECT_REPONAME-graphql"
            # kubectl set image deployment/$GRAPHQL_REPONAME $GRAPHQL_REPONAME=gcr.io/$GOOGLE_PROJECT_ID/$GRAPHQL_REPONAME:master-$CIRCLE_SHA1 --namespace production
            #
            #
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - lint:
          requires:
            - build
      - setup-gcp:
          context: gcp-common
          requires:
            - build
            - test
            - lint
          filters:
            branches:
              only:
                - development
                - master
                - png/1322/ci
                - /container-.*/
      - push-container-processor:
          context: gcp-common
          requires:
            - setup-gcp
          filters:
            branches:
              only:
                - development
                - master
                - png/1322/ci
                - /container-.*/
      - deploy-staging-processor:
          context: gcp-common
          requires:
            - push-container-processor
          filters:
            branches:
              only:
                - development
                - png/1322/ci
      - deploy-production-processor:
          context: gcp-common
          requires:
            - push-container-processor
          filters:
            branches:
              only:
                - master
      - push-container-graphql:
          context: gcp-common
          requires:
            - setup-gcp
          filters:
            branches:
              only:
                - development
                - master
                - png/1322/ci
                - /container-.*/
      - deploy-staging-graphql:
          context: gcp-common
          requires:
            - push-container-graphql
          filters:
            branches:
              only:
                - development
                - png/1322/ci
      - deploy-production-graphql:
          context: gcp-common
          requires:
            - push-container-graphql
          filters:
            branches:
              only:
                - master
